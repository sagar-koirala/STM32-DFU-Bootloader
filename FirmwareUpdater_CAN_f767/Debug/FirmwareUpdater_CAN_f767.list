
FirmwareUpdater_CAN_f767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e24  08040200  08040200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08045024  08045024  00015024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080450ec  080450ec  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080450ec  080450ec  000150ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080450f4  080450f4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080450f4  080450f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080450f8  080450f8  000150f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080450fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000084  08045180  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08045180  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c426  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b64  00000000  00000000  0002c4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  0002e040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000880  00000000  00000000  0002e968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d07  00000000  00000000  0002f1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b201  00000000  00000000  00056eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f526a  00000000  00000000  000620f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015735a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cc4  00000000  00000000  001573ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040200 <__do_global_dtors_aux>:
 8040200:	b510      	push	{r4, lr}
 8040202:	4c05      	ldr	r4, [pc, #20]	; (8040218 <__do_global_dtors_aux+0x18>)
 8040204:	7823      	ldrb	r3, [r4, #0]
 8040206:	b933      	cbnz	r3, 8040216 <__do_global_dtors_aux+0x16>
 8040208:	4b04      	ldr	r3, [pc, #16]	; (804021c <__do_global_dtors_aux+0x1c>)
 804020a:	b113      	cbz	r3, 8040212 <__do_global_dtors_aux+0x12>
 804020c:	4804      	ldr	r0, [pc, #16]	; (8040220 <__do_global_dtors_aux+0x20>)
 804020e:	f3af 8000 	nop.w
 8040212:	2301      	movs	r3, #1
 8040214:	7023      	strb	r3, [r4, #0]
 8040216:	bd10      	pop	{r4, pc}
 8040218:	20000084 	.word	0x20000084
 804021c:	00000000 	.word	0x00000000
 8040220:	0804500c 	.word	0x0804500c

08040224 <frame_dummy>:
 8040224:	b508      	push	{r3, lr}
 8040226:	4b03      	ldr	r3, [pc, #12]	; (8040234 <frame_dummy+0x10>)
 8040228:	b11b      	cbz	r3, 8040232 <frame_dummy+0xe>
 804022a:	4903      	ldr	r1, [pc, #12]	; (8040238 <frame_dummy+0x14>)
 804022c:	4803      	ldr	r0, [pc, #12]	; (804023c <frame_dummy+0x18>)
 804022e:	f3af 8000 	nop.w
 8040232:	bd08      	pop	{r3, pc}
 8040234:	00000000 	.word	0x00000000
 8040238:	20000088 	.word	0x20000088
 804023c:	0804500c 	.word	0x0804500c

08040240 <memchr>:
 8040240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8040244:	2a10      	cmp	r2, #16
 8040246:	db2b      	blt.n	80402a0 <memchr+0x60>
 8040248:	f010 0f07 	tst.w	r0, #7
 804024c:	d008      	beq.n	8040260 <memchr+0x20>
 804024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040252:	3a01      	subs	r2, #1
 8040254:	428b      	cmp	r3, r1
 8040256:	d02d      	beq.n	80402b4 <memchr+0x74>
 8040258:	f010 0f07 	tst.w	r0, #7
 804025c:	b342      	cbz	r2, 80402b0 <memchr+0x70>
 804025e:	d1f6      	bne.n	804024e <memchr+0xe>
 8040260:	b4f0      	push	{r4, r5, r6, r7}
 8040262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804026a:	f022 0407 	bic.w	r4, r2, #7
 804026e:	f07f 0700 	mvns.w	r7, #0
 8040272:	2300      	movs	r3, #0
 8040274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040278:	3c08      	subs	r4, #8
 804027a:	ea85 0501 	eor.w	r5, r5, r1
 804027e:	ea86 0601 	eor.w	r6, r6, r1
 8040282:	fa85 f547 	uadd8	r5, r5, r7
 8040286:	faa3 f587 	sel	r5, r3, r7
 804028a:	fa86 f647 	uadd8	r6, r6, r7
 804028e:	faa5 f687 	sel	r6, r5, r7
 8040292:	b98e      	cbnz	r6, 80402b8 <memchr+0x78>
 8040294:	d1ee      	bne.n	8040274 <memchr+0x34>
 8040296:	bcf0      	pop	{r4, r5, r6, r7}
 8040298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804029c:	f002 0207 	and.w	r2, r2, #7
 80402a0:	b132      	cbz	r2, 80402b0 <memchr+0x70>
 80402a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80402a6:	3a01      	subs	r2, #1
 80402a8:	ea83 0301 	eor.w	r3, r3, r1
 80402ac:	b113      	cbz	r3, 80402b4 <memchr+0x74>
 80402ae:	d1f8      	bne.n	80402a2 <memchr+0x62>
 80402b0:	2000      	movs	r0, #0
 80402b2:	4770      	bx	lr
 80402b4:	3801      	subs	r0, #1
 80402b6:	4770      	bx	lr
 80402b8:	2d00      	cmp	r5, #0
 80402ba:	bf06      	itte	eq
 80402bc:	4635      	moveq	r5, r6
 80402be:	3803      	subeq	r0, #3
 80402c0:	3807      	subne	r0, #7
 80402c2:	f015 0f01 	tst.w	r5, #1
 80402c6:	d107      	bne.n	80402d8 <memchr+0x98>
 80402c8:	3001      	adds	r0, #1
 80402ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80402ce:	bf02      	ittt	eq
 80402d0:	3001      	addeq	r0, #1
 80402d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80402d6:	3001      	addeq	r0, #1
 80402d8:	bcf0      	pop	{r4, r5, r6, r7}
 80402da:	3801      	subs	r0, #1
 80402dc:	4770      	bx	lr
 80402de:	bf00      	nop

080402e0 <__aeabi_uldivmod>:
 80402e0:	b953      	cbnz	r3, 80402f8 <__aeabi_uldivmod+0x18>
 80402e2:	b94a      	cbnz	r2, 80402f8 <__aeabi_uldivmod+0x18>
 80402e4:	2900      	cmp	r1, #0
 80402e6:	bf08      	it	eq
 80402e8:	2800      	cmpeq	r0, #0
 80402ea:	bf1c      	itt	ne
 80402ec:	f04f 31ff 	movne.w	r1, #4294967295
 80402f0:	f04f 30ff 	movne.w	r0, #4294967295
 80402f4:	f000 b974 	b.w	80405e0 <__aeabi_idiv0>
 80402f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80402fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040300:	f000 f806 	bl	8040310 <__udivmoddi4>
 8040304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804030c:	b004      	add	sp, #16
 804030e:	4770      	bx	lr

08040310 <__udivmoddi4>:
 8040310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040314:	9d08      	ldr	r5, [sp, #32]
 8040316:	4604      	mov	r4, r0
 8040318:	468e      	mov	lr, r1
 804031a:	2b00      	cmp	r3, #0
 804031c:	d14d      	bne.n	80403ba <__udivmoddi4+0xaa>
 804031e:	428a      	cmp	r2, r1
 8040320:	4694      	mov	ip, r2
 8040322:	d969      	bls.n	80403f8 <__udivmoddi4+0xe8>
 8040324:	fab2 f282 	clz	r2, r2
 8040328:	b152      	cbz	r2, 8040340 <__udivmoddi4+0x30>
 804032a:	fa01 f302 	lsl.w	r3, r1, r2
 804032e:	f1c2 0120 	rsb	r1, r2, #32
 8040332:	fa20 f101 	lsr.w	r1, r0, r1
 8040336:	fa0c fc02 	lsl.w	ip, ip, r2
 804033a:	ea41 0e03 	orr.w	lr, r1, r3
 804033e:	4094      	lsls	r4, r2
 8040340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040344:	0c21      	lsrs	r1, r4, #16
 8040346:	fbbe f6f8 	udiv	r6, lr, r8
 804034a:	fa1f f78c 	uxth.w	r7, ip
 804034e:	fb08 e316 	mls	r3, r8, r6, lr
 8040352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040356:	fb06 f107 	mul.w	r1, r6, r7
 804035a:	4299      	cmp	r1, r3
 804035c:	d90a      	bls.n	8040374 <__udivmoddi4+0x64>
 804035e:	eb1c 0303 	adds.w	r3, ip, r3
 8040362:	f106 30ff 	add.w	r0, r6, #4294967295
 8040366:	f080 811f 	bcs.w	80405a8 <__udivmoddi4+0x298>
 804036a:	4299      	cmp	r1, r3
 804036c:	f240 811c 	bls.w	80405a8 <__udivmoddi4+0x298>
 8040370:	3e02      	subs	r6, #2
 8040372:	4463      	add	r3, ip
 8040374:	1a5b      	subs	r3, r3, r1
 8040376:	b2a4      	uxth	r4, r4
 8040378:	fbb3 f0f8 	udiv	r0, r3, r8
 804037c:	fb08 3310 	mls	r3, r8, r0, r3
 8040380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040384:	fb00 f707 	mul.w	r7, r0, r7
 8040388:	42a7      	cmp	r7, r4
 804038a:	d90a      	bls.n	80403a2 <__udivmoddi4+0x92>
 804038c:	eb1c 0404 	adds.w	r4, ip, r4
 8040390:	f100 33ff 	add.w	r3, r0, #4294967295
 8040394:	f080 810a 	bcs.w	80405ac <__udivmoddi4+0x29c>
 8040398:	42a7      	cmp	r7, r4
 804039a:	f240 8107 	bls.w	80405ac <__udivmoddi4+0x29c>
 804039e:	4464      	add	r4, ip
 80403a0:	3802      	subs	r0, #2
 80403a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80403a6:	1be4      	subs	r4, r4, r7
 80403a8:	2600      	movs	r6, #0
 80403aa:	b11d      	cbz	r5, 80403b4 <__udivmoddi4+0xa4>
 80403ac:	40d4      	lsrs	r4, r2
 80403ae:	2300      	movs	r3, #0
 80403b0:	e9c5 4300 	strd	r4, r3, [r5]
 80403b4:	4631      	mov	r1, r6
 80403b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80403ba:	428b      	cmp	r3, r1
 80403bc:	d909      	bls.n	80403d2 <__udivmoddi4+0xc2>
 80403be:	2d00      	cmp	r5, #0
 80403c0:	f000 80ef 	beq.w	80405a2 <__udivmoddi4+0x292>
 80403c4:	2600      	movs	r6, #0
 80403c6:	e9c5 0100 	strd	r0, r1, [r5]
 80403ca:	4630      	mov	r0, r6
 80403cc:	4631      	mov	r1, r6
 80403ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80403d2:	fab3 f683 	clz	r6, r3
 80403d6:	2e00      	cmp	r6, #0
 80403d8:	d14a      	bne.n	8040470 <__udivmoddi4+0x160>
 80403da:	428b      	cmp	r3, r1
 80403dc:	d302      	bcc.n	80403e4 <__udivmoddi4+0xd4>
 80403de:	4282      	cmp	r2, r0
 80403e0:	f200 80f9 	bhi.w	80405d6 <__udivmoddi4+0x2c6>
 80403e4:	1a84      	subs	r4, r0, r2
 80403e6:	eb61 0303 	sbc.w	r3, r1, r3
 80403ea:	2001      	movs	r0, #1
 80403ec:	469e      	mov	lr, r3
 80403ee:	2d00      	cmp	r5, #0
 80403f0:	d0e0      	beq.n	80403b4 <__udivmoddi4+0xa4>
 80403f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80403f6:	e7dd      	b.n	80403b4 <__udivmoddi4+0xa4>
 80403f8:	b902      	cbnz	r2, 80403fc <__udivmoddi4+0xec>
 80403fa:	deff      	udf	#255	; 0xff
 80403fc:	fab2 f282 	clz	r2, r2
 8040400:	2a00      	cmp	r2, #0
 8040402:	f040 8092 	bne.w	804052a <__udivmoddi4+0x21a>
 8040406:	eba1 010c 	sub.w	r1, r1, ip
 804040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 804040e:	fa1f fe8c 	uxth.w	lr, ip
 8040412:	2601      	movs	r6, #1
 8040414:	0c20      	lsrs	r0, r4, #16
 8040416:	fbb1 f3f7 	udiv	r3, r1, r7
 804041a:	fb07 1113 	mls	r1, r7, r3, r1
 804041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040422:	fb0e f003 	mul.w	r0, lr, r3
 8040426:	4288      	cmp	r0, r1
 8040428:	d908      	bls.n	804043c <__udivmoddi4+0x12c>
 804042a:	eb1c 0101 	adds.w	r1, ip, r1
 804042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8040432:	d202      	bcs.n	804043a <__udivmoddi4+0x12a>
 8040434:	4288      	cmp	r0, r1
 8040436:	f200 80cb 	bhi.w	80405d0 <__udivmoddi4+0x2c0>
 804043a:	4643      	mov	r3, r8
 804043c:	1a09      	subs	r1, r1, r0
 804043e:	b2a4      	uxth	r4, r4
 8040440:	fbb1 f0f7 	udiv	r0, r1, r7
 8040444:	fb07 1110 	mls	r1, r7, r0, r1
 8040448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 804044c:	fb0e fe00 	mul.w	lr, lr, r0
 8040450:	45a6      	cmp	lr, r4
 8040452:	d908      	bls.n	8040466 <__udivmoddi4+0x156>
 8040454:	eb1c 0404 	adds.w	r4, ip, r4
 8040458:	f100 31ff 	add.w	r1, r0, #4294967295
 804045c:	d202      	bcs.n	8040464 <__udivmoddi4+0x154>
 804045e:	45a6      	cmp	lr, r4
 8040460:	f200 80bb 	bhi.w	80405da <__udivmoddi4+0x2ca>
 8040464:	4608      	mov	r0, r1
 8040466:	eba4 040e 	sub.w	r4, r4, lr
 804046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804046e:	e79c      	b.n	80403aa <__udivmoddi4+0x9a>
 8040470:	f1c6 0720 	rsb	r7, r6, #32
 8040474:	40b3      	lsls	r3, r6
 8040476:	fa22 fc07 	lsr.w	ip, r2, r7
 804047a:	ea4c 0c03 	orr.w	ip, ip, r3
 804047e:	fa20 f407 	lsr.w	r4, r0, r7
 8040482:	fa01 f306 	lsl.w	r3, r1, r6
 8040486:	431c      	orrs	r4, r3
 8040488:	40f9      	lsrs	r1, r7
 804048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804048e:	fa00 f306 	lsl.w	r3, r0, r6
 8040492:	fbb1 f8f9 	udiv	r8, r1, r9
 8040496:	0c20      	lsrs	r0, r4, #16
 8040498:	fa1f fe8c 	uxth.w	lr, ip
 804049c:	fb09 1118 	mls	r1, r9, r8, r1
 80404a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80404a4:	fb08 f00e 	mul.w	r0, r8, lr
 80404a8:	4288      	cmp	r0, r1
 80404aa:	fa02 f206 	lsl.w	r2, r2, r6
 80404ae:	d90b      	bls.n	80404c8 <__udivmoddi4+0x1b8>
 80404b0:	eb1c 0101 	adds.w	r1, ip, r1
 80404b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80404b8:	f080 8088 	bcs.w	80405cc <__udivmoddi4+0x2bc>
 80404bc:	4288      	cmp	r0, r1
 80404be:	f240 8085 	bls.w	80405cc <__udivmoddi4+0x2bc>
 80404c2:	f1a8 0802 	sub.w	r8, r8, #2
 80404c6:	4461      	add	r1, ip
 80404c8:	1a09      	subs	r1, r1, r0
 80404ca:	b2a4      	uxth	r4, r4
 80404cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80404d0:	fb09 1110 	mls	r1, r9, r0, r1
 80404d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80404d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80404dc:	458e      	cmp	lr, r1
 80404de:	d908      	bls.n	80404f2 <__udivmoddi4+0x1e2>
 80404e0:	eb1c 0101 	adds.w	r1, ip, r1
 80404e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80404e8:	d26c      	bcs.n	80405c4 <__udivmoddi4+0x2b4>
 80404ea:	458e      	cmp	lr, r1
 80404ec:	d96a      	bls.n	80405c4 <__udivmoddi4+0x2b4>
 80404ee:	3802      	subs	r0, #2
 80404f0:	4461      	add	r1, ip
 80404f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80404f6:	fba0 9402 	umull	r9, r4, r0, r2
 80404fa:	eba1 010e 	sub.w	r1, r1, lr
 80404fe:	42a1      	cmp	r1, r4
 8040500:	46c8      	mov	r8, r9
 8040502:	46a6      	mov	lr, r4
 8040504:	d356      	bcc.n	80405b4 <__udivmoddi4+0x2a4>
 8040506:	d053      	beq.n	80405b0 <__udivmoddi4+0x2a0>
 8040508:	b15d      	cbz	r5, 8040522 <__udivmoddi4+0x212>
 804050a:	ebb3 0208 	subs.w	r2, r3, r8
 804050e:	eb61 010e 	sbc.w	r1, r1, lr
 8040512:	fa01 f707 	lsl.w	r7, r1, r7
 8040516:	fa22 f306 	lsr.w	r3, r2, r6
 804051a:	40f1      	lsrs	r1, r6
 804051c:	431f      	orrs	r7, r3
 804051e:	e9c5 7100 	strd	r7, r1, [r5]
 8040522:	2600      	movs	r6, #0
 8040524:	4631      	mov	r1, r6
 8040526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804052a:	f1c2 0320 	rsb	r3, r2, #32
 804052e:	40d8      	lsrs	r0, r3
 8040530:	fa0c fc02 	lsl.w	ip, ip, r2
 8040534:	fa21 f303 	lsr.w	r3, r1, r3
 8040538:	4091      	lsls	r1, r2
 804053a:	4301      	orrs	r1, r0
 804053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040540:	fa1f fe8c 	uxth.w	lr, ip
 8040544:	fbb3 f0f7 	udiv	r0, r3, r7
 8040548:	fb07 3610 	mls	r6, r7, r0, r3
 804054c:	0c0b      	lsrs	r3, r1, #16
 804054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040552:	fb00 f60e 	mul.w	r6, r0, lr
 8040556:	429e      	cmp	r6, r3
 8040558:	fa04 f402 	lsl.w	r4, r4, r2
 804055c:	d908      	bls.n	8040570 <__udivmoddi4+0x260>
 804055e:	eb1c 0303 	adds.w	r3, ip, r3
 8040562:	f100 38ff 	add.w	r8, r0, #4294967295
 8040566:	d22f      	bcs.n	80405c8 <__udivmoddi4+0x2b8>
 8040568:	429e      	cmp	r6, r3
 804056a:	d92d      	bls.n	80405c8 <__udivmoddi4+0x2b8>
 804056c:	3802      	subs	r0, #2
 804056e:	4463      	add	r3, ip
 8040570:	1b9b      	subs	r3, r3, r6
 8040572:	b289      	uxth	r1, r1
 8040574:	fbb3 f6f7 	udiv	r6, r3, r7
 8040578:	fb07 3316 	mls	r3, r7, r6, r3
 804057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040580:	fb06 f30e 	mul.w	r3, r6, lr
 8040584:	428b      	cmp	r3, r1
 8040586:	d908      	bls.n	804059a <__udivmoddi4+0x28a>
 8040588:	eb1c 0101 	adds.w	r1, ip, r1
 804058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8040590:	d216      	bcs.n	80405c0 <__udivmoddi4+0x2b0>
 8040592:	428b      	cmp	r3, r1
 8040594:	d914      	bls.n	80405c0 <__udivmoddi4+0x2b0>
 8040596:	3e02      	subs	r6, #2
 8040598:	4461      	add	r1, ip
 804059a:	1ac9      	subs	r1, r1, r3
 804059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80405a0:	e738      	b.n	8040414 <__udivmoddi4+0x104>
 80405a2:	462e      	mov	r6, r5
 80405a4:	4628      	mov	r0, r5
 80405a6:	e705      	b.n	80403b4 <__udivmoddi4+0xa4>
 80405a8:	4606      	mov	r6, r0
 80405aa:	e6e3      	b.n	8040374 <__udivmoddi4+0x64>
 80405ac:	4618      	mov	r0, r3
 80405ae:	e6f8      	b.n	80403a2 <__udivmoddi4+0x92>
 80405b0:	454b      	cmp	r3, r9
 80405b2:	d2a9      	bcs.n	8040508 <__udivmoddi4+0x1f8>
 80405b4:	ebb9 0802 	subs.w	r8, r9, r2
 80405b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80405bc:	3801      	subs	r0, #1
 80405be:	e7a3      	b.n	8040508 <__udivmoddi4+0x1f8>
 80405c0:	4646      	mov	r6, r8
 80405c2:	e7ea      	b.n	804059a <__udivmoddi4+0x28a>
 80405c4:	4620      	mov	r0, r4
 80405c6:	e794      	b.n	80404f2 <__udivmoddi4+0x1e2>
 80405c8:	4640      	mov	r0, r8
 80405ca:	e7d1      	b.n	8040570 <__udivmoddi4+0x260>
 80405cc:	46d0      	mov	r8, sl
 80405ce:	e77b      	b.n	80404c8 <__udivmoddi4+0x1b8>
 80405d0:	3b02      	subs	r3, #2
 80405d2:	4461      	add	r1, ip
 80405d4:	e732      	b.n	804043c <__udivmoddi4+0x12c>
 80405d6:	4630      	mov	r0, r6
 80405d8:	e709      	b.n	80403ee <__udivmoddi4+0xde>
 80405da:	4464      	add	r4, ip
 80405dc:	3802      	subs	r0, #2
 80405de:	e742      	b.n	8040466 <__udivmoddi4+0x156>

080405e0 <__aeabi_idiv0>:
 80405e0:	4770      	bx	lr
 80405e2:	bf00      	nop

080405e4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80405e4:	b580      	push	{r7, lr}
 80405e6:	b082      	sub	sp, #8
 80405e8:	af00      	add	r7, sp, #0
 80405ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80405ec:	1d39      	adds	r1, r7, #4
 80405ee:	f04f 33ff 	mov.w	r3, #4294967295
 80405f2:	2201      	movs	r2, #1
 80405f4:	4803      	ldr	r0, [pc, #12]	; (8040604 <__io_putchar+0x20>)
 80405f6:	f003 f8ab 	bl	8043750 <HAL_UART_Transmit>
	return ch;
 80405fa:	687b      	ldr	r3, [r7, #4]
}
 80405fc:	4618      	mov	r0, r3
 80405fe:	3708      	adds	r7, #8
 8040600:	46bd      	mov	sp, r7
 8040602:	bd80      	pop	{r7, pc}
 8040604:	200000d0 	.word	0x200000d0

08040608 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8040608:	b580      	push	{r7, lr}
 804060a:	b082      	sub	sp, #8
 804060c:	af00      	add	r7, sp, #0
 804060e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8040610:	4b05      	ldr	r3, [pc, #20]	; (8040628 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8040612:	4a06      	ldr	r2, [pc, #24]	; (804062c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8040614:	2100      	movs	r1, #0
 8040616:	6878      	ldr	r0, [r7, #4]
 8040618:	f001 f936 	bl	8041888 <HAL_CAN_GetRxMessage>
	process_packet();
 804061c:	f000 f82a 	bl	8040674 <process_packet>
}
 8040620:	bf00      	nop
 8040622:	3708      	adds	r7, #8
 8040624:	46bd      	mov	sp, r7
 8040626:	bd80      	pop	{r7, pc}
 8040628:	2000018c 	.word	0x2000018c
 804062c:	20000170 	.word	0x20000170

08040630 <packCAN_Ext_ID>:

uint32_t packCAN_Ext_ID(CAN_Ext_ID id) {
 8040630:	b480      	push	{r7}
 8040632:	b085      	sub	sp, #20
 8040634:	af00      	add	r7, sp, #0
 8040636:	6078      	str	r0, [r7, #4]
	uint32_t packedID = 0;
 8040638:	2300      	movs	r3, #0
 804063a:	60fb      	str	r3, [r7, #12]
	packedID |= (uint32_t) id.senderAddress;
 804063c:	793b      	ldrb	r3, [r7, #4]
 804063e:	461a      	mov	r2, r3
 8040640:	68fb      	ldr	r3, [r7, #12]
 8040642:	4313      	orrs	r3, r2
 8040644:	60fb      	str	r3, [r7, #12]
	packedID |= (uint32_t) id.receiverAddress << 8;
 8040646:	797b      	ldrb	r3, [r7, #5]
 8040648:	021b      	lsls	r3, r3, #8
 804064a:	68fa      	ldr	r2, [r7, #12]
 804064c:	4313      	orrs	r3, r2
 804064e:	60fb      	str	r3, [r7, #12]
	packedID |= (uint32_t) id.packet_type << 16;
 8040650:	79bb      	ldrb	r3, [r7, #6]
 8040652:	041b      	lsls	r3, r3, #16
 8040654:	68fa      	ldr	r2, [r7, #12]
 8040656:	4313      	orrs	r3, r2
 8040658:	60fb      	str	r3, [r7, #12]
	packedID |= (uint32_t) id.packet_subType << 24;
 804065a:	79fb      	ldrb	r3, [r7, #7]
 804065c:	061b      	lsls	r3, r3, #24
 804065e:	68fa      	ldr	r2, [r7, #12]
 8040660:	4313      	orrs	r3, r2
 8040662:	60fb      	str	r3, [r7, #12]
	return packedID;
 8040664:	68fb      	ldr	r3, [r7, #12]
}
 8040666:	4618      	mov	r0, r3
 8040668:	3714      	adds	r7, #20
 804066a:	46bd      	mov	sp, r7
 804066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040670:	4770      	bx	lr
	...

08040674 <process_packet>:

uint32_t htonl(uint32_t net) {
	return __builtin_bswap32(net);
}

void process_packet() {
 8040674:	b580      	push	{r7, lr}
 8040676:	af00      	add	r7, sp, #0
 8040678:	4b07      	ldr	r3, [pc, #28]	; (8040698 <process_packet+0x24>)
 804067a:	685b      	ldr	r3, [r3, #4]
	memcpy(&rxPCKT_ExtID, &RxHeader.ExtId, sizeof(CAN_Ext_ID));
 804067c:	4a07      	ldr	r2, [pc, #28]	; (804069c <process_packet+0x28>)
 804067e:	6013      	str	r3, [r2, #0]
	if (rxPCKT_ExtID.receiverAddress == myCanAddress) {
 8040680:	4b06      	ldr	r3, [pc, #24]	; (804069c <process_packet+0x28>)
 8040682:	785b      	ldrb	r3, [r3, #1]
 8040684:	2baf      	cmp	r3, #175	; 0xaf
 8040686:	d104      	bne.n	8040692 <process_packet+0x1e>
		// handle message with correct CAN address here
		handle_packet_type(rxPCKT_ExtID.packet_type);
 8040688:	4b04      	ldr	r3, [pc, #16]	; (804069c <process_packet+0x28>)
 804068a:	789b      	ldrb	r3, [r3, #2]
 804068c:	4618      	mov	r0, r3
 804068e:	f000 f807 	bl	80406a0 <handle_packet_type>
	}
}
 8040692:	bf00      	nop
 8040694:	bd80      	pop	{r7, pc}
 8040696:	bf00      	nop
 8040698:	20000170 	.word	0x20000170
 804069c:	200000a4 	.word	0x200000a4

080406a0 <handle_packet_type>:

void handle_packet_type(uint8_t firmwareUpdatePacketType) {
 80406a0:	b480      	push	{r7}
 80406a2:	b083      	sub	sp, #12
 80406a4:	af00      	add	r7, sp, #0
 80406a6:	4603      	mov	r3, r0
 80406a8:	71fb      	strb	r3, [r7, #7]
	switch (firmwareUpdatePacketType) {
 80406aa:	79fb      	ldrb	r3, [r7, #7]
 80406ac:	2b03      	cmp	r3, #3
 80406ae:	d81b      	bhi.n	80406e8 <handle_packet_type+0x48>
 80406b0:	a201      	add	r2, pc, #4	; (adr r2, 80406b8 <handle_packet_type+0x18>)
 80406b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80406b6:	bf00      	nop
 80406b8:	080406e9 	.word	0x080406e9
 80406bc:	080406e9 	.word	0x080406e9
 80406c0:	080406e9 	.word	0x080406e9
 80406c4:	080406c9 	.word	0x080406c9
	case (OTA_PCKT_TYPE_mData):
		// handle_metaData_type_packet
		break;
	case (OTA_PCKT_TYPE_RESPONSE):
		// handle_response_type_packet
		if (RxData[0] == OTA_PCKT_ACK)
 80406c8:	4b0c      	ldr	r3, [pc, #48]	; (80406fc <handle_packet_type+0x5c>)
 80406ca:	781b      	ldrb	r3, [r3, #0]
 80406cc:	2b00      	cmp	r3, #0
 80406ce:	d103      	bne.n	80406d8 <handle_packet_type+0x38>
			ackReceived = 1;
 80406d0:	4b0b      	ldr	r3, [pc, #44]	; (8040700 <handle_packet_type+0x60>)
 80406d2:	2201      	movs	r2, #1
 80406d4:	701a      	strb	r2, [r3, #0]
		else if (RxData[0] == OTA_PCKT_NACK)
			nackReceived = 1;
		break;
 80406d6:	e009      	b.n	80406ec <handle_packet_type+0x4c>
		else if (RxData[0] == OTA_PCKT_NACK)
 80406d8:	4b08      	ldr	r3, [pc, #32]	; (80406fc <handle_packet_type+0x5c>)
 80406da:	781b      	ldrb	r3, [r3, #0]
 80406dc:	2b01      	cmp	r3, #1
 80406de:	d105      	bne.n	80406ec <handle_packet_type+0x4c>
			nackReceived = 1;
 80406e0:	4b08      	ldr	r3, [pc, #32]	; (8040704 <handle_packet_type+0x64>)
 80406e2:	2201      	movs	r2, #1
 80406e4:	701a      	strb	r2, [r3, #0]
		break;
 80406e6:	e001      	b.n	80406ec <handle_packet_type+0x4c>
	case (OTA_PCKT_TYPE_fwDATA):
		// handle_fwDATA_type_packet
		break;
	default:
		// handle incorrect packet type here
		break;
 80406e8:	bf00      	nop
 80406ea:	e000      	b.n	80406ee <handle_packet_type+0x4e>
		break;
 80406ec:	bf00      	nop
	}
}
 80406ee:	bf00      	nop
 80406f0:	370c      	adds	r7, #12
 80406f2:	46bd      	mov	sp, r7
 80406f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406f8:	4770      	bx	lr
 80406fa:	bf00      	nop
 80406fc:	2000018c 	.word	0x2000018c
 8040700:	200001a0 	.word	0x200001a0
 8040704:	200001a1 	.word	0x200001a1

08040708 <send_cmd>:
void send_cmd(uint8_t receiverAddress, uint8_t cmd) {
 8040708:	b580      	push	{r7, lr}
 804070a:	b084      	sub	sp, #16
 804070c:	af00      	add	r7, sp, #0
 804070e:	4603      	mov	r3, r0
 8040710:	460a      	mov	r2, r1
 8040712:	71fb      	strb	r3, [r7, #7]
 8040714:	4613      	mov	r3, r2
 8040716:	71bb      	strb	r3, [r7, #6]
	CAN_Ext_ID txPCKT_extID =
 8040718:	2300      	movs	r3, #0
 804071a:	60fb      	str	r3, [r7, #12]
 804071c:	23af      	movs	r3, #175	; 0xaf
 804071e:	733b      	strb	r3, [r7, #12]
 8040720:	79fb      	ldrb	r3, [r7, #7]
 8040722:	737b      	strb	r3, [r7, #13]
			{ .senderAddress = myCanAddress, .receiverAddress = receiverAddress,
					.packet_type = OTA_PCKT_TYPE_CMD };
	TxHeader.ExtId = packCAN_Ext_ID(txPCKT_extID);
 8040724:	68f8      	ldr	r0, [r7, #12]
 8040726:	f7ff ff83 	bl	8040630 <packCAN_Ext_ID>
 804072a:	4603      	mov	r3, r0
 804072c:	4a0b      	ldr	r2, [pc, #44]	; (804075c <send_cmd+0x54>)
 804072e:	6053      	str	r3, [r2, #4]
	TxHeader.IDE = CAN_ID_EXT;
 8040730:	4b0a      	ldr	r3, [pc, #40]	; (804075c <send_cmd+0x54>)
 8040732:	2204      	movs	r2, #4
 8040734:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = sizeof(cmd);
 8040736:	4b09      	ldr	r3, [pc, #36]	; (804075c <send_cmd+0x54>)
 8040738:	2201      	movs	r2, #1
 804073a:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 804073c:	4b07      	ldr	r3, [pc, #28]	; (804075c <send_cmd+0x54>)
 804073e:	2200      	movs	r2, #0
 8040740:	60da      	str	r2, [r3, #12]
	TxData[0] = cmd;
 8040742:	4a07      	ldr	r2, [pc, #28]	; (8040760 <send_cmd+0x58>)
 8040744:	79bb      	ldrb	r3, [r7, #6]
 8040746:	7013      	strb	r3, [r2, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8040748:	4b06      	ldr	r3, [pc, #24]	; (8040764 <send_cmd+0x5c>)
 804074a:	4a05      	ldr	r2, [pc, #20]	; (8040760 <send_cmd+0x58>)
 804074c:	4903      	ldr	r1, [pc, #12]	; (804075c <send_cmd+0x54>)
 804074e:	4806      	ldr	r0, [pc, #24]	; (8040768 <send_cmd+0x60>)
 8040750:	f000 ffca 	bl	80416e8 <HAL_CAN_AddTxMessage>
}
 8040754:	bf00      	nop
 8040756:	3710      	adds	r7, #16
 8040758:	46bd      	mov	sp, r7
 804075a:	bd80      	pop	{r7, pc}
 804075c:	20000158 	.word	0x20000158
 8040760:	20000194 	.word	0x20000194
 8040764:	2000019c 	.word	0x2000019c
 8040768:	200000a8 	.word	0x200000a8

0804076c <send_FWmData>:

void send_FWmData(uint8_t receiverAddress, uint8_t pcktType,
		uint8_t pckt_subType, void *data, uint8_t dataSize) {
 804076c:	b580      	push	{r7, lr}
 804076e:	b086      	sub	sp, #24
 8040770:	af00      	add	r7, sp, #0
 8040772:	603b      	str	r3, [r7, #0]
 8040774:	4603      	mov	r3, r0
 8040776:	71fb      	strb	r3, [r7, #7]
 8040778:	460b      	mov	r3, r1
 804077a:	71bb      	strb	r3, [r7, #6]
 804077c:	4613      	mov	r3, r2
 804077e:	717b      	strb	r3, [r7, #5]

	CAN_Ext_ID txPCKT_extID = { .senderAddress = myCanAddress,
 8040780:	23af      	movs	r3, #175	; 0xaf
 8040782:	733b      	strb	r3, [r7, #12]
 8040784:	79fb      	ldrb	r3, [r7, #7]
 8040786:	737b      	strb	r3, [r7, #13]
 8040788:	79bb      	ldrb	r3, [r7, #6]
 804078a:	73bb      	strb	r3, [r7, #14]
 804078c:	797b      	ldrb	r3, [r7, #5]
 804078e:	73fb      	strb	r3, [r7, #15]
			.receiverAddress = receiverAddress, .packet_type = pcktType,
			.packet_subType = pckt_subType };

	TxHeader.ExtId = packCAN_Ext_ID(txPCKT_extID);
 8040790:	68f8      	ldr	r0, [r7, #12]
 8040792:	f7ff ff4d 	bl	8040630 <packCAN_Ext_ID>
 8040796:	4603      	mov	r3, r0
 8040798:	4a15      	ldr	r2, [pc, #84]	; (80407f0 <send_FWmData+0x84>)
 804079a:	6053      	str	r3, [r2, #4]
	TxHeader.IDE = CAN_ID_EXT;
 804079c:	4b14      	ldr	r3, [pc, #80]	; (80407f0 <send_FWmData+0x84>)
 804079e:	2204      	movs	r2, #4
 80407a0:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = dataSize;
 80407a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80407a6:	4a12      	ldr	r2, [pc, #72]	; (80407f0 <send_FWmData+0x84>)
 80407a8:	6113      	str	r3, [r2, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 80407aa:	4b11      	ldr	r3, [pc, #68]	; (80407f0 <send_FWmData+0x84>)
 80407ac:	2200      	movs	r2, #0
 80407ae:	60da      	str	r2, [r3, #12]

	uint8_t *byteData = (uint8_t*) data;
 80407b0:	683b      	ldr	r3, [r7, #0]
 80407b2:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < dataSize; i++) {
 80407b4:	2300      	movs	r3, #0
 80407b6:	617b      	str	r3, [r7, #20]
 80407b8:	e00b      	b.n	80407d2 <send_FWmData+0x66>
		TxData[i] = byteData[i];
 80407ba:	697b      	ldr	r3, [r7, #20]
 80407bc:	693a      	ldr	r2, [r7, #16]
 80407be:	4413      	add	r3, r2
 80407c0:	7819      	ldrb	r1, [r3, #0]
 80407c2:	4a0c      	ldr	r2, [pc, #48]	; (80407f4 <send_FWmData+0x88>)
 80407c4:	697b      	ldr	r3, [r7, #20]
 80407c6:	4413      	add	r3, r2
 80407c8:	460a      	mov	r2, r1
 80407ca:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < dataSize; i++) {
 80407cc:	697b      	ldr	r3, [r7, #20]
 80407ce:	3301      	adds	r3, #1
 80407d0:	617b      	str	r3, [r7, #20]
 80407d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80407d6:	697a      	ldr	r2, [r7, #20]
 80407d8:	429a      	cmp	r2, r3
 80407da:	dbee      	blt.n	80407ba <send_FWmData+0x4e>
	}

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80407dc:	4b06      	ldr	r3, [pc, #24]	; (80407f8 <send_FWmData+0x8c>)
 80407de:	4a05      	ldr	r2, [pc, #20]	; (80407f4 <send_FWmData+0x88>)
 80407e0:	4903      	ldr	r1, [pc, #12]	; (80407f0 <send_FWmData+0x84>)
 80407e2:	4806      	ldr	r0, [pc, #24]	; (80407fc <send_FWmData+0x90>)
 80407e4:	f000 ff80 	bl	80416e8 <HAL_CAN_AddTxMessage>
}
 80407e8:	bf00      	nop
 80407ea:	3718      	adds	r7, #24
 80407ec:	46bd      	mov	sp, r7
 80407ee:	bd80      	pop	{r7, pc}
 80407f0:	20000158 	.word	0x20000158
 80407f4:	20000194 	.word	0x20000194
 80407f8:	2000019c 	.word	0x2000019c
 80407fc:	200000a8 	.word	0x200000a8

08040800 <wait_response>:

void wait_response() {
 8040800:	b580      	push	{r7, lr}
 8040802:	b082      	sub	sp, #8
 8040804:	af00      	add	r7, sp, #0
	uint32_t startTime = HAL_GetTick();
 8040806:	f000 fd13 	bl	8041230 <HAL_GetTick>
 804080a:	6078      	str	r0, [r7, #4]
	while (!ackReceived && !nackReceived
 804080c:	bf00      	nop
 804080e:	4b0d      	ldr	r3, [pc, #52]	; (8040844 <wait_response+0x44>)
 8040810:	781b      	ldrb	r3, [r3, #0]
 8040812:	f083 0301 	eor.w	r3, r3, #1
 8040816:	b2db      	uxtb	r3, r3
 8040818:	2b00      	cmp	r3, #0
 804081a:	d00f      	beq.n	804083c <wait_response+0x3c>
 804081c:	4b0a      	ldr	r3, [pc, #40]	; (8040848 <wait_response+0x48>)
 804081e:	781b      	ldrb	r3, [r3, #0]
 8040820:	f083 0301 	eor.w	r3, r3, #1
 8040824:	b2db      	uxtb	r3, r3
 8040826:	2b00      	cmp	r3, #0
 8040828:	d008      	beq.n	804083c <wait_response+0x3c>
			&& HAL_GetTick() - startTime < responseWaitTime)
 804082a:	f000 fd01 	bl	8041230 <HAL_GetTick>
 804082e:	4602      	mov	r2, r0
 8040830:	687b      	ldr	r3, [r7, #4]
 8040832:	1ad3      	subs	r3, r2, r3
 8040834:	f241 3287 	movw	r2, #4999	; 0x1387
 8040838:	4293      	cmp	r3, r2
 804083a:	d9e8      	bls.n	804080e <wait_response+0xe>
		;
}
 804083c:	bf00      	nop
 804083e:	3708      	adds	r7, #8
 8040840:	46bd      	mov	sp, r7
 8040842:	bd80      	pop	{r7, pc}
 8040844:	200001a0 	.word	0x200001a0
 8040848:	200001a1 	.word	0x200001a1

0804084c <Flash_Read_Data>:

void Flash_Read_Data(uint32_t StartSectorAddress, uint32_t *RxBuf,
		uint16_t numberofwords) {
 804084c:	b480      	push	{r7}
 804084e:	b085      	sub	sp, #20
 8040850:	af00      	add	r7, sp, #0
 8040852:	60f8      	str	r0, [r7, #12]
 8040854:	60b9      	str	r1, [r7, #8]
 8040856:	4613      	mov	r3, r2
 8040858:	80fb      	strh	r3, [r7, #6]
	while (1) {

		*RxBuf = *(__IO uint32_t*) StartSectorAddress;
 804085a:	68fb      	ldr	r3, [r7, #12]
 804085c:	681a      	ldr	r2, [r3, #0]
 804085e:	68bb      	ldr	r3, [r7, #8]
 8040860:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8040862:	68fb      	ldr	r3, [r7, #12]
 8040864:	3304      	adds	r3, #4
 8040866:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8040868:	68bb      	ldr	r3, [r7, #8]
 804086a:	3304      	adds	r3, #4
 804086c:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--))
 804086e:	88fb      	ldrh	r3, [r7, #6]
 8040870:	1e5a      	subs	r2, r3, #1
 8040872:	80fa      	strh	r2, [r7, #6]
 8040874:	2b00      	cmp	r3, #0
 8040876:	d000      	beq.n	804087a <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t*) StartSectorAddress;
 8040878:	e7ef      	b.n	804085a <Flash_Read_Data+0xe>
			break;
 804087a:	bf00      	nop
	}
}
 804087c:	bf00      	nop
 804087e:	3714      	adds	r7, #20
 8040880:	46bd      	mov	sp, r7
 8040882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040886:	4770      	bx	lr

08040888 <send_FWdata>:

void send_FWdata(uint8_t receiverAddress, uint8_t pcktType,
                                  uint8_t pckt_subType, uint32_t chunkNumber,
                                  uint32_t StartSectorAddress) {
 8040888:	b580      	push	{r7, lr}
 804088a:	b086      	sub	sp, #24
 804088c:	af00      	add	r7, sp, #0
 804088e:	603b      	str	r3, [r7, #0]
 8040890:	4603      	mov	r3, r0
 8040892:	71fb      	strb	r3, [r7, #7]
 8040894:	460b      	mov	r3, r1
 8040896:	71bb      	strb	r3, [r7, #6]
 8040898:	4613      	mov	r3, r2
 804089a:	717b      	strb	r3, [r7, #5]

    CAN_Ext_ID txPCKT_extID = { .senderAddress = myCanAddress,
 804089c:	23af      	movs	r3, #175	; 0xaf
 804089e:	733b      	strb	r3, [r7, #12]
 80408a0:	79fb      	ldrb	r3, [r7, #7]
 80408a2:	737b      	strb	r3, [r7, #13]
 80408a4:	79bb      	ldrb	r3, [r7, #6]
 80408a6:	73bb      	strb	r3, [r7, #14]
 80408a8:	797b      	ldrb	r3, [r7, #5]
 80408aa:	73fb      	strb	r3, [r7, #15]
                                .receiverAddress = receiverAddress,
                                .packet_type = pcktType,
                                .packet_subType = pckt_subType };

    TxHeader.ExtId = packCAN_Ext_ID(txPCKT_extID);
 80408ac:	68f8      	ldr	r0, [r7, #12]
 80408ae:	f7ff febf 	bl	8040630 <packCAN_Ext_ID>
 80408b2:	4603      	mov	r3, r0
 80408b4:	4a20      	ldr	r2, [pc, #128]	; (8040938 <send_FWdata+0xb0>)
 80408b6:	6053      	str	r3, [r2, #4]
    TxHeader.IDE = CAN_ID_EXT;
 80408b8:	4b1f      	ldr	r3, [pc, #124]	; (8040938 <send_FWdata+0xb0>)
 80408ba:	2204      	movs	r2, #4
 80408bc:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8; // 4 bytes for chunk number and 4 bytes for data
 80408be:	4b1e      	ldr	r3, [pc, #120]	; (8040938 <send_FWdata+0xb0>)
 80408c0:	2208      	movs	r2, #8
 80408c2:	611a      	str	r2, [r3, #16]
    TxHeader.RTR = CAN_RTR_DATA;
 80408c4:	4b1c      	ldr	r3, [pc, #112]	; (8040938 <send_FWdata+0xb0>)
 80408c6:	2200      	movs	r2, #0
 80408c8:	60da      	str	r2, [r3, #12]

    // Store chunk number in the first 4 bytes of TxData
    for (int i = 0; i < 4; i++) {
 80408ca:	2300      	movs	r3, #0
 80408cc:	617b      	str	r3, [r7, #20]
 80408ce:	e00d      	b.n	80408ec <send_FWdata+0x64>
        TxData[i] = (chunkNumber >> (8 * i)) & 0xFF;
 80408d0:	697b      	ldr	r3, [r7, #20]
 80408d2:	00db      	lsls	r3, r3, #3
 80408d4:	683a      	ldr	r2, [r7, #0]
 80408d6:	fa22 f303 	lsr.w	r3, r2, r3
 80408da:	b2d9      	uxtb	r1, r3
 80408dc:	4a17      	ldr	r2, [pc, #92]	; (804093c <send_FWdata+0xb4>)
 80408de:	697b      	ldr	r3, [r7, #20]
 80408e0:	4413      	add	r3, r2
 80408e2:	460a      	mov	r2, r1
 80408e4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 80408e6:	697b      	ldr	r3, [r7, #20]
 80408e8:	3301      	adds	r3, #1
 80408ea:	617b      	str	r3, [r7, #20]
 80408ec:	697b      	ldr	r3, [r7, #20]
 80408ee:	2b03      	cmp	r3, #3
 80408f0:	ddee      	ble.n	80408d0 <send_FWdata+0x48>
    }

    // Read data from flash
    Flash_Read_Data(StartSectorAddress, &flashData, 1);
 80408f2:	2201      	movs	r2, #1
 80408f4:	4912      	ldr	r1, [pc, #72]	; (8040940 <send_FWdata+0xb8>)
 80408f6:	6a38      	ldr	r0, [r7, #32]
 80408f8:	f7ff ffa8 	bl	804084c <Flash_Read_Data>

    // Store flash data in the last 4 bytes of TxData
    for (int i = 0; i < 4; i++) {
 80408fc:	2300      	movs	r3, #0
 80408fe:	613b      	str	r3, [r7, #16]
 8040900:	e00c      	b.n	804091c <send_FWdata+0x94>
        TxData[4 + i] = (flashData >> (8 * i)) & 0xFF;
 8040902:	4b0f      	ldr	r3, [pc, #60]	; (8040940 <send_FWdata+0xb8>)
 8040904:	681a      	ldr	r2, [r3, #0]
 8040906:	693b      	ldr	r3, [r7, #16]
 8040908:	00db      	lsls	r3, r3, #3
 804090a:	40da      	lsrs	r2, r3
 804090c:	693b      	ldr	r3, [r7, #16]
 804090e:	3304      	adds	r3, #4
 8040910:	b2d1      	uxtb	r1, r2
 8040912:	4a0a      	ldr	r2, [pc, #40]	; (804093c <send_FWdata+0xb4>)
 8040914:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < 4; i++) {
 8040916:	693b      	ldr	r3, [r7, #16]
 8040918:	3301      	adds	r3, #1
 804091a:	613b      	str	r3, [r7, #16]
 804091c:	693b      	ldr	r3, [r7, #16]
 804091e:	2b03      	cmp	r3, #3
 8040920:	ddef      	ble.n	8040902 <send_FWdata+0x7a>
    }

    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8040922:	4b08      	ldr	r3, [pc, #32]	; (8040944 <send_FWdata+0xbc>)
 8040924:	4a05      	ldr	r2, [pc, #20]	; (804093c <send_FWdata+0xb4>)
 8040926:	4904      	ldr	r1, [pc, #16]	; (8040938 <send_FWdata+0xb0>)
 8040928:	4807      	ldr	r0, [pc, #28]	; (8040948 <send_FWdata+0xc0>)
 804092a:	f000 fedd 	bl	80416e8 <HAL_CAN_AddTxMessage>
}
 804092e:	bf00      	nop
 8040930:	3718      	adds	r7, #24
 8040932:	46bd      	mov	sp, r7
 8040934:	bd80      	pop	{r7, pc}
 8040936:	bf00      	nop
 8040938:	20000158 	.word	0x20000158
 804093c:	20000194 	.word	0x20000194
 8040940:	200000a0 	.word	0x200000a0
 8040944:	2000019c 	.word	0x2000019c
 8040948:	200000a8 	.word	0x200000a8

0804094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 804094c:	b580      	push	{r7, lr}
 804094e:	b084      	sub	sp, #16
 8040950:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040952:	f000 fc1c 	bl	804118e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040956:	f000 f8e1 	bl	8040b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 804095a:	f000 f9bd 	bl	8040cd8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 804095e:	f000 f98b 	bl	8040c78 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8040962:	f000 f937 	bl	8040bd4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
	printf("Application Started..\n ");
 8040966:	4864      	ldr	r0, [pc, #400]	; (8040af8 <main+0x1ac>)
 8040968:	f003 fbc2 	bl	80440f0 <iprintf>
	HAL_CAN_Start(&hcan1);  //start can
 804096c:	4863      	ldr	r0, [pc, #396]	; (8040afc <main+0x1b0>)
 804096e:	f000 fe77 	bl	8041660 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); //activate rx fifo0 full notification
 8040972:	2102      	movs	r1, #2
 8040974:	4861      	ldr	r0, [pc, #388]	; (8040afc <main+0x1b0>)
 8040976:	f001 f899 	bl	8041aac <HAL_CAN_ActivateNotification>
	HAL_GPIO_TogglePin(blueLED_GPIO_Port, blueLED_Pin);
 804097a:	2180      	movs	r1, #128	; 0x80
 804097c:	4860      	ldr	r0, [pc, #384]	; (8040b00 <main+0x1b4>)
 804097e:	f001 fdc2 	bl	8042506 <HAL_GPIO_TogglePin>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		do {
			send_cmd(destinationMCUaddress, OTA_CMD_START);
 8040982:	2100      	movs	r1, #0
 8040984:	20ab      	movs	r0, #171	; 0xab
 8040986:	f7ff febf 	bl	8040708 <send_cmd>
			wait_response();
 804098a:	f7ff ff39 	bl	8040800 <wait_response>
		} while (!ackReceived);
 804098e:	4b5d      	ldr	r3, [pc, #372]	; (8040b04 <main+0x1b8>)
 8040990:	781b      	ldrb	r3, [r3, #0]
 8040992:	f083 0301 	eor.w	r3, r3, #1
 8040996:	b2db      	uxtb	r3, r3
 8040998:	2b00      	cmp	r3, #0
 804099a:	d1f2      	bne.n	8040982 <main+0x36>
		ackReceived = 0;
 804099c:	4b59      	ldr	r3, [pc, #356]	; (8040b04 <main+0x1b8>)
 804099e:	2200      	movs	r2, #0
 80409a0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(blueLED_GPIO_Port, blueLED_Pin);
 80409a2:	2180      	movs	r1, #128	; 0x80
 80409a4:	4856      	ldr	r0, [pc, #344]	; (8040b00 <main+0x1b4>)
 80409a6:	f001 fdae 	bl	8042506 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80409aa:	2064      	movs	r0, #100	; 0x64
 80409ac:	f000 fc4c 	bl	8041248 <HAL_Delay>
		do {
			send_FWmData(destinationMCUaddress, OTA_PCKT_TYPE_mData,
 80409b0:	2301      	movs	r3, #1
 80409b2:	9300      	str	r3, [sp, #0]
 80409b4:	4b54      	ldr	r3, [pc, #336]	; (8040b08 <main+0x1bc>)
 80409b6:	2200      	movs	r2, #0
 80409b8:	2102      	movs	r1, #2
 80409ba:	20ab      	movs	r0, #171	; 0xab
 80409bc:	f7ff fed6 	bl	804076c <send_FWmData>
					subType_version, &FW_mData_h.FW_version,
					sizeof(FW_mData_h.FW_version));
			wait_response();
 80409c0:	f7ff ff1e 	bl	8040800 <wait_response>
		} while (!ackReceived);
 80409c4:	4b4f      	ldr	r3, [pc, #316]	; (8040b04 <main+0x1b8>)
 80409c6:	781b      	ldrb	r3, [r3, #0]
 80409c8:	f083 0301 	eor.w	r3, r3, #1
 80409cc:	b2db      	uxtb	r3, r3
 80409ce:	2b00      	cmp	r3, #0
 80409d0:	d1ee      	bne.n	80409b0 <main+0x64>
		ackReceived = 0;
 80409d2:	4b4c      	ldr	r3, [pc, #304]	; (8040b04 <main+0x1b8>)
 80409d4:	2200      	movs	r2, #0
 80409d6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(blueLED_GPIO_Port, blueLED_Pin);
 80409d8:	2180      	movs	r1, #128	; 0x80
 80409da:	4849      	ldr	r0, [pc, #292]	; (8040b00 <main+0x1b4>)
 80409dc:	f001 fd93 	bl	8042506 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80409e0:	2064      	movs	r0, #100	; 0x64
 80409e2:	f000 fc31 	bl	8041248 <HAL_Delay>
		do {
			send_FWmData(destinationMCUaddress, OTA_PCKT_TYPE_mData,
 80409e6:	2304      	movs	r3, #4
 80409e8:	9300      	str	r3, [sp, #0]
 80409ea:	4b48      	ldr	r3, [pc, #288]	; (8040b0c <main+0x1c0>)
 80409ec:	2201      	movs	r2, #1
 80409ee:	2102      	movs	r1, #2
 80409f0:	20ab      	movs	r0, #171	; 0xab
 80409f2:	f7ff febb 	bl	804076c <send_FWmData>
					subType_size, &FW_mData_h.FW_size,
					sizeof(FW_mData_h.FW_size));
			wait_response();
 80409f6:	f7ff ff03 	bl	8040800 <wait_response>
		} while (!ackReceived);
 80409fa:	4b42      	ldr	r3, [pc, #264]	; (8040b04 <main+0x1b8>)
 80409fc:	781b      	ldrb	r3, [r3, #0]
 80409fe:	f083 0301 	eor.w	r3, r3, #1
 8040a02:	b2db      	uxtb	r3, r3
 8040a04:	2b00      	cmp	r3, #0
 8040a06:	d1ee      	bne.n	80409e6 <main+0x9a>
		ackReceived = 0;
 8040a08:	4b3e      	ldr	r3, [pc, #248]	; (8040b04 <main+0x1b8>)
 8040a0a:	2200      	movs	r2, #0
 8040a0c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(blueLED_GPIO_Port, blueLED_Pin);
 8040a0e:	2180      	movs	r1, #128	; 0x80
 8040a10:	483b      	ldr	r0, [pc, #236]	; (8040b00 <main+0x1b4>)
 8040a12:	f001 fd78 	bl	8042506 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8040a16:	2064      	movs	r0, #100	; 0x64
 8040a18:	f000 fc16 	bl	8041248 <HAL_Delay>
		do {
			send_FWmData(destinationMCUaddress, OTA_PCKT_TYPE_mData,
 8040a1c:	2302      	movs	r3, #2
 8040a1e:	9300      	str	r3, [sp, #0]
 8040a20:	4b3b      	ldr	r3, [pc, #236]	; (8040b10 <main+0x1c4>)
 8040a22:	2202      	movs	r2, #2
 8040a24:	2102      	movs	r1, #2
 8040a26:	20ab      	movs	r0, #171	; 0xab
 8040a28:	f7ff fea0 	bl	804076c <send_FWmData>
					subType_chunkCount, &FW_mData_h.FW_chunkCount_total,
					sizeof(FW_mData_h.FW_chunkCount_total));
			wait_response();
 8040a2c:	f7ff fee8 	bl	8040800 <wait_response>
		} while (!ackReceived);
 8040a30:	4b34      	ldr	r3, [pc, #208]	; (8040b04 <main+0x1b8>)
 8040a32:	781b      	ldrb	r3, [r3, #0]
 8040a34:	f083 0301 	eor.w	r3, r3, #1
 8040a38:	b2db      	uxtb	r3, r3
 8040a3a:	2b00      	cmp	r3, #0
 8040a3c:	d1ee      	bne.n	8040a1c <main+0xd0>
		ackReceived = 0;
 8040a3e:	4b31      	ldr	r3, [pc, #196]	; (8040b04 <main+0x1b8>)
 8040a40:	2200      	movs	r2, #0
 8040a42:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(blueLED_GPIO_Port, blueLED_Pin);
 8040a44:	2180      	movs	r1, #128	; 0x80
 8040a46:	482e      	ldr	r0, [pc, #184]	; (8040b00 <main+0x1b4>)
 8040a48:	f001 fd5d 	bl	8042506 <HAL_GPIO_TogglePin>
		do {
			send_FWmData(destinationMCUaddress, OTA_PCKT_TYPE_mData,
 8040a4c:	2304      	movs	r3, #4
 8040a4e:	9300      	str	r3, [sp, #0]
 8040a50:	4b30      	ldr	r3, [pc, #192]	; (8040b14 <main+0x1c8>)
 8040a52:	2203      	movs	r2, #3
 8040a54:	2102      	movs	r1, #2
 8040a56:	20ab      	movs	r0, #171	; 0xab
 8040a58:	f7ff fe88 	bl	804076c <send_FWmData>
					subType_crc, &FW_mData_h.FW_crc,
					sizeof(FW_mData_h.FW_crc));
			wait_response();
 8040a5c:	f7ff fed0 	bl	8040800 <wait_response>
		} while (!ackReceived);
 8040a60:	4b28      	ldr	r3, [pc, #160]	; (8040b04 <main+0x1b8>)
 8040a62:	781b      	ldrb	r3, [r3, #0]
 8040a64:	f083 0301 	eor.w	r3, r3, #1
 8040a68:	b2db      	uxtb	r3, r3
 8040a6a:	2b00      	cmp	r3, #0
 8040a6c:	d1ee      	bne.n	8040a4c <main+0x100>
		ackReceived = 0;
 8040a6e:	4b25      	ldr	r3, [pc, #148]	; (8040b04 <main+0x1b8>)
 8040a70:	2200      	movs	r2, #0
 8040a72:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(blueLED_GPIO_Port, blueLED_Pin);
 8040a74:	2180      	movs	r1, #128	; 0x80
 8040a76:	4822      	ldr	r0, [pc, #136]	; (8040b00 <main+0x1b4>)
 8040a78:	f001 fd45 	bl	8042506 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8040a7c:	2064      	movs	r0, #100	; 0x64
 8040a7e:	f000 fbe3 	bl	8041248 <HAL_Delay>
		for (int chunkNumber = 0; chunkNumber < FW_mData_h.FW_chunkCount_total; chunkNumber++) {
 8040a82:	2300      	movs	r3, #0
 8040a84:	607b      	str	r3, [r7, #4]
 8040a86:	e020      	b.n	8040aca <main+0x17e>
			do {
				send_FWdata(destinationMCUaddress, OTA_PCKT_TYPE_fwDATA, 0x00, chunkNumber, appStoredAddress+(chunkNumber*4));
 8040a88:	687a      	ldr	r2, [r7, #4]
 8040a8a:	687b      	ldr	r3, [r7, #4]
 8040a8c:	009b      	lsls	r3, r3, #2
 8040a8e:	4619      	mov	r1, r3
 8040a90:	4b21      	ldr	r3, [pc, #132]	; (8040b18 <main+0x1cc>)
 8040a92:	681b      	ldr	r3, [r3, #0]
 8040a94:	440b      	add	r3, r1
 8040a96:	9300      	str	r3, [sp, #0]
 8040a98:	4613      	mov	r3, r2
 8040a9a:	2200      	movs	r2, #0
 8040a9c:	2101      	movs	r1, #1
 8040a9e:	20ab      	movs	r0, #171	; 0xab
 8040aa0:	f7ff fef2 	bl	8040888 <send_FWdata>
				wait_response();
 8040aa4:	f7ff feac 	bl	8040800 <wait_response>
			} while (!ackReceived);
 8040aa8:	4b16      	ldr	r3, [pc, #88]	; (8040b04 <main+0x1b8>)
 8040aaa:	781b      	ldrb	r3, [r3, #0]
 8040aac:	f083 0301 	eor.w	r3, r3, #1
 8040ab0:	b2db      	uxtb	r3, r3
 8040ab2:	2b00      	cmp	r3, #0
 8040ab4:	d1e8      	bne.n	8040a88 <main+0x13c>
			ackReceived = 0;
 8040ab6:	4b13      	ldr	r3, [pc, #76]	; (8040b04 <main+0x1b8>)
 8040ab8:	2200      	movs	r2, #0
 8040aba:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(blueLED_GPIO_Port, blueLED_Pin);
 8040abc:	2180      	movs	r1, #128	; 0x80
 8040abe:	4810      	ldr	r0, [pc, #64]	; (8040b00 <main+0x1b4>)
 8040ac0:	f001 fd21 	bl	8042506 <HAL_GPIO_TogglePin>
		for (int chunkNumber = 0; chunkNumber < FW_mData_h.FW_chunkCount_total; chunkNumber++) {
 8040ac4:	687b      	ldr	r3, [r7, #4]
 8040ac6:	3301      	adds	r3, #1
 8040ac8:	607b      	str	r3, [r7, #4]
 8040aca:	4b0f      	ldr	r3, [pc, #60]	; (8040b08 <main+0x1bc>)
 8040acc:	891b      	ldrh	r3, [r3, #8]
 8040ace:	461a      	mov	r2, r3
 8040ad0:	687b      	ldr	r3, [r7, #4]
 8040ad2:	4293      	cmp	r3, r2
 8040ad4:	dbd8      	blt.n	8040a88 <main+0x13c>
		}
		HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, 1);
 8040ad6:	2201      	movs	r2, #1
 8040ad8:	2101      	movs	r1, #1
 8040ada:	4809      	ldr	r0, [pc, #36]	; (8040b00 <main+0x1b4>)
 8040adc:	f001 fcfa 	bl	80424d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(blueLED_GPIO_Port, blueLED_Pin, 1);
 8040ae0:	2201      	movs	r2, #1
 8040ae2:	2180      	movs	r1, #128	; 0x80
 8040ae4:	4806      	ldr	r0, [pc, #24]	; (8040b00 <main+0x1b4>)
 8040ae6:	f001 fcf5 	bl	80424d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(redLed_GPIO_Port, redLed_Pin, 1);
 8040aea:	2201      	movs	r2, #1
 8040aec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8040af0:	4803      	ldr	r0, [pc, #12]	; (8040b00 <main+0x1b4>)
 8040af2:	f001 fcef 	bl	80424d4 <HAL_GPIO_WritePin>
		while(1); // process complete
 8040af6:	e7fe      	b.n	8040af6 <main+0x1aa>
 8040af8:	08045024 	.word	0x08045024
 8040afc:	200000a8 	.word	0x200000a8
 8040b00:	40020400 	.word	0x40020400
 8040b04:	200001a0 	.word	0x200001a0
 8040b08:	20000004 	.word	0x20000004
 8040b0c:	20000008 	.word	0x20000008
 8040b10:	2000000c 	.word	0x2000000c
 8040b14:	20000010 	.word	0x20000010
 8040b18:	20000000 	.word	0x20000000

08040b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040b1c:	b580      	push	{r7, lr}
 8040b1e:	b094      	sub	sp, #80	; 0x50
 8040b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040b22:	f107 031c 	add.w	r3, r7, #28
 8040b26:	2234      	movs	r2, #52	; 0x34
 8040b28:	2100      	movs	r1, #0
 8040b2a:	4618      	mov	r0, r3
 8040b2c:	f003 fad8 	bl	80440e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040b30:	f107 0308 	add.w	r3, r7, #8
 8040b34:	2200      	movs	r2, #0
 8040b36:	601a      	str	r2, [r3, #0]
 8040b38:	605a      	str	r2, [r3, #4]
 8040b3a:	609a      	str	r2, [r3, #8]
 8040b3c:	60da      	str	r2, [r3, #12]
 8040b3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8040b40:	4b22      	ldr	r3, [pc, #136]	; (8040bcc <SystemClock_Config+0xb0>)
 8040b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040b44:	4a21      	ldr	r2, [pc, #132]	; (8040bcc <SystemClock_Config+0xb0>)
 8040b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8040b4c:	4b1f      	ldr	r3, [pc, #124]	; (8040bcc <SystemClock_Config+0xb0>)
 8040b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040b54:	607b      	str	r3, [r7, #4]
 8040b56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8040b58:	4b1d      	ldr	r3, [pc, #116]	; (8040bd0 <SystemClock_Config+0xb4>)
 8040b5a:	681b      	ldr	r3, [r3, #0]
 8040b5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8040b60:	4a1b      	ldr	r2, [pc, #108]	; (8040bd0 <SystemClock_Config+0xb4>)
 8040b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040b66:	6013      	str	r3, [r2, #0]
 8040b68:	4b19      	ldr	r3, [pc, #100]	; (8040bd0 <SystemClock_Config+0xb4>)
 8040b6a:	681b      	ldr	r3, [r3, #0]
 8040b6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8040b70:	603b      	str	r3, [r7, #0]
 8040b72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8040b74:	2302      	movs	r3, #2
 8040b76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8040b78:	2301      	movs	r3, #1
 8040b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8040b7c:	2310      	movs	r3, #16
 8040b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8040b80:	2300      	movs	r3, #0
 8040b82:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040b84:	f107 031c 	add.w	r3, r7, #28
 8040b88:	4618      	mov	r0, r3
 8040b8a:	f001 fcd7 	bl	804253c <HAL_RCC_OscConfig>
 8040b8e:	4603      	mov	r3, r0
 8040b90:	2b00      	cmp	r3, #0
 8040b92:	d001      	beq.n	8040b98 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8040b94:	f000 f8fc 	bl	8040d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040b98:	230f      	movs	r3, #15
 8040b9a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8040b9c:	2300      	movs	r3, #0
 8040b9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8040ba0:	2300      	movs	r3, #0
 8040ba2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8040ba4:	2300      	movs	r3, #0
 8040ba6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8040ba8:	2300      	movs	r3, #0
 8040baa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8040bac:	f107 0308 	add.w	r3, r7, #8
 8040bb0:	2100      	movs	r1, #0
 8040bb2:	4618      	mov	r0, r3
 8040bb4:	f001 ff70 	bl	8042a98 <HAL_RCC_ClockConfig>
 8040bb8:	4603      	mov	r3, r0
 8040bba:	2b00      	cmp	r3, #0
 8040bbc:	d001      	beq.n	8040bc2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8040bbe:	f000 f8e7 	bl	8040d90 <Error_Handler>
  }
}
 8040bc2:	bf00      	nop
 8040bc4:	3750      	adds	r7, #80	; 0x50
 8040bc6:	46bd      	mov	sp, r7
 8040bc8:	bd80      	pop	{r7, pc}
 8040bca:	bf00      	nop
 8040bcc:	40023800 	.word	0x40023800
 8040bd0:	40007000 	.word	0x40007000

08040bd4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8040bd4:	b580      	push	{r7, lr}
 8040bd6:	b08a      	sub	sp, #40	; 0x28
 8040bd8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8040bda:	4b25      	ldr	r3, [pc, #148]	; (8040c70 <MX_CAN1_Init+0x9c>)
 8040bdc:	4a25      	ldr	r2, [pc, #148]	; (8040c74 <MX_CAN1_Init+0xa0>)
 8040bde:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8040be0:	4b23      	ldr	r3, [pc, #140]	; (8040c70 <MX_CAN1_Init+0x9c>)
 8040be2:	2201      	movs	r2, #1
 8040be4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8040be6:	4b22      	ldr	r3, [pc, #136]	; (8040c70 <MX_CAN1_Init+0x9c>)
 8040be8:	2200      	movs	r2, #0
 8040bea:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8040bec:	4b20      	ldr	r3, [pc, #128]	; (8040c70 <MX_CAN1_Init+0x9c>)
 8040bee:	2200      	movs	r2, #0
 8040bf0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8040bf2:	4b1f      	ldr	r3, [pc, #124]	; (8040c70 <MX_CAN1_Init+0x9c>)
 8040bf4:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8040bf8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8040bfa:	4b1d      	ldr	r3, [pc, #116]	; (8040c70 <MX_CAN1_Init+0x9c>)
 8040bfc:	2200      	movs	r2, #0
 8040bfe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8040c00:	4b1b      	ldr	r3, [pc, #108]	; (8040c70 <MX_CAN1_Init+0x9c>)
 8040c02:	2200      	movs	r2, #0
 8040c04:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8040c06:	4b1a      	ldr	r3, [pc, #104]	; (8040c70 <MX_CAN1_Init+0x9c>)
 8040c08:	2200      	movs	r2, #0
 8040c0a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8040c0c:	4b18      	ldr	r3, [pc, #96]	; (8040c70 <MX_CAN1_Init+0x9c>)
 8040c0e:	2200      	movs	r2, #0
 8040c10:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8040c12:	4b17      	ldr	r3, [pc, #92]	; (8040c70 <MX_CAN1_Init+0x9c>)
 8040c14:	2200      	movs	r2, #0
 8040c16:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8040c18:	4b15      	ldr	r3, [pc, #84]	; (8040c70 <MX_CAN1_Init+0x9c>)
 8040c1a:	2200      	movs	r2, #0
 8040c1c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8040c1e:	4b14      	ldr	r3, [pc, #80]	; (8040c70 <MX_CAN1_Init+0x9c>)
 8040c20:	2200      	movs	r2, #0
 8040c22:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8040c24:	4812      	ldr	r0, [pc, #72]	; (8040c70 <MX_CAN1_Init+0x9c>)
 8040c26:	f000 fb33 	bl	8041290 <HAL_CAN_Init>
 8040c2a:	4603      	mov	r3, r0
 8040c2c:	2b00      	cmp	r3, #0
 8040c2e:	d001      	beq.n	8040c34 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8040c30:	f000 f8ae 	bl	8040d90 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8040c34:	2301      	movs	r3, #1
 8040c36:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10; // which filter bank to use from the assigned ones
 8040c38:	230a      	movs	r3, #10
 8040c3a:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8040c3c:	2300      	movs	r3, #0
 8040c3e:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;  //will just receive 0x103 address mssg
 8040c40:	2300      	movs	r3, #0
 8040c42:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8040c44:	2300      	movs	r3, #0
 8040c46:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8040c48:	2300      	movs	r3, #0
 8040c4a:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8040c4c:	2300      	movs	r3, #0
 8040c4e:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8040c50:	2300      	movs	r3, #0
 8040c52:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8040c54:	2301      	movs	r3, #1
 8040c56:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // how many filters to assign to the CAN1 (master can)
 8040c58:	2300      	movs	r3, #0
 8040c5a:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8040c5c:	463b      	mov	r3, r7
 8040c5e:	4619      	mov	r1, r3
 8040c60:	4803      	ldr	r0, [pc, #12]	; (8040c70 <MX_CAN1_Init+0x9c>)
 8040c62:	f000 fc11 	bl	8041488 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8040c66:	bf00      	nop
 8040c68:	3728      	adds	r7, #40	; 0x28
 8040c6a:	46bd      	mov	sp, r7
 8040c6c:	bd80      	pop	{r7, pc}
 8040c6e:	bf00      	nop
 8040c70:	200000a8 	.word	0x200000a8
 8040c74:	40006400 	.word	0x40006400

08040c78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8040c78:	b580      	push	{r7, lr}
 8040c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8040c7c:	4b14      	ldr	r3, [pc, #80]	; (8040cd0 <MX_USART3_UART_Init+0x58>)
 8040c7e:	4a15      	ldr	r2, [pc, #84]	; (8040cd4 <MX_USART3_UART_Init+0x5c>)
 8040c80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8040c82:	4b13      	ldr	r3, [pc, #76]	; (8040cd0 <MX_USART3_UART_Init+0x58>)
 8040c84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040c88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8040c8a:	4b11      	ldr	r3, [pc, #68]	; (8040cd0 <MX_USART3_UART_Init+0x58>)
 8040c8c:	2200      	movs	r2, #0
 8040c8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8040c90:	4b0f      	ldr	r3, [pc, #60]	; (8040cd0 <MX_USART3_UART_Init+0x58>)
 8040c92:	2200      	movs	r2, #0
 8040c94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8040c96:	4b0e      	ldr	r3, [pc, #56]	; (8040cd0 <MX_USART3_UART_Init+0x58>)
 8040c98:	2200      	movs	r2, #0
 8040c9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8040c9c:	4b0c      	ldr	r3, [pc, #48]	; (8040cd0 <MX_USART3_UART_Init+0x58>)
 8040c9e:	220c      	movs	r2, #12
 8040ca0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040ca2:	4b0b      	ldr	r3, [pc, #44]	; (8040cd0 <MX_USART3_UART_Init+0x58>)
 8040ca4:	2200      	movs	r2, #0
 8040ca6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8040ca8:	4b09      	ldr	r3, [pc, #36]	; (8040cd0 <MX_USART3_UART_Init+0x58>)
 8040caa:	2200      	movs	r2, #0
 8040cac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040cae:	4b08      	ldr	r3, [pc, #32]	; (8040cd0 <MX_USART3_UART_Init+0x58>)
 8040cb0:	2200      	movs	r2, #0
 8040cb2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040cb4:	4b06      	ldr	r3, [pc, #24]	; (8040cd0 <MX_USART3_UART_Init+0x58>)
 8040cb6:	2200      	movs	r2, #0
 8040cb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8040cba:	4805      	ldr	r0, [pc, #20]	; (8040cd0 <MX_USART3_UART_Init+0x58>)
 8040cbc:	f002 fcfa 	bl	80436b4 <HAL_UART_Init>
 8040cc0:	4603      	mov	r3, r0
 8040cc2:	2b00      	cmp	r3, #0
 8040cc4:	d001      	beq.n	8040cca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8040cc6:	f000 f863 	bl	8040d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8040cca:	bf00      	nop
 8040ccc:	bd80      	pop	{r7, pc}
 8040cce:	bf00      	nop
 8040cd0:	200000d0 	.word	0x200000d0
 8040cd4:	40004800 	.word	0x40004800

08040cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040cd8:	b580      	push	{r7, lr}
 8040cda:	b088      	sub	sp, #32
 8040cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040cde:	f107 030c 	add.w	r3, r7, #12
 8040ce2:	2200      	movs	r2, #0
 8040ce4:	601a      	str	r2, [r3, #0]
 8040ce6:	605a      	str	r2, [r3, #4]
 8040ce8:	609a      	str	r2, [r3, #8]
 8040cea:	60da      	str	r2, [r3, #12]
 8040cec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040cee:	4b25      	ldr	r3, [pc, #148]	; (8040d84 <MX_GPIO_Init+0xac>)
 8040cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cf2:	4a24      	ldr	r2, [pc, #144]	; (8040d84 <MX_GPIO_Init+0xac>)
 8040cf4:	f043 0304 	orr.w	r3, r3, #4
 8040cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8040cfa:	4b22      	ldr	r3, [pc, #136]	; (8040d84 <MX_GPIO_Init+0xac>)
 8040cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cfe:	f003 0304 	and.w	r3, r3, #4
 8040d02:	60bb      	str	r3, [r7, #8]
 8040d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040d06:	4b1f      	ldr	r3, [pc, #124]	; (8040d84 <MX_GPIO_Init+0xac>)
 8040d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d0a:	4a1e      	ldr	r2, [pc, #120]	; (8040d84 <MX_GPIO_Init+0xac>)
 8040d0c:	f043 0302 	orr.w	r3, r3, #2
 8040d10:	6313      	str	r3, [r2, #48]	; 0x30
 8040d12:	4b1c      	ldr	r3, [pc, #112]	; (8040d84 <MX_GPIO_Init+0xac>)
 8040d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d16:	f003 0302 	and.w	r3, r3, #2
 8040d1a:	607b      	str	r3, [r7, #4]
 8040d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040d1e:	4b19      	ldr	r3, [pc, #100]	; (8040d84 <MX_GPIO_Init+0xac>)
 8040d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d22:	4a18      	ldr	r2, [pc, #96]	; (8040d84 <MX_GPIO_Init+0xac>)
 8040d24:	f043 0308 	orr.w	r3, r3, #8
 8040d28:	6313      	str	r3, [r2, #48]	; 0x30
 8040d2a:	4b16      	ldr	r3, [pc, #88]	; (8040d84 <MX_GPIO_Init+0xac>)
 8040d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d2e:	f003 0308 	and.w	r3, r3, #8
 8040d32:	603b      	str	r3, [r7, #0]
 8040d34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, greenLED_Pin|redLed_Pin|blueLED_Pin, GPIO_PIN_RESET);
 8040d36:	2200      	movs	r2, #0
 8040d38:	f244 0181 	movw	r1, #16513	; 0x4081
 8040d3c:	4812      	ldr	r0, [pc, #72]	; (8040d88 <MX_GPIO_Init+0xb0>)
 8040d3e:	f001 fbc9 	bl	80424d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : usr_btn_Pin */
  GPIO_InitStruct.Pin = usr_btn_Pin;
 8040d42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8040d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040d48:	2300      	movs	r3, #0
 8040d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d4c:	2300      	movs	r3, #0
 8040d4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(usr_btn_GPIO_Port, &GPIO_InitStruct);
 8040d50:	f107 030c 	add.w	r3, r7, #12
 8040d54:	4619      	mov	r1, r3
 8040d56:	480d      	ldr	r0, [pc, #52]	; (8040d8c <MX_GPIO_Init+0xb4>)
 8040d58:	f001 fa10 	bl	804217c <HAL_GPIO_Init>

  /*Configure GPIO pins : greenLED_Pin redLed_Pin blueLED_Pin */
  GPIO_InitStruct.Pin = greenLED_Pin|redLed_Pin|blueLED_Pin;
 8040d5c:	f244 0381 	movw	r3, #16513	; 0x4081
 8040d60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040d62:	2301      	movs	r3, #1
 8040d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d66:	2300      	movs	r3, #0
 8040d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040d6a:	2300      	movs	r3, #0
 8040d6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8040d6e:	f107 030c 	add.w	r3, r7, #12
 8040d72:	4619      	mov	r1, r3
 8040d74:	4804      	ldr	r0, [pc, #16]	; (8040d88 <MX_GPIO_Init+0xb0>)
 8040d76:	f001 fa01 	bl	804217c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8040d7a:	bf00      	nop
 8040d7c:	3720      	adds	r7, #32
 8040d7e:	46bd      	mov	sp, r7
 8040d80:	bd80      	pop	{r7, pc}
 8040d82:	bf00      	nop
 8040d84:	40023800 	.word	0x40023800
 8040d88:	40020400 	.word	0x40020400
 8040d8c:	40020800 	.word	0x40020800

08040d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040d90:	b480      	push	{r7}
 8040d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040d94:	b672      	cpsid	i
}
 8040d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8040d98:	e7fe      	b.n	8040d98 <Error_Handler+0x8>
	...

08040d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040d9c:	b480      	push	{r7}
 8040d9e:	b083      	sub	sp, #12
 8040da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8040da2:	4b0f      	ldr	r3, [pc, #60]	; (8040de0 <HAL_MspInit+0x44>)
 8040da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040da6:	4a0e      	ldr	r2, [pc, #56]	; (8040de0 <HAL_MspInit+0x44>)
 8040da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040dac:	6413      	str	r3, [r2, #64]	; 0x40
 8040dae:	4b0c      	ldr	r3, [pc, #48]	; (8040de0 <HAL_MspInit+0x44>)
 8040db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040db6:	607b      	str	r3, [r7, #4]
 8040db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040dba:	4b09      	ldr	r3, [pc, #36]	; (8040de0 <HAL_MspInit+0x44>)
 8040dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040dbe:	4a08      	ldr	r2, [pc, #32]	; (8040de0 <HAL_MspInit+0x44>)
 8040dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8040dc6:	4b06      	ldr	r3, [pc, #24]	; (8040de0 <HAL_MspInit+0x44>)
 8040dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040dce:	603b      	str	r3, [r7, #0]
 8040dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040dd2:	bf00      	nop
 8040dd4:	370c      	adds	r7, #12
 8040dd6:	46bd      	mov	sp, r7
 8040dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ddc:	4770      	bx	lr
 8040dde:	bf00      	nop
 8040de0:	40023800 	.word	0x40023800

08040de4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8040de4:	b580      	push	{r7, lr}
 8040de6:	b08a      	sub	sp, #40	; 0x28
 8040de8:	af00      	add	r7, sp, #0
 8040dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040dec:	f107 0314 	add.w	r3, r7, #20
 8040df0:	2200      	movs	r2, #0
 8040df2:	601a      	str	r2, [r3, #0]
 8040df4:	605a      	str	r2, [r3, #4]
 8040df6:	609a      	str	r2, [r3, #8]
 8040df8:	60da      	str	r2, [r3, #12]
 8040dfa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8040dfc:	687b      	ldr	r3, [r7, #4]
 8040dfe:	681b      	ldr	r3, [r3, #0]
 8040e00:	4a1f      	ldr	r2, [pc, #124]	; (8040e80 <HAL_CAN_MspInit+0x9c>)
 8040e02:	4293      	cmp	r3, r2
 8040e04:	d137      	bne.n	8040e76 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8040e06:	4b1f      	ldr	r3, [pc, #124]	; (8040e84 <HAL_CAN_MspInit+0xa0>)
 8040e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040e0a:	4a1e      	ldr	r2, [pc, #120]	; (8040e84 <HAL_CAN_MspInit+0xa0>)
 8040e0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8040e10:	6413      	str	r3, [r2, #64]	; 0x40
 8040e12:	4b1c      	ldr	r3, [pc, #112]	; (8040e84 <HAL_CAN_MspInit+0xa0>)
 8040e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8040e1a:	613b      	str	r3, [r7, #16]
 8040e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8040e1e:	4b19      	ldr	r3, [pc, #100]	; (8040e84 <HAL_CAN_MspInit+0xa0>)
 8040e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040e22:	4a18      	ldr	r2, [pc, #96]	; (8040e84 <HAL_CAN_MspInit+0xa0>)
 8040e24:	f043 0308 	orr.w	r3, r3, #8
 8040e28:	6313      	str	r3, [r2, #48]	; 0x30
 8040e2a:	4b16      	ldr	r3, [pc, #88]	; (8040e84 <HAL_CAN_MspInit+0xa0>)
 8040e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040e2e:	f003 0308 	and.w	r3, r3, #8
 8040e32:	60fb      	str	r3, [r7, #12]
 8040e34:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8040e36:	2303      	movs	r3, #3
 8040e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040e3a:	2302      	movs	r3, #2
 8040e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e3e:	2300      	movs	r3, #0
 8040e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8040e42:	2303      	movs	r3, #3
 8040e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8040e46:	2309      	movs	r3, #9
 8040e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040e4a:	f107 0314 	add.w	r3, r7, #20
 8040e4e:	4619      	mov	r1, r3
 8040e50:	480d      	ldr	r0, [pc, #52]	; (8040e88 <HAL_CAN_MspInit+0xa4>)
 8040e52:	f001 f993 	bl	804217c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8040e56:	2200      	movs	r2, #0
 8040e58:	2100      	movs	r1, #0
 8040e5a:	2014      	movs	r0, #20
 8040e5c:	f001 f957 	bl	804210e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8040e60:	2014      	movs	r0, #20
 8040e62:	f001 f970 	bl	8042146 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8040e66:	2200      	movs	r2, #0
 8040e68:	2100      	movs	r1, #0
 8040e6a:	2015      	movs	r0, #21
 8040e6c:	f001 f94f 	bl	804210e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8040e70:	2015      	movs	r0, #21
 8040e72:	f001 f968 	bl	8042146 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8040e76:	bf00      	nop
 8040e78:	3728      	adds	r7, #40	; 0x28
 8040e7a:	46bd      	mov	sp, r7
 8040e7c:	bd80      	pop	{r7, pc}
 8040e7e:	bf00      	nop
 8040e80:	40006400 	.word	0x40006400
 8040e84:	40023800 	.word	0x40023800
 8040e88:	40020c00 	.word	0x40020c00

08040e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040e8c:	b580      	push	{r7, lr}
 8040e8e:	b0ae      	sub	sp, #184	; 0xb8
 8040e90:	af00      	add	r7, sp, #0
 8040e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040e94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040e98:	2200      	movs	r2, #0
 8040e9a:	601a      	str	r2, [r3, #0]
 8040e9c:	605a      	str	r2, [r3, #4]
 8040e9e:	609a      	str	r2, [r3, #8]
 8040ea0:	60da      	str	r2, [r3, #12]
 8040ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040ea4:	f107 0314 	add.w	r3, r7, #20
 8040ea8:	2290      	movs	r2, #144	; 0x90
 8040eaa:	2100      	movs	r1, #0
 8040eac:	4618      	mov	r0, r3
 8040eae:	f003 f917 	bl	80440e0 <memset>
  if(huart->Instance==USART3)
 8040eb2:	687b      	ldr	r3, [r7, #4]
 8040eb4:	681b      	ldr	r3, [r3, #0]
 8040eb6:	4a22      	ldr	r2, [pc, #136]	; (8040f40 <HAL_UART_MspInit+0xb4>)
 8040eb8:	4293      	cmp	r3, r2
 8040eba:	d13c      	bne.n	8040f36 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8040ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8040ec0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8040ec2:	2300      	movs	r3, #0
 8040ec4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040ec6:	f107 0314 	add.w	r3, r7, #20
 8040eca:	4618      	mov	r0, r3
 8040ecc:	f001 ffca 	bl	8042e64 <HAL_RCCEx_PeriphCLKConfig>
 8040ed0:	4603      	mov	r3, r0
 8040ed2:	2b00      	cmp	r3, #0
 8040ed4:	d001      	beq.n	8040eda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8040ed6:	f7ff ff5b 	bl	8040d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8040eda:	4b1a      	ldr	r3, [pc, #104]	; (8040f44 <HAL_UART_MspInit+0xb8>)
 8040edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040ede:	4a19      	ldr	r2, [pc, #100]	; (8040f44 <HAL_UART_MspInit+0xb8>)
 8040ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8040ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8040ee6:	4b17      	ldr	r3, [pc, #92]	; (8040f44 <HAL_UART_MspInit+0xb8>)
 8040ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8040eee:	613b      	str	r3, [r7, #16]
 8040ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8040ef2:	4b14      	ldr	r3, [pc, #80]	; (8040f44 <HAL_UART_MspInit+0xb8>)
 8040ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ef6:	4a13      	ldr	r2, [pc, #76]	; (8040f44 <HAL_UART_MspInit+0xb8>)
 8040ef8:	f043 0308 	orr.w	r3, r3, #8
 8040efc:	6313      	str	r3, [r2, #48]	; 0x30
 8040efe:	4b11      	ldr	r3, [pc, #68]	; (8040f44 <HAL_UART_MspInit+0xb8>)
 8040f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f02:	f003 0308 	and.w	r3, r3, #8
 8040f06:	60fb      	str	r3, [r7, #12]
 8040f08:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8040f0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8040f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040f12:	2302      	movs	r3, #2
 8040f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040f18:	2300      	movs	r3, #0
 8040f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8040f1e:	2303      	movs	r3, #3
 8040f20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8040f24:	2307      	movs	r3, #7
 8040f26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040f2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040f2e:	4619      	mov	r1, r3
 8040f30:	4805      	ldr	r0, [pc, #20]	; (8040f48 <HAL_UART_MspInit+0xbc>)
 8040f32:	f001 f923 	bl	804217c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8040f36:	bf00      	nop
 8040f38:	37b8      	adds	r7, #184	; 0xb8
 8040f3a:	46bd      	mov	sp, r7
 8040f3c:	bd80      	pop	{r7, pc}
 8040f3e:	bf00      	nop
 8040f40:	40004800 	.word	0x40004800
 8040f44:	40023800 	.word	0x40023800
 8040f48:	40020c00 	.word	0x40020c00

08040f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040f4c:	b480      	push	{r7}
 8040f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8040f50:	e7fe      	b.n	8040f50 <NMI_Handler+0x4>

08040f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040f52:	b480      	push	{r7}
 8040f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040f56:	e7fe      	b.n	8040f56 <HardFault_Handler+0x4>

08040f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040f58:	b480      	push	{r7}
 8040f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040f5c:	e7fe      	b.n	8040f5c <MemManage_Handler+0x4>

08040f5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040f5e:	b480      	push	{r7}
 8040f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040f62:	e7fe      	b.n	8040f62 <BusFault_Handler+0x4>

08040f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040f64:	b480      	push	{r7}
 8040f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040f68:	e7fe      	b.n	8040f68 <UsageFault_Handler+0x4>

08040f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040f6a:	b480      	push	{r7}
 8040f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040f6e:	bf00      	nop
 8040f70:	46bd      	mov	sp, r7
 8040f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f76:	4770      	bx	lr

08040f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040f78:	b480      	push	{r7}
 8040f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040f7c:	bf00      	nop
 8040f7e:	46bd      	mov	sp, r7
 8040f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f84:	4770      	bx	lr

08040f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040f86:	b480      	push	{r7}
 8040f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040f8a:	bf00      	nop
 8040f8c:	46bd      	mov	sp, r7
 8040f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f92:	4770      	bx	lr

08040f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040f94:	b580      	push	{r7, lr}
 8040f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040f98:	f000 f936 	bl	8041208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040f9c:	bf00      	nop
 8040f9e:	bd80      	pop	{r7, pc}

08040fa0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8040fa0:	b580      	push	{r7, lr}
 8040fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8040fa4:	4802      	ldr	r0, [pc, #8]	; (8040fb0 <CAN1_RX0_IRQHandler+0x10>)
 8040fa6:	f000 fda7 	bl	8041af8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8040faa:	bf00      	nop
 8040fac:	bd80      	pop	{r7, pc}
 8040fae:	bf00      	nop
 8040fb0:	200000a8 	.word	0x200000a8

08040fb4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8040fb4:	b580      	push	{r7, lr}
 8040fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8040fb8:	4802      	ldr	r0, [pc, #8]	; (8040fc4 <CAN1_RX1_IRQHandler+0x10>)
 8040fba:	f000 fd9d 	bl	8041af8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8040fbe:	bf00      	nop
 8040fc0:	bd80      	pop	{r7, pc}
 8040fc2:	bf00      	nop
 8040fc4:	200000a8 	.word	0x200000a8

08040fc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8040fc8:	b580      	push	{r7, lr}
 8040fca:	b086      	sub	sp, #24
 8040fcc:	af00      	add	r7, sp, #0
 8040fce:	60f8      	str	r0, [r7, #12]
 8040fd0:	60b9      	str	r1, [r7, #8]
 8040fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040fd4:	2300      	movs	r3, #0
 8040fd6:	617b      	str	r3, [r7, #20]
 8040fd8:	e00a      	b.n	8040ff0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8040fda:	f3af 8000 	nop.w
 8040fde:	4601      	mov	r1, r0
 8040fe0:	68bb      	ldr	r3, [r7, #8]
 8040fe2:	1c5a      	adds	r2, r3, #1
 8040fe4:	60ba      	str	r2, [r7, #8]
 8040fe6:	b2ca      	uxtb	r2, r1
 8040fe8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040fea:	697b      	ldr	r3, [r7, #20]
 8040fec:	3301      	adds	r3, #1
 8040fee:	617b      	str	r3, [r7, #20]
 8040ff0:	697a      	ldr	r2, [r7, #20]
 8040ff2:	687b      	ldr	r3, [r7, #4]
 8040ff4:	429a      	cmp	r2, r3
 8040ff6:	dbf0      	blt.n	8040fda <_read+0x12>
  }

  return len;
 8040ff8:	687b      	ldr	r3, [r7, #4]
}
 8040ffa:	4618      	mov	r0, r3
 8040ffc:	3718      	adds	r7, #24
 8040ffe:	46bd      	mov	sp, r7
 8041000:	bd80      	pop	{r7, pc}

08041002 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8041002:	b580      	push	{r7, lr}
 8041004:	b086      	sub	sp, #24
 8041006:	af00      	add	r7, sp, #0
 8041008:	60f8      	str	r0, [r7, #12]
 804100a:	60b9      	str	r1, [r7, #8]
 804100c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 804100e:	2300      	movs	r3, #0
 8041010:	617b      	str	r3, [r7, #20]
 8041012:	e009      	b.n	8041028 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8041014:	68bb      	ldr	r3, [r7, #8]
 8041016:	1c5a      	adds	r2, r3, #1
 8041018:	60ba      	str	r2, [r7, #8]
 804101a:	781b      	ldrb	r3, [r3, #0]
 804101c:	4618      	mov	r0, r3
 804101e:	f7ff fae1 	bl	80405e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041022:	697b      	ldr	r3, [r7, #20]
 8041024:	3301      	adds	r3, #1
 8041026:	617b      	str	r3, [r7, #20]
 8041028:	697a      	ldr	r2, [r7, #20]
 804102a:	687b      	ldr	r3, [r7, #4]
 804102c:	429a      	cmp	r2, r3
 804102e:	dbf1      	blt.n	8041014 <_write+0x12>
  }
  return len;
 8041030:	687b      	ldr	r3, [r7, #4]
}
 8041032:	4618      	mov	r0, r3
 8041034:	3718      	adds	r7, #24
 8041036:	46bd      	mov	sp, r7
 8041038:	bd80      	pop	{r7, pc}

0804103a <_close>:

int _close(int file)
{
 804103a:	b480      	push	{r7}
 804103c:	b083      	sub	sp, #12
 804103e:	af00      	add	r7, sp, #0
 8041040:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8041042:	f04f 33ff 	mov.w	r3, #4294967295
}
 8041046:	4618      	mov	r0, r3
 8041048:	370c      	adds	r7, #12
 804104a:	46bd      	mov	sp, r7
 804104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041050:	4770      	bx	lr

08041052 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8041052:	b480      	push	{r7}
 8041054:	b083      	sub	sp, #12
 8041056:	af00      	add	r7, sp, #0
 8041058:	6078      	str	r0, [r7, #4]
 804105a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 804105c:	683b      	ldr	r3, [r7, #0]
 804105e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8041062:	605a      	str	r2, [r3, #4]
  return 0;
 8041064:	2300      	movs	r3, #0
}
 8041066:	4618      	mov	r0, r3
 8041068:	370c      	adds	r7, #12
 804106a:	46bd      	mov	sp, r7
 804106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041070:	4770      	bx	lr

08041072 <_isatty>:

int _isatty(int file)
{
 8041072:	b480      	push	{r7}
 8041074:	b083      	sub	sp, #12
 8041076:	af00      	add	r7, sp, #0
 8041078:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 804107a:	2301      	movs	r3, #1
}
 804107c:	4618      	mov	r0, r3
 804107e:	370c      	adds	r7, #12
 8041080:	46bd      	mov	sp, r7
 8041082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041086:	4770      	bx	lr

08041088 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8041088:	b480      	push	{r7}
 804108a:	b085      	sub	sp, #20
 804108c:	af00      	add	r7, sp, #0
 804108e:	60f8      	str	r0, [r7, #12]
 8041090:	60b9      	str	r1, [r7, #8]
 8041092:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8041094:	2300      	movs	r3, #0
}
 8041096:	4618      	mov	r0, r3
 8041098:	3714      	adds	r7, #20
 804109a:	46bd      	mov	sp, r7
 804109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410a0:	4770      	bx	lr
	...

080410a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80410a4:	b580      	push	{r7, lr}
 80410a6:	b086      	sub	sp, #24
 80410a8:	af00      	add	r7, sp, #0
 80410aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80410ac:	4a14      	ldr	r2, [pc, #80]	; (8041100 <_sbrk+0x5c>)
 80410ae:	4b15      	ldr	r3, [pc, #84]	; (8041104 <_sbrk+0x60>)
 80410b0:	1ad3      	subs	r3, r2, r3
 80410b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80410b4:	697b      	ldr	r3, [r7, #20]
 80410b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80410b8:	4b13      	ldr	r3, [pc, #76]	; (8041108 <_sbrk+0x64>)
 80410ba:	681b      	ldr	r3, [r3, #0]
 80410bc:	2b00      	cmp	r3, #0
 80410be:	d102      	bne.n	80410c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80410c0:	4b11      	ldr	r3, [pc, #68]	; (8041108 <_sbrk+0x64>)
 80410c2:	4a12      	ldr	r2, [pc, #72]	; (804110c <_sbrk+0x68>)
 80410c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80410c6:	4b10      	ldr	r3, [pc, #64]	; (8041108 <_sbrk+0x64>)
 80410c8:	681a      	ldr	r2, [r3, #0]
 80410ca:	687b      	ldr	r3, [r7, #4]
 80410cc:	4413      	add	r3, r2
 80410ce:	693a      	ldr	r2, [r7, #16]
 80410d0:	429a      	cmp	r2, r3
 80410d2:	d207      	bcs.n	80410e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80410d4:	f002 ffda 	bl	804408c <__errno>
 80410d8:	4603      	mov	r3, r0
 80410da:	220c      	movs	r2, #12
 80410dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80410de:	f04f 33ff 	mov.w	r3, #4294967295
 80410e2:	e009      	b.n	80410f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80410e4:	4b08      	ldr	r3, [pc, #32]	; (8041108 <_sbrk+0x64>)
 80410e6:	681b      	ldr	r3, [r3, #0]
 80410e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80410ea:	4b07      	ldr	r3, [pc, #28]	; (8041108 <_sbrk+0x64>)
 80410ec:	681a      	ldr	r2, [r3, #0]
 80410ee:	687b      	ldr	r3, [r7, #4]
 80410f0:	4413      	add	r3, r2
 80410f2:	4a05      	ldr	r2, [pc, #20]	; (8041108 <_sbrk+0x64>)
 80410f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80410f6:	68fb      	ldr	r3, [r7, #12]
}
 80410f8:	4618      	mov	r0, r3
 80410fa:	3718      	adds	r7, #24
 80410fc:	46bd      	mov	sp, r7
 80410fe:	bd80      	pop	{r7, pc}
 8041100:	20080000 	.word	0x20080000
 8041104:	00000400 	.word	0x00000400
 8041108:	200001a4 	.word	0x200001a4
 804110c:	200001c0 	.word	0x200001c0

08041110 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8041110:	b480      	push	{r7}
 8041112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8041114:	4b07      	ldr	r3, [pc, #28]	; (8041134 <SystemInit+0x24>)
 8041116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804111a:	4a06      	ldr	r2, [pc, #24]	; (8041134 <SystemInit+0x24>)
 804111c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8041120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8041124:	4b03      	ldr	r3, [pc, #12]	; (8041134 <SystemInit+0x24>)
 8041126:	4a04      	ldr	r2, [pc, #16]	; (8041138 <SystemInit+0x28>)
 8041128:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 804112a:	bf00      	nop
 804112c:	46bd      	mov	sp, r7
 804112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041132:	4770      	bx	lr
 8041134:	e000ed00 	.word	0xe000ed00
 8041138:	08040000 	.word	0x08040000

0804113c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 804113c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8041174 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8041140:	480d      	ldr	r0, [pc, #52]	; (8041178 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8041142:	490e      	ldr	r1, [pc, #56]	; (804117c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8041144:	4a0e      	ldr	r2, [pc, #56]	; (8041180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8041146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8041148:	e002      	b.n	8041150 <LoopCopyDataInit>

0804114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 804114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 804114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 804114e:	3304      	adds	r3, #4

08041150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8041150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8041152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8041154:	d3f9      	bcc.n	804114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8041156:	4a0b      	ldr	r2, [pc, #44]	; (8041184 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8041158:	4c0b      	ldr	r4, [pc, #44]	; (8041188 <LoopFillZerobss+0x26>)
  movs r3, #0
 804115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 804115c:	e001      	b.n	8041162 <LoopFillZerobss>

0804115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 804115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8041160:	3204      	adds	r2, #4

08041162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8041162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8041164:	d3fb      	bcc.n	804115e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8041166:	f7ff ffd3 	bl	8041110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 804116a:	f002 ff95 	bl	8044098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 804116e:	f7ff fbed 	bl	804094c <main>
  bx  lr    
 8041172:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8041174:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8041178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 804117c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8041180:	080450fc 	.word	0x080450fc
  ldr r2, =_sbss
 8041184:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8041188:	200001bc 	.word	0x200001bc

0804118c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 804118c:	e7fe      	b.n	804118c <ADC_IRQHandler>

0804118e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 804118e:	b580      	push	{r7, lr}
 8041190:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8041192:	2003      	movs	r0, #3
 8041194:	f000 ffb0 	bl	80420f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8041198:	200f      	movs	r0, #15
 804119a:	f000 f805 	bl	80411a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 804119e:	f7ff fdfd 	bl	8040d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80411a2:	2300      	movs	r3, #0
}
 80411a4:	4618      	mov	r0, r3
 80411a6:	bd80      	pop	{r7, pc}

080411a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80411a8:	b580      	push	{r7, lr}
 80411aa:	b082      	sub	sp, #8
 80411ac:	af00      	add	r7, sp, #0
 80411ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80411b0:	4b12      	ldr	r3, [pc, #72]	; (80411fc <HAL_InitTick+0x54>)
 80411b2:	681a      	ldr	r2, [r3, #0]
 80411b4:	4b12      	ldr	r3, [pc, #72]	; (8041200 <HAL_InitTick+0x58>)
 80411b6:	781b      	ldrb	r3, [r3, #0]
 80411b8:	4619      	mov	r1, r3
 80411ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80411be:	fbb3 f3f1 	udiv	r3, r3, r1
 80411c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80411c6:	4618      	mov	r0, r3
 80411c8:	f000 ffcb 	bl	8042162 <HAL_SYSTICK_Config>
 80411cc:	4603      	mov	r3, r0
 80411ce:	2b00      	cmp	r3, #0
 80411d0:	d001      	beq.n	80411d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80411d2:	2301      	movs	r3, #1
 80411d4:	e00e      	b.n	80411f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80411d6:	687b      	ldr	r3, [r7, #4]
 80411d8:	2b0f      	cmp	r3, #15
 80411da:	d80a      	bhi.n	80411f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80411dc:	2200      	movs	r2, #0
 80411de:	6879      	ldr	r1, [r7, #4]
 80411e0:	f04f 30ff 	mov.w	r0, #4294967295
 80411e4:	f000 ff93 	bl	804210e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80411e8:	4a06      	ldr	r2, [pc, #24]	; (8041204 <HAL_InitTick+0x5c>)
 80411ea:	687b      	ldr	r3, [r7, #4]
 80411ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80411ee:	2300      	movs	r3, #0
 80411f0:	e000      	b.n	80411f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80411f2:	2301      	movs	r3, #1
}
 80411f4:	4618      	mov	r0, r3
 80411f6:	3708      	adds	r7, #8
 80411f8:	46bd      	mov	sp, r7
 80411fa:	bd80      	pop	{r7, pc}
 80411fc:	20000014 	.word	0x20000014
 8041200:	2000001c 	.word	0x2000001c
 8041204:	20000018 	.word	0x20000018

08041208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8041208:	b480      	push	{r7}
 804120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 804120c:	4b06      	ldr	r3, [pc, #24]	; (8041228 <HAL_IncTick+0x20>)
 804120e:	781b      	ldrb	r3, [r3, #0]
 8041210:	461a      	mov	r2, r3
 8041212:	4b06      	ldr	r3, [pc, #24]	; (804122c <HAL_IncTick+0x24>)
 8041214:	681b      	ldr	r3, [r3, #0]
 8041216:	4413      	add	r3, r2
 8041218:	4a04      	ldr	r2, [pc, #16]	; (804122c <HAL_IncTick+0x24>)
 804121a:	6013      	str	r3, [r2, #0]
}
 804121c:	bf00      	nop
 804121e:	46bd      	mov	sp, r7
 8041220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041224:	4770      	bx	lr
 8041226:	bf00      	nop
 8041228:	2000001c 	.word	0x2000001c
 804122c:	200001a8 	.word	0x200001a8

08041230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8041230:	b480      	push	{r7}
 8041232:	af00      	add	r7, sp, #0
  return uwTick;
 8041234:	4b03      	ldr	r3, [pc, #12]	; (8041244 <HAL_GetTick+0x14>)
 8041236:	681b      	ldr	r3, [r3, #0]
}
 8041238:	4618      	mov	r0, r3
 804123a:	46bd      	mov	sp, r7
 804123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041240:	4770      	bx	lr
 8041242:	bf00      	nop
 8041244:	200001a8 	.word	0x200001a8

08041248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8041248:	b580      	push	{r7, lr}
 804124a:	b084      	sub	sp, #16
 804124c:	af00      	add	r7, sp, #0
 804124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8041250:	f7ff ffee 	bl	8041230 <HAL_GetTick>
 8041254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8041256:	687b      	ldr	r3, [r7, #4]
 8041258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 804125a:	68fb      	ldr	r3, [r7, #12]
 804125c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8041260:	d005      	beq.n	804126e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8041262:	4b0a      	ldr	r3, [pc, #40]	; (804128c <HAL_Delay+0x44>)
 8041264:	781b      	ldrb	r3, [r3, #0]
 8041266:	461a      	mov	r2, r3
 8041268:	68fb      	ldr	r3, [r7, #12]
 804126a:	4413      	add	r3, r2
 804126c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 804126e:	bf00      	nop
 8041270:	f7ff ffde 	bl	8041230 <HAL_GetTick>
 8041274:	4602      	mov	r2, r0
 8041276:	68bb      	ldr	r3, [r7, #8]
 8041278:	1ad3      	subs	r3, r2, r3
 804127a:	68fa      	ldr	r2, [r7, #12]
 804127c:	429a      	cmp	r2, r3
 804127e:	d8f7      	bhi.n	8041270 <HAL_Delay+0x28>
  {
  }
}
 8041280:	bf00      	nop
 8041282:	bf00      	nop
 8041284:	3710      	adds	r7, #16
 8041286:	46bd      	mov	sp, r7
 8041288:	bd80      	pop	{r7, pc}
 804128a:	bf00      	nop
 804128c:	2000001c 	.word	0x2000001c

08041290 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8041290:	b580      	push	{r7, lr}
 8041292:	b084      	sub	sp, #16
 8041294:	af00      	add	r7, sp, #0
 8041296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8041298:	687b      	ldr	r3, [r7, #4]
 804129a:	2b00      	cmp	r3, #0
 804129c:	d101      	bne.n	80412a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 804129e:	2301      	movs	r3, #1
 80412a0:	e0ed      	b.n	804147e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80412a2:	687b      	ldr	r3, [r7, #4]
 80412a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80412a8:	b2db      	uxtb	r3, r3
 80412aa:	2b00      	cmp	r3, #0
 80412ac:	d102      	bne.n	80412b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80412ae:	6878      	ldr	r0, [r7, #4]
 80412b0:	f7ff fd98 	bl	8040de4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80412b4:	687b      	ldr	r3, [r7, #4]
 80412b6:	681b      	ldr	r3, [r3, #0]
 80412b8:	681a      	ldr	r2, [r3, #0]
 80412ba:	687b      	ldr	r3, [r7, #4]
 80412bc:	681b      	ldr	r3, [r3, #0]
 80412be:	f042 0201 	orr.w	r2, r2, #1
 80412c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80412c4:	f7ff ffb4 	bl	8041230 <HAL_GetTick>
 80412c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80412ca:	e012      	b.n	80412f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80412cc:	f7ff ffb0 	bl	8041230 <HAL_GetTick>
 80412d0:	4602      	mov	r2, r0
 80412d2:	68fb      	ldr	r3, [r7, #12]
 80412d4:	1ad3      	subs	r3, r2, r3
 80412d6:	2b0a      	cmp	r3, #10
 80412d8:	d90b      	bls.n	80412f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80412da:	687b      	ldr	r3, [r7, #4]
 80412dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80412de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80412e2:	687b      	ldr	r3, [r7, #4]
 80412e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80412e6:	687b      	ldr	r3, [r7, #4]
 80412e8:	2205      	movs	r2, #5
 80412ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80412ee:	2301      	movs	r3, #1
 80412f0:	e0c5      	b.n	804147e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80412f2:	687b      	ldr	r3, [r7, #4]
 80412f4:	681b      	ldr	r3, [r3, #0]
 80412f6:	685b      	ldr	r3, [r3, #4]
 80412f8:	f003 0301 	and.w	r3, r3, #1
 80412fc:	2b00      	cmp	r3, #0
 80412fe:	d0e5      	beq.n	80412cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8041300:	687b      	ldr	r3, [r7, #4]
 8041302:	681b      	ldr	r3, [r3, #0]
 8041304:	681a      	ldr	r2, [r3, #0]
 8041306:	687b      	ldr	r3, [r7, #4]
 8041308:	681b      	ldr	r3, [r3, #0]
 804130a:	f022 0202 	bic.w	r2, r2, #2
 804130e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8041310:	f7ff ff8e 	bl	8041230 <HAL_GetTick>
 8041314:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8041316:	e012      	b.n	804133e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8041318:	f7ff ff8a 	bl	8041230 <HAL_GetTick>
 804131c:	4602      	mov	r2, r0
 804131e:	68fb      	ldr	r3, [r7, #12]
 8041320:	1ad3      	subs	r3, r2, r3
 8041322:	2b0a      	cmp	r3, #10
 8041324:	d90b      	bls.n	804133e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8041326:	687b      	ldr	r3, [r7, #4]
 8041328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804132a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 804132e:	687b      	ldr	r3, [r7, #4]
 8041330:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8041332:	687b      	ldr	r3, [r7, #4]
 8041334:	2205      	movs	r2, #5
 8041336:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 804133a:	2301      	movs	r3, #1
 804133c:	e09f      	b.n	804147e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 804133e:	687b      	ldr	r3, [r7, #4]
 8041340:	681b      	ldr	r3, [r3, #0]
 8041342:	685b      	ldr	r3, [r3, #4]
 8041344:	f003 0302 	and.w	r3, r3, #2
 8041348:	2b00      	cmp	r3, #0
 804134a:	d1e5      	bne.n	8041318 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 804134c:	687b      	ldr	r3, [r7, #4]
 804134e:	7e1b      	ldrb	r3, [r3, #24]
 8041350:	2b01      	cmp	r3, #1
 8041352:	d108      	bne.n	8041366 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8041354:	687b      	ldr	r3, [r7, #4]
 8041356:	681b      	ldr	r3, [r3, #0]
 8041358:	681a      	ldr	r2, [r3, #0]
 804135a:	687b      	ldr	r3, [r7, #4]
 804135c:	681b      	ldr	r3, [r3, #0]
 804135e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8041362:	601a      	str	r2, [r3, #0]
 8041364:	e007      	b.n	8041376 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8041366:	687b      	ldr	r3, [r7, #4]
 8041368:	681b      	ldr	r3, [r3, #0]
 804136a:	681a      	ldr	r2, [r3, #0]
 804136c:	687b      	ldr	r3, [r7, #4]
 804136e:	681b      	ldr	r3, [r3, #0]
 8041370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8041374:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8041376:	687b      	ldr	r3, [r7, #4]
 8041378:	7e5b      	ldrb	r3, [r3, #25]
 804137a:	2b01      	cmp	r3, #1
 804137c:	d108      	bne.n	8041390 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 804137e:	687b      	ldr	r3, [r7, #4]
 8041380:	681b      	ldr	r3, [r3, #0]
 8041382:	681a      	ldr	r2, [r3, #0]
 8041384:	687b      	ldr	r3, [r7, #4]
 8041386:	681b      	ldr	r3, [r3, #0]
 8041388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 804138c:	601a      	str	r2, [r3, #0]
 804138e:	e007      	b.n	80413a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8041390:	687b      	ldr	r3, [r7, #4]
 8041392:	681b      	ldr	r3, [r3, #0]
 8041394:	681a      	ldr	r2, [r3, #0]
 8041396:	687b      	ldr	r3, [r7, #4]
 8041398:	681b      	ldr	r3, [r3, #0]
 804139a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804139e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80413a0:	687b      	ldr	r3, [r7, #4]
 80413a2:	7e9b      	ldrb	r3, [r3, #26]
 80413a4:	2b01      	cmp	r3, #1
 80413a6:	d108      	bne.n	80413ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80413a8:	687b      	ldr	r3, [r7, #4]
 80413aa:	681b      	ldr	r3, [r3, #0]
 80413ac:	681a      	ldr	r2, [r3, #0]
 80413ae:	687b      	ldr	r3, [r7, #4]
 80413b0:	681b      	ldr	r3, [r3, #0]
 80413b2:	f042 0220 	orr.w	r2, r2, #32
 80413b6:	601a      	str	r2, [r3, #0]
 80413b8:	e007      	b.n	80413ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80413ba:	687b      	ldr	r3, [r7, #4]
 80413bc:	681b      	ldr	r3, [r3, #0]
 80413be:	681a      	ldr	r2, [r3, #0]
 80413c0:	687b      	ldr	r3, [r7, #4]
 80413c2:	681b      	ldr	r3, [r3, #0]
 80413c4:	f022 0220 	bic.w	r2, r2, #32
 80413c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80413ca:	687b      	ldr	r3, [r7, #4]
 80413cc:	7edb      	ldrb	r3, [r3, #27]
 80413ce:	2b01      	cmp	r3, #1
 80413d0:	d108      	bne.n	80413e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80413d2:	687b      	ldr	r3, [r7, #4]
 80413d4:	681b      	ldr	r3, [r3, #0]
 80413d6:	681a      	ldr	r2, [r3, #0]
 80413d8:	687b      	ldr	r3, [r7, #4]
 80413da:	681b      	ldr	r3, [r3, #0]
 80413dc:	f022 0210 	bic.w	r2, r2, #16
 80413e0:	601a      	str	r2, [r3, #0]
 80413e2:	e007      	b.n	80413f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80413e4:	687b      	ldr	r3, [r7, #4]
 80413e6:	681b      	ldr	r3, [r3, #0]
 80413e8:	681a      	ldr	r2, [r3, #0]
 80413ea:	687b      	ldr	r3, [r7, #4]
 80413ec:	681b      	ldr	r3, [r3, #0]
 80413ee:	f042 0210 	orr.w	r2, r2, #16
 80413f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80413f4:	687b      	ldr	r3, [r7, #4]
 80413f6:	7f1b      	ldrb	r3, [r3, #28]
 80413f8:	2b01      	cmp	r3, #1
 80413fa:	d108      	bne.n	804140e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80413fc:	687b      	ldr	r3, [r7, #4]
 80413fe:	681b      	ldr	r3, [r3, #0]
 8041400:	681a      	ldr	r2, [r3, #0]
 8041402:	687b      	ldr	r3, [r7, #4]
 8041404:	681b      	ldr	r3, [r3, #0]
 8041406:	f042 0208 	orr.w	r2, r2, #8
 804140a:	601a      	str	r2, [r3, #0]
 804140c:	e007      	b.n	804141e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 804140e:	687b      	ldr	r3, [r7, #4]
 8041410:	681b      	ldr	r3, [r3, #0]
 8041412:	681a      	ldr	r2, [r3, #0]
 8041414:	687b      	ldr	r3, [r7, #4]
 8041416:	681b      	ldr	r3, [r3, #0]
 8041418:	f022 0208 	bic.w	r2, r2, #8
 804141c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 804141e:	687b      	ldr	r3, [r7, #4]
 8041420:	7f5b      	ldrb	r3, [r3, #29]
 8041422:	2b01      	cmp	r3, #1
 8041424:	d108      	bne.n	8041438 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8041426:	687b      	ldr	r3, [r7, #4]
 8041428:	681b      	ldr	r3, [r3, #0]
 804142a:	681a      	ldr	r2, [r3, #0]
 804142c:	687b      	ldr	r3, [r7, #4]
 804142e:	681b      	ldr	r3, [r3, #0]
 8041430:	f042 0204 	orr.w	r2, r2, #4
 8041434:	601a      	str	r2, [r3, #0]
 8041436:	e007      	b.n	8041448 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8041438:	687b      	ldr	r3, [r7, #4]
 804143a:	681b      	ldr	r3, [r3, #0]
 804143c:	681a      	ldr	r2, [r3, #0]
 804143e:	687b      	ldr	r3, [r7, #4]
 8041440:	681b      	ldr	r3, [r3, #0]
 8041442:	f022 0204 	bic.w	r2, r2, #4
 8041446:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8041448:	687b      	ldr	r3, [r7, #4]
 804144a:	689a      	ldr	r2, [r3, #8]
 804144c:	687b      	ldr	r3, [r7, #4]
 804144e:	68db      	ldr	r3, [r3, #12]
 8041450:	431a      	orrs	r2, r3
 8041452:	687b      	ldr	r3, [r7, #4]
 8041454:	691b      	ldr	r3, [r3, #16]
 8041456:	431a      	orrs	r2, r3
 8041458:	687b      	ldr	r3, [r7, #4]
 804145a:	695b      	ldr	r3, [r3, #20]
 804145c:	ea42 0103 	orr.w	r1, r2, r3
 8041460:	687b      	ldr	r3, [r7, #4]
 8041462:	685b      	ldr	r3, [r3, #4]
 8041464:	1e5a      	subs	r2, r3, #1
 8041466:	687b      	ldr	r3, [r7, #4]
 8041468:	681b      	ldr	r3, [r3, #0]
 804146a:	430a      	orrs	r2, r1
 804146c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 804146e:	687b      	ldr	r3, [r7, #4]
 8041470:	2200      	movs	r2, #0
 8041472:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8041474:	687b      	ldr	r3, [r7, #4]
 8041476:	2201      	movs	r2, #1
 8041478:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 804147c:	2300      	movs	r3, #0
}
 804147e:	4618      	mov	r0, r3
 8041480:	3710      	adds	r7, #16
 8041482:	46bd      	mov	sp, r7
 8041484:	bd80      	pop	{r7, pc}
	...

08041488 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8041488:	b480      	push	{r7}
 804148a:	b087      	sub	sp, #28
 804148c:	af00      	add	r7, sp, #0
 804148e:	6078      	str	r0, [r7, #4]
 8041490:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8041492:	687b      	ldr	r3, [r7, #4]
 8041494:	681b      	ldr	r3, [r3, #0]
 8041496:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8041498:	687b      	ldr	r3, [r7, #4]
 804149a:	f893 3020 	ldrb.w	r3, [r3, #32]
 804149e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80414a0:	7cfb      	ldrb	r3, [r7, #19]
 80414a2:	2b01      	cmp	r3, #1
 80414a4:	d003      	beq.n	80414ae <HAL_CAN_ConfigFilter+0x26>
 80414a6:	7cfb      	ldrb	r3, [r7, #19]
 80414a8:	2b02      	cmp	r3, #2
 80414aa:	f040 80c7 	bne.w	804163c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80414ae:	687b      	ldr	r3, [r7, #4]
 80414b0:	681b      	ldr	r3, [r3, #0]
 80414b2:	4a69      	ldr	r2, [pc, #420]	; (8041658 <HAL_CAN_ConfigFilter+0x1d0>)
 80414b4:	4293      	cmp	r3, r2
 80414b6:	d001      	beq.n	80414bc <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80414b8:	4b68      	ldr	r3, [pc, #416]	; (804165c <HAL_CAN_ConfigFilter+0x1d4>)
 80414ba:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80414bc:	697b      	ldr	r3, [r7, #20]
 80414be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80414c2:	f043 0201 	orr.w	r2, r3, #1
 80414c6:	697b      	ldr	r3, [r7, #20]
 80414c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80414cc:	697b      	ldr	r3, [r7, #20]
 80414ce:	4a63      	ldr	r2, [pc, #396]	; (804165c <HAL_CAN_ConfigFilter+0x1d4>)
 80414d0:	4293      	cmp	r3, r2
 80414d2:	d111      	bne.n	80414f8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80414d4:	697b      	ldr	r3, [r7, #20]
 80414d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80414da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80414de:	697b      	ldr	r3, [r7, #20]
 80414e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80414e4:	697b      	ldr	r3, [r7, #20]
 80414e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80414ea:	683b      	ldr	r3, [r7, #0]
 80414ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80414ee:	021b      	lsls	r3, r3, #8
 80414f0:	431a      	orrs	r2, r3
 80414f2:	697b      	ldr	r3, [r7, #20]
 80414f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80414f8:	683b      	ldr	r3, [r7, #0]
 80414fa:	695b      	ldr	r3, [r3, #20]
 80414fc:	f003 031f 	and.w	r3, r3, #31
 8041500:	2201      	movs	r2, #1
 8041502:	fa02 f303 	lsl.w	r3, r2, r3
 8041506:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8041508:	697b      	ldr	r3, [r7, #20]
 804150a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 804150e:	68fb      	ldr	r3, [r7, #12]
 8041510:	43db      	mvns	r3, r3
 8041512:	401a      	ands	r2, r3
 8041514:	697b      	ldr	r3, [r7, #20]
 8041516:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 804151a:	683b      	ldr	r3, [r7, #0]
 804151c:	69db      	ldr	r3, [r3, #28]
 804151e:	2b00      	cmp	r3, #0
 8041520:	d123      	bne.n	804156a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8041522:	697b      	ldr	r3, [r7, #20]
 8041524:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8041528:	68fb      	ldr	r3, [r7, #12]
 804152a:	43db      	mvns	r3, r3
 804152c:	401a      	ands	r2, r3
 804152e:	697b      	ldr	r3, [r7, #20]
 8041530:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8041534:	683b      	ldr	r3, [r7, #0]
 8041536:	68db      	ldr	r3, [r3, #12]
 8041538:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 804153a:	683b      	ldr	r3, [r7, #0]
 804153c:	685b      	ldr	r3, [r3, #4]
 804153e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8041540:	683a      	ldr	r2, [r7, #0]
 8041542:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8041544:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8041546:	697b      	ldr	r3, [r7, #20]
 8041548:	3248      	adds	r2, #72	; 0x48
 804154a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 804154e:	683b      	ldr	r3, [r7, #0]
 8041550:	689b      	ldr	r3, [r3, #8]
 8041552:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8041554:	683b      	ldr	r3, [r7, #0]
 8041556:	681b      	ldr	r3, [r3, #0]
 8041558:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 804155a:	683b      	ldr	r3, [r7, #0]
 804155c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 804155e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8041560:	6979      	ldr	r1, [r7, #20]
 8041562:	3348      	adds	r3, #72	; 0x48
 8041564:	00db      	lsls	r3, r3, #3
 8041566:	440b      	add	r3, r1
 8041568:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 804156a:	683b      	ldr	r3, [r7, #0]
 804156c:	69db      	ldr	r3, [r3, #28]
 804156e:	2b01      	cmp	r3, #1
 8041570:	d122      	bne.n	80415b8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8041572:	697b      	ldr	r3, [r7, #20]
 8041574:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8041578:	68fb      	ldr	r3, [r7, #12]
 804157a:	431a      	orrs	r2, r3
 804157c:	697b      	ldr	r3, [r7, #20]
 804157e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8041582:	683b      	ldr	r3, [r7, #0]
 8041584:	681b      	ldr	r3, [r3, #0]
 8041586:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8041588:	683b      	ldr	r3, [r7, #0]
 804158a:	685b      	ldr	r3, [r3, #4]
 804158c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 804158e:	683a      	ldr	r2, [r7, #0]
 8041590:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8041592:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8041594:	697b      	ldr	r3, [r7, #20]
 8041596:	3248      	adds	r2, #72	; 0x48
 8041598:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 804159c:	683b      	ldr	r3, [r7, #0]
 804159e:	689b      	ldr	r3, [r3, #8]
 80415a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80415a2:	683b      	ldr	r3, [r7, #0]
 80415a4:	68db      	ldr	r3, [r3, #12]
 80415a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80415a8:	683b      	ldr	r3, [r7, #0]
 80415aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80415ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80415ae:	6979      	ldr	r1, [r7, #20]
 80415b0:	3348      	adds	r3, #72	; 0x48
 80415b2:	00db      	lsls	r3, r3, #3
 80415b4:	440b      	add	r3, r1
 80415b6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80415b8:	683b      	ldr	r3, [r7, #0]
 80415ba:	699b      	ldr	r3, [r3, #24]
 80415bc:	2b00      	cmp	r3, #0
 80415be:	d109      	bne.n	80415d4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80415c0:	697b      	ldr	r3, [r7, #20]
 80415c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80415c6:	68fb      	ldr	r3, [r7, #12]
 80415c8:	43db      	mvns	r3, r3
 80415ca:	401a      	ands	r2, r3
 80415cc:	697b      	ldr	r3, [r7, #20]
 80415ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80415d2:	e007      	b.n	80415e4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80415d4:	697b      	ldr	r3, [r7, #20]
 80415d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80415da:	68fb      	ldr	r3, [r7, #12]
 80415dc:	431a      	orrs	r2, r3
 80415de:	697b      	ldr	r3, [r7, #20]
 80415e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80415e4:	683b      	ldr	r3, [r7, #0]
 80415e6:	691b      	ldr	r3, [r3, #16]
 80415e8:	2b00      	cmp	r3, #0
 80415ea:	d109      	bne.n	8041600 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80415ec:	697b      	ldr	r3, [r7, #20]
 80415ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80415f2:	68fb      	ldr	r3, [r7, #12]
 80415f4:	43db      	mvns	r3, r3
 80415f6:	401a      	ands	r2, r3
 80415f8:	697b      	ldr	r3, [r7, #20]
 80415fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80415fe:	e007      	b.n	8041610 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8041600:	697b      	ldr	r3, [r7, #20]
 8041602:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8041606:	68fb      	ldr	r3, [r7, #12]
 8041608:	431a      	orrs	r2, r3
 804160a:	697b      	ldr	r3, [r7, #20]
 804160c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8041610:	683b      	ldr	r3, [r7, #0]
 8041612:	6a1b      	ldr	r3, [r3, #32]
 8041614:	2b01      	cmp	r3, #1
 8041616:	d107      	bne.n	8041628 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8041618:	697b      	ldr	r3, [r7, #20]
 804161a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 804161e:	68fb      	ldr	r3, [r7, #12]
 8041620:	431a      	orrs	r2, r3
 8041622:	697b      	ldr	r3, [r7, #20]
 8041624:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8041628:	697b      	ldr	r3, [r7, #20]
 804162a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 804162e:	f023 0201 	bic.w	r2, r3, #1
 8041632:	697b      	ldr	r3, [r7, #20]
 8041634:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8041638:	2300      	movs	r3, #0
 804163a:	e006      	b.n	804164a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 804163c:	687b      	ldr	r3, [r7, #4]
 804163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041640:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8041644:	687b      	ldr	r3, [r7, #4]
 8041646:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8041648:	2301      	movs	r3, #1
  }
}
 804164a:	4618      	mov	r0, r3
 804164c:	371c      	adds	r7, #28
 804164e:	46bd      	mov	sp, r7
 8041650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041654:	4770      	bx	lr
 8041656:	bf00      	nop
 8041658:	40003400 	.word	0x40003400
 804165c:	40006400 	.word	0x40006400

08041660 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8041660:	b580      	push	{r7, lr}
 8041662:	b084      	sub	sp, #16
 8041664:	af00      	add	r7, sp, #0
 8041666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8041668:	687b      	ldr	r3, [r7, #4]
 804166a:	f893 3020 	ldrb.w	r3, [r3, #32]
 804166e:	b2db      	uxtb	r3, r3
 8041670:	2b01      	cmp	r3, #1
 8041672:	d12e      	bne.n	80416d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8041674:	687b      	ldr	r3, [r7, #4]
 8041676:	2202      	movs	r2, #2
 8041678:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 804167c:	687b      	ldr	r3, [r7, #4]
 804167e:	681b      	ldr	r3, [r3, #0]
 8041680:	681a      	ldr	r2, [r3, #0]
 8041682:	687b      	ldr	r3, [r7, #4]
 8041684:	681b      	ldr	r3, [r3, #0]
 8041686:	f022 0201 	bic.w	r2, r2, #1
 804168a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 804168c:	f7ff fdd0 	bl	8041230 <HAL_GetTick>
 8041690:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8041692:	e012      	b.n	80416ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8041694:	f7ff fdcc 	bl	8041230 <HAL_GetTick>
 8041698:	4602      	mov	r2, r0
 804169a:	68fb      	ldr	r3, [r7, #12]
 804169c:	1ad3      	subs	r3, r2, r3
 804169e:	2b0a      	cmp	r3, #10
 80416a0:	d90b      	bls.n	80416ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80416a2:	687b      	ldr	r3, [r7, #4]
 80416a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80416a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80416aa:	687b      	ldr	r3, [r7, #4]
 80416ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80416ae:	687b      	ldr	r3, [r7, #4]
 80416b0:	2205      	movs	r2, #5
 80416b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80416b6:	2301      	movs	r3, #1
 80416b8:	e012      	b.n	80416e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80416ba:	687b      	ldr	r3, [r7, #4]
 80416bc:	681b      	ldr	r3, [r3, #0]
 80416be:	685b      	ldr	r3, [r3, #4]
 80416c0:	f003 0301 	and.w	r3, r3, #1
 80416c4:	2b00      	cmp	r3, #0
 80416c6:	d1e5      	bne.n	8041694 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80416c8:	687b      	ldr	r3, [r7, #4]
 80416ca:	2200      	movs	r2, #0
 80416cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80416ce:	2300      	movs	r3, #0
 80416d0:	e006      	b.n	80416e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80416d2:	687b      	ldr	r3, [r7, #4]
 80416d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80416d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80416da:	687b      	ldr	r3, [r7, #4]
 80416dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80416de:	2301      	movs	r3, #1
  }
}
 80416e0:	4618      	mov	r0, r3
 80416e2:	3710      	adds	r7, #16
 80416e4:	46bd      	mov	sp, r7
 80416e6:	bd80      	pop	{r7, pc}

080416e8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80416e8:	b480      	push	{r7}
 80416ea:	b089      	sub	sp, #36	; 0x24
 80416ec:	af00      	add	r7, sp, #0
 80416ee:	60f8      	str	r0, [r7, #12]
 80416f0:	60b9      	str	r1, [r7, #8]
 80416f2:	607a      	str	r2, [r7, #4]
 80416f4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80416f6:	68fb      	ldr	r3, [r7, #12]
 80416f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80416fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80416fe:	68fb      	ldr	r3, [r7, #12]
 8041700:	681b      	ldr	r3, [r3, #0]
 8041702:	689b      	ldr	r3, [r3, #8]
 8041704:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8041706:	7ffb      	ldrb	r3, [r7, #31]
 8041708:	2b01      	cmp	r3, #1
 804170a:	d003      	beq.n	8041714 <HAL_CAN_AddTxMessage+0x2c>
 804170c:	7ffb      	ldrb	r3, [r7, #31]
 804170e:	2b02      	cmp	r3, #2
 8041710:	f040 80ad 	bne.w	804186e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8041714:	69bb      	ldr	r3, [r7, #24]
 8041716:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 804171a:	2b00      	cmp	r3, #0
 804171c:	d10a      	bne.n	8041734 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 804171e:	69bb      	ldr	r3, [r7, #24]
 8041720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8041724:	2b00      	cmp	r3, #0
 8041726:	d105      	bne.n	8041734 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8041728:	69bb      	ldr	r3, [r7, #24]
 804172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 804172e:	2b00      	cmp	r3, #0
 8041730:	f000 8095 	beq.w	804185e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8041734:	69bb      	ldr	r3, [r7, #24]
 8041736:	0e1b      	lsrs	r3, r3, #24
 8041738:	f003 0303 	and.w	r3, r3, #3
 804173c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 804173e:	2201      	movs	r2, #1
 8041740:	697b      	ldr	r3, [r7, #20]
 8041742:	409a      	lsls	r2, r3
 8041744:	683b      	ldr	r3, [r7, #0]
 8041746:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8041748:	68bb      	ldr	r3, [r7, #8]
 804174a:	689b      	ldr	r3, [r3, #8]
 804174c:	2b00      	cmp	r3, #0
 804174e:	d10d      	bne.n	804176c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8041750:	68bb      	ldr	r3, [r7, #8]
 8041752:	681b      	ldr	r3, [r3, #0]
 8041754:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8041756:	68bb      	ldr	r3, [r7, #8]
 8041758:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 804175a:	68f9      	ldr	r1, [r7, #12]
 804175c:	6809      	ldr	r1, [r1, #0]
 804175e:	431a      	orrs	r2, r3
 8041760:	697b      	ldr	r3, [r7, #20]
 8041762:	3318      	adds	r3, #24
 8041764:	011b      	lsls	r3, r3, #4
 8041766:	440b      	add	r3, r1
 8041768:	601a      	str	r2, [r3, #0]
 804176a:	e00f      	b.n	804178c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 804176c:	68bb      	ldr	r3, [r7, #8]
 804176e:	685b      	ldr	r3, [r3, #4]
 8041770:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8041772:	68bb      	ldr	r3, [r7, #8]
 8041774:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8041776:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8041778:	68bb      	ldr	r3, [r7, #8]
 804177a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 804177c:	68f9      	ldr	r1, [r7, #12]
 804177e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8041780:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8041782:	697b      	ldr	r3, [r7, #20]
 8041784:	3318      	adds	r3, #24
 8041786:	011b      	lsls	r3, r3, #4
 8041788:	440b      	add	r3, r1
 804178a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 804178c:	68fb      	ldr	r3, [r7, #12]
 804178e:	6819      	ldr	r1, [r3, #0]
 8041790:	68bb      	ldr	r3, [r7, #8]
 8041792:	691a      	ldr	r2, [r3, #16]
 8041794:	697b      	ldr	r3, [r7, #20]
 8041796:	3318      	adds	r3, #24
 8041798:	011b      	lsls	r3, r3, #4
 804179a:	440b      	add	r3, r1
 804179c:	3304      	adds	r3, #4
 804179e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80417a0:	68bb      	ldr	r3, [r7, #8]
 80417a2:	7d1b      	ldrb	r3, [r3, #20]
 80417a4:	2b01      	cmp	r3, #1
 80417a6:	d111      	bne.n	80417cc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80417a8:	68fb      	ldr	r3, [r7, #12]
 80417aa:	681a      	ldr	r2, [r3, #0]
 80417ac:	697b      	ldr	r3, [r7, #20]
 80417ae:	3318      	adds	r3, #24
 80417b0:	011b      	lsls	r3, r3, #4
 80417b2:	4413      	add	r3, r2
 80417b4:	3304      	adds	r3, #4
 80417b6:	681b      	ldr	r3, [r3, #0]
 80417b8:	68fa      	ldr	r2, [r7, #12]
 80417ba:	6811      	ldr	r1, [r2, #0]
 80417bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80417c0:	697b      	ldr	r3, [r7, #20]
 80417c2:	3318      	adds	r3, #24
 80417c4:	011b      	lsls	r3, r3, #4
 80417c6:	440b      	add	r3, r1
 80417c8:	3304      	adds	r3, #4
 80417ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80417cc:	687b      	ldr	r3, [r7, #4]
 80417ce:	3307      	adds	r3, #7
 80417d0:	781b      	ldrb	r3, [r3, #0]
 80417d2:	061a      	lsls	r2, r3, #24
 80417d4:	687b      	ldr	r3, [r7, #4]
 80417d6:	3306      	adds	r3, #6
 80417d8:	781b      	ldrb	r3, [r3, #0]
 80417da:	041b      	lsls	r3, r3, #16
 80417dc:	431a      	orrs	r2, r3
 80417de:	687b      	ldr	r3, [r7, #4]
 80417e0:	3305      	adds	r3, #5
 80417e2:	781b      	ldrb	r3, [r3, #0]
 80417e4:	021b      	lsls	r3, r3, #8
 80417e6:	4313      	orrs	r3, r2
 80417e8:	687a      	ldr	r2, [r7, #4]
 80417ea:	3204      	adds	r2, #4
 80417ec:	7812      	ldrb	r2, [r2, #0]
 80417ee:	4610      	mov	r0, r2
 80417f0:	68fa      	ldr	r2, [r7, #12]
 80417f2:	6811      	ldr	r1, [r2, #0]
 80417f4:	ea43 0200 	orr.w	r2, r3, r0
 80417f8:	697b      	ldr	r3, [r7, #20]
 80417fa:	011b      	lsls	r3, r3, #4
 80417fc:	440b      	add	r3, r1
 80417fe:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8041802:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8041804:	687b      	ldr	r3, [r7, #4]
 8041806:	3303      	adds	r3, #3
 8041808:	781b      	ldrb	r3, [r3, #0]
 804180a:	061a      	lsls	r2, r3, #24
 804180c:	687b      	ldr	r3, [r7, #4]
 804180e:	3302      	adds	r3, #2
 8041810:	781b      	ldrb	r3, [r3, #0]
 8041812:	041b      	lsls	r3, r3, #16
 8041814:	431a      	orrs	r2, r3
 8041816:	687b      	ldr	r3, [r7, #4]
 8041818:	3301      	adds	r3, #1
 804181a:	781b      	ldrb	r3, [r3, #0]
 804181c:	021b      	lsls	r3, r3, #8
 804181e:	4313      	orrs	r3, r2
 8041820:	687a      	ldr	r2, [r7, #4]
 8041822:	7812      	ldrb	r2, [r2, #0]
 8041824:	4610      	mov	r0, r2
 8041826:	68fa      	ldr	r2, [r7, #12]
 8041828:	6811      	ldr	r1, [r2, #0]
 804182a:	ea43 0200 	orr.w	r2, r3, r0
 804182e:	697b      	ldr	r3, [r7, #20]
 8041830:	011b      	lsls	r3, r3, #4
 8041832:	440b      	add	r3, r1
 8041834:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8041838:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 804183a:	68fb      	ldr	r3, [r7, #12]
 804183c:	681a      	ldr	r2, [r3, #0]
 804183e:	697b      	ldr	r3, [r7, #20]
 8041840:	3318      	adds	r3, #24
 8041842:	011b      	lsls	r3, r3, #4
 8041844:	4413      	add	r3, r2
 8041846:	681b      	ldr	r3, [r3, #0]
 8041848:	68fa      	ldr	r2, [r7, #12]
 804184a:	6811      	ldr	r1, [r2, #0]
 804184c:	f043 0201 	orr.w	r2, r3, #1
 8041850:	697b      	ldr	r3, [r7, #20]
 8041852:	3318      	adds	r3, #24
 8041854:	011b      	lsls	r3, r3, #4
 8041856:	440b      	add	r3, r1
 8041858:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 804185a:	2300      	movs	r3, #0
 804185c:	e00e      	b.n	804187c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 804185e:	68fb      	ldr	r3, [r7, #12]
 8041860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041862:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8041866:	68fb      	ldr	r3, [r7, #12]
 8041868:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 804186a:	2301      	movs	r3, #1
 804186c:	e006      	b.n	804187c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 804186e:	68fb      	ldr	r3, [r7, #12]
 8041870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041872:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8041876:	68fb      	ldr	r3, [r7, #12]
 8041878:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 804187a:	2301      	movs	r3, #1
  }
}
 804187c:	4618      	mov	r0, r3
 804187e:	3724      	adds	r7, #36	; 0x24
 8041880:	46bd      	mov	sp, r7
 8041882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041886:	4770      	bx	lr

08041888 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8041888:	b480      	push	{r7}
 804188a:	b087      	sub	sp, #28
 804188c:	af00      	add	r7, sp, #0
 804188e:	60f8      	str	r0, [r7, #12]
 8041890:	60b9      	str	r1, [r7, #8]
 8041892:	607a      	str	r2, [r7, #4]
 8041894:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8041896:	68fb      	ldr	r3, [r7, #12]
 8041898:	f893 3020 	ldrb.w	r3, [r3, #32]
 804189c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 804189e:	7dfb      	ldrb	r3, [r7, #23]
 80418a0:	2b01      	cmp	r3, #1
 80418a2:	d003      	beq.n	80418ac <HAL_CAN_GetRxMessage+0x24>
 80418a4:	7dfb      	ldrb	r3, [r7, #23]
 80418a6:	2b02      	cmp	r3, #2
 80418a8:	f040 80f3 	bne.w	8041a92 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80418ac:	68bb      	ldr	r3, [r7, #8]
 80418ae:	2b00      	cmp	r3, #0
 80418b0:	d10e      	bne.n	80418d0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80418b2:	68fb      	ldr	r3, [r7, #12]
 80418b4:	681b      	ldr	r3, [r3, #0]
 80418b6:	68db      	ldr	r3, [r3, #12]
 80418b8:	f003 0303 	and.w	r3, r3, #3
 80418bc:	2b00      	cmp	r3, #0
 80418be:	d116      	bne.n	80418ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80418c0:	68fb      	ldr	r3, [r7, #12]
 80418c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80418c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80418c8:	68fb      	ldr	r3, [r7, #12]
 80418ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80418cc:	2301      	movs	r3, #1
 80418ce:	e0e7      	b.n	8041aa0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80418d0:	68fb      	ldr	r3, [r7, #12]
 80418d2:	681b      	ldr	r3, [r3, #0]
 80418d4:	691b      	ldr	r3, [r3, #16]
 80418d6:	f003 0303 	and.w	r3, r3, #3
 80418da:	2b00      	cmp	r3, #0
 80418dc:	d107      	bne.n	80418ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80418de:	68fb      	ldr	r3, [r7, #12]
 80418e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80418e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80418e6:	68fb      	ldr	r3, [r7, #12]
 80418e8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80418ea:	2301      	movs	r3, #1
 80418ec:	e0d8      	b.n	8041aa0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80418ee:	68fb      	ldr	r3, [r7, #12]
 80418f0:	681a      	ldr	r2, [r3, #0]
 80418f2:	68bb      	ldr	r3, [r7, #8]
 80418f4:	331b      	adds	r3, #27
 80418f6:	011b      	lsls	r3, r3, #4
 80418f8:	4413      	add	r3, r2
 80418fa:	681b      	ldr	r3, [r3, #0]
 80418fc:	f003 0204 	and.w	r2, r3, #4
 8041900:	687b      	ldr	r3, [r7, #4]
 8041902:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8041904:	687b      	ldr	r3, [r7, #4]
 8041906:	689b      	ldr	r3, [r3, #8]
 8041908:	2b00      	cmp	r3, #0
 804190a:	d10c      	bne.n	8041926 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 804190c:	68fb      	ldr	r3, [r7, #12]
 804190e:	681a      	ldr	r2, [r3, #0]
 8041910:	68bb      	ldr	r3, [r7, #8]
 8041912:	331b      	adds	r3, #27
 8041914:	011b      	lsls	r3, r3, #4
 8041916:	4413      	add	r3, r2
 8041918:	681b      	ldr	r3, [r3, #0]
 804191a:	0d5b      	lsrs	r3, r3, #21
 804191c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8041920:	687b      	ldr	r3, [r7, #4]
 8041922:	601a      	str	r2, [r3, #0]
 8041924:	e00b      	b.n	804193e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8041926:	68fb      	ldr	r3, [r7, #12]
 8041928:	681a      	ldr	r2, [r3, #0]
 804192a:	68bb      	ldr	r3, [r7, #8]
 804192c:	331b      	adds	r3, #27
 804192e:	011b      	lsls	r3, r3, #4
 8041930:	4413      	add	r3, r2
 8041932:	681b      	ldr	r3, [r3, #0]
 8041934:	08db      	lsrs	r3, r3, #3
 8041936:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 804193a:	687b      	ldr	r3, [r7, #4]
 804193c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 804193e:	68fb      	ldr	r3, [r7, #12]
 8041940:	681a      	ldr	r2, [r3, #0]
 8041942:	68bb      	ldr	r3, [r7, #8]
 8041944:	331b      	adds	r3, #27
 8041946:	011b      	lsls	r3, r3, #4
 8041948:	4413      	add	r3, r2
 804194a:	681b      	ldr	r3, [r3, #0]
 804194c:	f003 0202 	and.w	r2, r3, #2
 8041950:	687b      	ldr	r3, [r7, #4]
 8041952:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8041954:	68fb      	ldr	r3, [r7, #12]
 8041956:	681a      	ldr	r2, [r3, #0]
 8041958:	68bb      	ldr	r3, [r7, #8]
 804195a:	331b      	adds	r3, #27
 804195c:	011b      	lsls	r3, r3, #4
 804195e:	4413      	add	r3, r2
 8041960:	3304      	adds	r3, #4
 8041962:	681b      	ldr	r3, [r3, #0]
 8041964:	f003 020f 	and.w	r2, r3, #15
 8041968:	687b      	ldr	r3, [r7, #4]
 804196a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 804196c:	68fb      	ldr	r3, [r7, #12]
 804196e:	681a      	ldr	r2, [r3, #0]
 8041970:	68bb      	ldr	r3, [r7, #8]
 8041972:	331b      	adds	r3, #27
 8041974:	011b      	lsls	r3, r3, #4
 8041976:	4413      	add	r3, r2
 8041978:	3304      	adds	r3, #4
 804197a:	681b      	ldr	r3, [r3, #0]
 804197c:	0a1b      	lsrs	r3, r3, #8
 804197e:	b2da      	uxtb	r2, r3
 8041980:	687b      	ldr	r3, [r7, #4]
 8041982:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8041984:	68fb      	ldr	r3, [r7, #12]
 8041986:	681a      	ldr	r2, [r3, #0]
 8041988:	68bb      	ldr	r3, [r7, #8]
 804198a:	331b      	adds	r3, #27
 804198c:	011b      	lsls	r3, r3, #4
 804198e:	4413      	add	r3, r2
 8041990:	3304      	adds	r3, #4
 8041992:	681b      	ldr	r3, [r3, #0]
 8041994:	0c1b      	lsrs	r3, r3, #16
 8041996:	b29a      	uxth	r2, r3
 8041998:	687b      	ldr	r3, [r7, #4]
 804199a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 804199c:	68fb      	ldr	r3, [r7, #12]
 804199e:	681a      	ldr	r2, [r3, #0]
 80419a0:	68bb      	ldr	r3, [r7, #8]
 80419a2:	011b      	lsls	r3, r3, #4
 80419a4:	4413      	add	r3, r2
 80419a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80419aa:	681b      	ldr	r3, [r3, #0]
 80419ac:	b2da      	uxtb	r2, r3
 80419ae:	683b      	ldr	r3, [r7, #0]
 80419b0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80419b2:	68fb      	ldr	r3, [r7, #12]
 80419b4:	681a      	ldr	r2, [r3, #0]
 80419b6:	68bb      	ldr	r3, [r7, #8]
 80419b8:	011b      	lsls	r3, r3, #4
 80419ba:	4413      	add	r3, r2
 80419bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80419c0:	681b      	ldr	r3, [r3, #0]
 80419c2:	0a1a      	lsrs	r2, r3, #8
 80419c4:	683b      	ldr	r3, [r7, #0]
 80419c6:	3301      	adds	r3, #1
 80419c8:	b2d2      	uxtb	r2, r2
 80419ca:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80419cc:	68fb      	ldr	r3, [r7, #12]
 80419ce:	681a      	ldr	r2, [r3, #0]
 80419d0:	68bb      	ldr	r3, [r7, #8]
 80419d2:	011b      	lsls	r3, r3, #4
 80419d4:	4413      	add	r3, r2
 80419d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80419da:	681b      	ldr	r3, [r3, #0]
 80419dc:	0c1a      	lsrs	r2, r3, #16
 80419de:	683b      	ldr	r3, [r7, #0]
 80419e0:	3302      	adds	r3, #2
 80419e2:	b2d2      	uxtb	r2, r2
 80419e4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80419e6:	68fb      	ldr	r3, [r7, #12]
 80419e8:	681a      	ldr	r2, [r3, #0]
 80419ea:	68bb      	ldr	r3, [r7, #8]
 80419ec:	011b      	lsls	r3, r3, #4
 80419ee:	4413      	add	r3, r2
 80419f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80419f4:	681b      	ldr	r3, [r3, #0]
 80419f6:	0e1a      	lsrs	r2, r3, #24
 80419f8:	683b      	ldr	r3, [r7, #0]
 80419fa:	3303      	adds	r3, #3
 80419fc:	b2d2      	uxtb	r2, r2
 80419fe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8041a00:	68fb      	ldr	r3, [r7, #12]
 8041a02:	681a      	ldr	r2, [r3, #0]
 8041a04:	68bb      	ldr	r3, [r7, #8]
 8041a06:	011b      	lsls	r3, r3, #4
 8041a08:	4413      	add	r3, r2
 8041a0a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8041a0e:	681a      	ldr	r2, [r3, #0]
 8041a10:	683b      	ldr	r3, [r7, #0]
 8041a12:	3304      	adds	r3, #4
 8041a14:	b2d2      	uxtb	r2, r2
 8041a16:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8041a18:	68fb      	ldr	r3, [r7, #12]
 8041a1a:	681a      	ldr	r2, [r3, #0]
 8041a1c:	68bb      	ldr	r3, [r7, #8]
 8041a1e:	011b      	lsls	r3, r3, #4
 8041a20:	4413      	add	r3, r2
 8041a22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8041a26:	681b      	ldr	r3, [r3, #0]
 8041a28:	0a1a      	lsrs	r2, r3, #8
 8041a2a:	683b      	ldr	r3, [r7, #0]
 8041a2c:	3305      	adds	r3, #5
 8041a2e:	b2d2      	uxtb	r2, r2
 8041a30:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8041a32:	68fb      	ldr	r3, [r7, #12]
 8041a34:	681a      	ldr	r2, [r3, #0]
 8041a36:	68bb      	ldr	r3, [r7, #8]
 8041a38:	011b      	lsls	r3, r3, #4
 8041a3a:	4413      	add	r3, r2
 8041a3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8041a40:	681b      	ldr	r3, [r3, #0]
 8041a42:	0c1a      	lsrs	r2, r3, #16
 8041a44:	683b      	ldr	r3, [r7, #0]
 8041a46:	3306      	adds	r3, #6
 8041a48:	b2d2      	uxtb	r2, r2
 8041a4a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8041a4c:	68fb      	ldr	r3, [r7, #12]
 8041a4e:	681a      	ldr	r2, [r3, #0]
 8041a50:	68bb      	ldr	r3, [r7, #8]
 8041a52:	011b      	lsls	r3, r3, #4
 8041a54:	4413      	add	r3, r2
 8041a56:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8041a5a:	681b      	ldr	r3, [r3, #0]
 8041a5c:	0e1a      	lsrs	r2, r3, #24
 8041a5e:	683b      	ldr	r3, [r7, #0]
 8041a60:	3307      	adds	r3, #7
 8041a62:	b2d2      	uxtb	r2, r2
 8041a64:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8041a66:	68bb      	ldr	r3, [r7, #8]
 8041a68:	2b00      	cmp	r3, #0
 8041a6a:	d108      	bne.n	8041a7e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8041a6c:	68fb      	ldr	r3, [r7, #12]
 8041a6e:	681b      	ldr	r3, [r3, #0]
 8041a70:	68da      	ldr	r2, [r3, #12]
 8041a72:	68fb      	ldr	r3, [r7, #12]
 8041a74:	681b      	ldr	r3, [r3, #0]
 8041a76:	f042 0220 	orr.w	r2, r2, #32
 8041a7a:	60da      	str	r2, [r3, #12]
 8041a7c:	e007      	b.n	8041a8e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8041a7e:	68fb      	ldr	r3, [r7, #12]
 8041a80:	681b      	ldr	r3, [r3, #0]
 8041a82:	691a      	ldr	r2, [r3, #16]
 8041a84:	68fb      	ldr	r3, [r7, #12]
 8041a86:	681b      	ldr	r3, [r3, #0]
 8041a88:	f042 0220 	orr.w	r2, r2, #32
 8041a8c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8041a8e:	2300      	movs	r3, #0
 8041a90:	e006      	b.n	8041aa0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8041a92:	68fb      	ldr	r3, [r7, #12]
 8041a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041a96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8041a9a:	68fb      	ldr	r3, [r7, #12]
 8041a9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8041a9e:	2301      	movs	r3, #1
  }
}
 8041aa0:	4618      	mov	r0, r3
 8041aa2:	371c      	adds	r7, #28
 8041aa4:	46bd      	mov	sp, r7
 8041aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041aaa:	4770      	bx	lr

08041aac <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8041aac:	b480      	push	{r7}
 8041aae:	b085      	sub	sp, #20
 8041ab0:	af00      	add	r7, sp, #0
 8041ab2:	6078      	str	r0, [r7, #4]
 8041ab4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8041ab6:	687b      	ldr	r3, [r7, #4]
 8041ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8041abc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8041abe:	7bfb      	ldrb	r3, [r7, #15]
 8041ac0:	2b01      	cmp	r3, #1
 8041ac2:	d002      	beq.n	8041aca <HAL_CAN_ActivateNotification+0x1e>
 8041ac4:	7bfb      	ldrb	r3, [r7, #15]
 8041ac6:	2b02      	cmp	r3, #2
 8041ac8:	d109      	bne.n	8041ade <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8041aca:	687b      	ldr	r3, [r7, #4]
 8041acc:	681b      	ldr	r3, [r3, #0]
 8041ace:	6959      	ldr	r1, [r3, #20]
 8041ad0:	687b      	ldr	r3, [r7, #4]
 8041ad2:	681b      	ldr	r3, [r3, #0]
 8041ad4:	683a      	ldr	r2, [r7, #0]
 8041ad6:	430a      	orrs	r2, r1
 8041ad8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8041ada:	2300      	movs	r3, #0
 8041adc:	e006      	b.n	8041aec <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8041ade:	687b      	ldr	r3, [r7, #4]
 8041ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041ae2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8041ae6:	687b      	ldr	r3, [r7, #4]
 8041ae8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8041aea:	2301      	movs	r3, #1
  }
}
 8041aec:	4618      	mov	r0, r3
 8041aee:	3714      	adds	r7, #20
 8041af0:	46bd      	mov	sp, r7
 8041af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041af6:	4770      	bx	lr

08041af8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8041af8:	b580      	push	{r7, lr}
 8041afa:	b08a      	sub	sp, #40	; 0x28
 8041afc:	af00      	add	r7, sp, #0
 8041afe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8041b00:	2300      	movs	r3, #0
 8041b02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8041b04:	687b      	ldr	r3, [r7, #4]
 8041b06:	681b      	ldr	r3, [r3, #0]
 8041b08:	695b      	ldr	r3, [r3, #20]
 8041b0a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8041b0c:	687b      	ldr	r3, [r7, #4]
 8041b0e:	681b      	ldr	r3, [r3, #0]
 8041b10:	685b      	ldr	r3, [r3, #4]
 8041b12:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8041b14:	687b      	ldr	r3, [r7, #4]
 8041b16:	681b      	ldr	r3, [r3, #0]
 8041b18:	689b      	ldr	r3, [r3, #8]
 8041b1a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8041b1c:	687b      	ldr	r3, [r7, #4]
 8041b1e:	681b      	ldr	r3, [r3, #0]
 8041b20:	68db      	ldr	r3, [r3, #12]
 8041b22:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8041b24:	687b      	ldr	r3, [r7, #4]
 8041b26:	681b      	ldr	r3, [r3, #0]
 8041b28:	691b      	ldr	r3, [r3, #16]
 8041b2a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8041b2c:	687b      	ldr	r3, [r7, #4]
 8041b2e:	681b      	ldr	r3, [r3, #0]
 8041b30:	699b      	ldr	r3, [r3, #24]
 8041b32:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8041b34:	6a3b      	ldr	r3, [r7, #32]
 8041b36:	f003 0301 	and.w	r3, r3, #1
 8041b3a:	2b00      	cmp	r3, #0
 8041b3c:	d07c      	beq.n	8041c38 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8041b3e:	69bb      	ldr	r3, [r7, #24]
 8041b40:	f003 0301 	and.w	r3, r3, #1
 8041b44:	2b00      	cmp	r3, #0
 8041b46:	d023      	beq.n	8041b90 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8041b48:	687b      	ldr	r3, [r7, #4]
 8041b4a:	681b      	ldr	r3, [r3, #0]
 8041b4c:	2201      	movs	r2, #1
 8041b4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8041b50:	69bb      	ldr	r3, [r7, #24]
 8041b52:	f003 0302 	and.w	r3, r3, #2
 8041b56:	2b00      	cmp	r3, #0
 8041b58:	d003      	beq.n	8041b62 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8041b5a:	6878      	ldr	r0, [r7, #4]
 8041b5c:	f000 f983 	bl	8041e66 <HAL_CAN_TxMailbox0CompleteCallback>
 8041b60:	e016      	b.n	8041b90 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8041b62:	69bb      	ldr	r3, [r7, #24]
 8041b64:	f003 0304 	and.w	r3, r3, #4
 8041b68:	2b00      	cmp	r3, #0
 8041b6a:	d004      	beq.n	8041b76 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8041b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041b6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8041b72:	627b      	str	r3, [r7, #36]	; 0x24
 8041b74:	e00c      	b.n	8041b90 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8041b76:	69bb      	ldr	r3, [r7, #24]
 8041b78:	f003 0308 	and.w	r3, r3, #8
 8041b7c:	2b00      	cmp	r3, #0
 8041b7e:	d004      	beq.n	8041b8a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8041b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041b82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8041b86:	627b      	str	r3, [r7, #36]	; 0x24
 8041b88:	e002      	b.n	8041b90 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8041b8a:	6878      	ldr	r0, [r7, #4]
 8041b8c:	f000 f989 	bl	8041ea2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8041b90:	69bb      	ldr	r3, [r7, #24]
 8041b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041b96:	2b00      	cmp	r3, #0
 8041b98:	d024      	beq.n	8041be4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8041b9a:	687b      	ldr	r3, [r7, #4]
 8041b9c:	681b      	ldr	r3, [r3, #0]
 8041b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8041ba2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8041ba4:	69bb      	ldr	r3, [r7, #24]
 8041ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8041baa:	2b00      	cmp	r3, #0
 8041bac:	d003      	beq.n	8041bb6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8041bae:	6878      	ldr	r0, [r7, #4]
 8041bb0:	f000 f963 	bl	8041e7a <HAL_CAN_TxMailbox1CompleteCallback>
 8041bb4:	e016      	b.n	8041be4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8041bb6:	69bb      	ldr	r3, [r7, #24]
 8041bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041bbc:	2b00      	cmp	r3, #0
 8041bbe:	d004      	beq.n	8041bca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8041bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041bc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8041bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8041bc8:	e00c      	b.n	8041be4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8041bca:	69bb      	ldr	r3, [r7, #24]
 8041bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041bd0:	2b00      	cmp	r3, #0
 8041bd2:	d004      	beq.n	8041bde <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8041bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041bd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8041bda:	627b      	str	r3, [r7, #36]	; 0x24
 8041bdc:	e002      	b.n	8041be4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8041bde:	6878      	ldr	r0, [r7, #4]
 8041be0:	f000 f969 	bl	8041eb6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8041be4:	69bb      	ldr	r3, [r7, #24]
 8041be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041bea:	2b00      	cmp	r3, #0
 8041bec:	d024      	beq.n	8041c38 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8041bee:	687b      	ldr	r3, [r7, #4]
 8041bf0:	681b      	ldr	r3, [r3, #0]
 8041bf2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8041bf6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8041bf8:	69bb      	ldr	r3, [r7, #24]
 8041bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041bfe:	2b00      	cmp	r3, #0
 8041c00:	d003      	beq.n	8041c0a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8041c02:	6878      	ldr	r0, [r7, #4]
 8041c04:	f000 f943 	bl	8041e8e <HAL_CAN_TxMailbox2CompleteCallback>
 8041c08:	e016      	b.n	8041c38 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8041c0a:	69bb      	ldr	r3, [r7, #24]
 8041c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8041c10:	2b00      	cmp	r3, #0
 8041c12:	d004      	beq.n	8041c1e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8041c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8041c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8041c1c:	e00c      	b.n	8041c38 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8041c1e:	69bb      	ldr	r3, [r7, #24]
 8041c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8041c24:	2b00      	cmp	r3, #0
 8041c26:	d004      	beq.n	8041c32 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8041c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8041c30:	e002      	b.n	8041c38 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8041c32:	6878      	ldr	r0, [r7, #4]
 8041c34:	f000 f949 	bl	8041eca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8041c38:	6a3b      	ldr	r3, [r7, #32]
 8041c3a:	f003 0308 	and.w	r3, r3, #8
 8041c3e:	2b00      	cmp	r3, #0
 8041c40:	d00c      	beq.n	8041c5c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8041c42:	697b      	ldr	r3, [r7, #20]
 8041c44:	f003 0310 	and.w	r3, r3, #16
 8041c48:	2b00      	cmp	r3, #0
 8041c4a:	d007      	beq.n	8041c5c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8041c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8041c52:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8041c54:	687b      	ldr	r3, [r7, #4]
 8041c56:	681b      	ldr	r3, [r3, #0]
 8041c58:	2210      	movs	r2, #16
 8041c5a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8041c5c:	6a3b      	ldr	r3, [r7, #32]
 8041c5e:	f003 0304 	and.w	r3, r3, #4
 8041c62:	2b00      	cmp	r3, #0
 8041c64:	d00b      	beq.n	8041c7e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8041c66:	697b      	ldr	r3, [r7, #20]
 8041c68:	f003 0308 	and.w	r3, r3, #8
 8041c6c:	2b00      	cmp	r3, #0
 8041c6e:	d006      	beq.n	8041c7e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8041c70:	687b      	ldr	r3, [r7, #4]
 8041c72:	681b      	ldr	r3, [r3, #0]
 8041c74:	2208      	movs	r2, #8
 8041c76:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8041c78:	6878      	ldr	r0, [r7, #4]
 8041c7a:	f000 f930 	bl	8041ede <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8041c7e:	6a3b      	ldr	r3, [r7, #32]
 8041c80:	f003 0302 	and.w	r3, r3, #2
 8041c84:	2b00      	cmp	r3, #0
 8041c86:	d009      	beq.n	8041c9c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8041c88:	687b      	ldr	r3, [r7, #4]
 8041c8a:	681b      	ldr	r3, [r3, #0]
 8041c8c:	68db      	ldr	r3, [r3, #12]
 8041c8e:	f003 0303 	and.w	r3, r3, #3
 8041c92:	2b00      	cmp	r3, #0
 8041c94:	d002      	beq.n	8041c9c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8041c96:	6878      	ldr	r0, [r7, #4]
 8041c98:	f7fe fcb6 	bl	8040608 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8041c9c:	6a3b      	ldr	r3, [r7, #32]
 8041c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041ca2:	2b00      	cmp	r3, #0
 8041ca4:	d00c      	beq.n	8041cc0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8041ca6:	693b      	ldr	r3, [r7, #16]
 8041ca8:	f003 0310 	and.w	r3, r3, #16
 8041cac:	2b00      	cmp	r3, #0
 8041cae:	d007      	beq.n	8041cc0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8041cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8041cb6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8041cb8:	687b      	ldr	r3, [r7, #4]
 8041cba:	681b      	ldr	r3, [r3, #0]
 8041cbc:	2210      	movs	r2, #16
 8041cbe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8041cc0:	6a3b      	ldr	r3, [r7, #32]
 8041cc2:	f003 0320 	and.w	r3, r3, #32
 8041cc6:	2b00      	cmp	r3, #0
 8041cc8:	d00b      	beq.n	8041ce2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8041cca:	693b      	ldr	r3, [r7, #16]
 8041ccc:	f003 0308 	and.w	r3, r3, #8
 8041cd0:	2b00      	cmp	r3, #0
 8041cd2:	d006      	beq.n	8041ce2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8041cd4:	687b      	ldr	r3, [r7, #4]
 8041cd6:	681b      	ldr	r3, [r3, #0]
 8041cd8:	2208      	movs	r2, #8
 8041cda:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8041cdc:	6878      	ldr	r0, [r7, #4]
 8041cde:	f000 f912 	bl	8041f06 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8041ce2:	6a3b      	ldr	r3, [r7, #32]
 8041ce4:	f003 0310 	and.w	r3, r3, #16
 8041ce8:	2b00      	cmp	r3, #0
 8041cea:	d009      	beq.n	8041d00 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8041cec:	687b      	ldr	r3, [r7, #4]
 8041cee:	681b      	ldr	r3, [r3, #0]
 8041cf0:	691b      	ldr	r3, [r3, #16]
 8041cf2:	f003 0303 	and.w	r3, r3, #3
 8041cf6:	2b00      	cmp	r3, #0
 8041cf8:	d002      	beq.n	8041d00 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8041cfa:	6878      	ldr	r0, [r7, #4]
 8041cfc:	f000 f8f9 	bl	8041ef2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8041d00:	6a3b      	ldr	r3, [r7, #32]
 8041d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041d06:	2b00      	cmp	r3, #0
 8041d08:	d00b      	beq.n	8041d22 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8041d0a:	69fb      	ldr	r3, [r7, #28]
 8041d0c:	f003 0310 	and.w	r3, r3, #16
 8041d10:	2b00      	cmp	r3, #0
 8041d12:	d006      	beq.n	8041d22 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8041d14:	687b      	ldr	r3, [r7, #4]
 8041d16:	681b      	ldr	r3, [r3, #0]
 8041d18:	2210      	movs	r2, #16
 8041d1a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8041d1c:	6878      	ldr	r0, [r7, #4]
 8041d1e:	f000 f8fc 	bl	8041f1a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8041d22:	6a3b      	ldr	r3, [r7, #32]
 8041d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041d28:	2b00      	cmp	r3, #0
 8041d2a:	d00b      	beq.n	8041d44 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8041d2c:	69fb      	ldr	r3, [r7, #28]
 8041d2e:	f003 0308 	and.w	r3, r3, #8
 8041d32:	2b00      	cmp	r3, #0
 8041d34:	d006      	beq.n	8041d44 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8041d36:	687b      	ldr	r3, [r7, #4]
 8041d38:	681b      	ldr	r3, [r3, #0]
 8041d3a:	2208      	movs	r2, #8
 8041d3c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8041d3e:	6878      	ldr	r0, [r7, #4]
 8041d40:	f000 f8f5 	bl	8041f2e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8041d44:	6a3b      	ldr	r3, [r7, #32]
 8041d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8041d4a:	2b00      	cmp	r3, #0
 8041d4c:	d07b      	beq.n	8041e46 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8041d4e:	69fb      	ldr	r3, [r7, #28]
 8041d50:	f003 0304 	and.w	r3, r3, #4
 8041d54:	2b00      	cmp	r3, #0
 8041d56:	d072      	beq.n	8041e3e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8041d58:	6a3b      	ldr	r3, [r7, #32]
 8041d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041d5e:	2b00      	cmp	r3, #0
 8041d60:	d008      	beq.n	8041d74 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8041d62:	68fb      	ldr	r3, [r7, #12]
 8041d64:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8041d68:	2b00      	cmp	r3, #0
 8041d6a:	d003      	beq.n	8041d74 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8041d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041d6e:	f043 0301 	orr.w	r3, r3, #1
 8041d72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8041d74:	6a3b      	ldr	r3, [r7, #32]
 8041d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8041d7a:	2b00      	cmp	r3, #0
 8041d7c:	d008      	beq.n	8041d90 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8041d7e:	68fb      	ldr	r3, [r7, #12]
 8041d80:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8041d84:	2b00      	cmp	r3, #0
 8041d86:	d003      	beq.n	8041d90 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8041d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041d8a:	f043 0302 	orr.w	r3, r3, #2
 8041d8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8041d90:	6a3b      	ldr	r3, [r7, #32]
 8041d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041d96:	2b00      	cmp	r3, #0
 8041d98:	d008      	beq.n	8041dac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8041d9a:	68fb      	ldr	r3, [r7, #12]
 8041d9c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8041da0:	2b00      	cmp	r3, #0
 8041da2:	d003      	beq.n	8041dac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8041da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041da6:	f043 0304 	orr.w	r3, r3, #4
 8041daa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8041dac:	6a3b      	ldr	r3, [r7, #32]
 8041dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041db2:	2b00      	cmp	r3, #0
 8041db4:	d043      	beq.n	8041e3e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8041db6:	68fb      	ldr	r3, [r7, #12]
 8041db8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8041dbc:	2b00      	cmp	r3, #0
 8041dbe:	d03e      	beq.n	8041e3e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8041dc0:	68fb      	ldr	r3, [r7, #12]
 8041dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8041dc6:	2b60      	cmp	r3, #96	; 0x60
 8041dc8:	d02b      	beq.n	8041e22 <HAL_CAN_IRQHandler+0x32a>
 8041dca:	2b60      	cmp	r3, #96	; 0x60
 8041dcc:	d82e      	bhi.n	8041e2c <HAL_CAN_IRQHandler+0x334>
 8041dce:	2b50      	cmp	r3, #80	; 0x50
 8041dd0:	d022      	beq.n	8041e18 <HAL_CAN_IRQHandler+0x320>
 8041dd2:	2b50      	cmp	r3, #80	; 0x50
 8041dd4:	d82a      	bhi.n	8041e2c <HAL_CAN_IRQHandler+0x334>
 8041dd6:	2b40      	cmp	r3, #64	; 0x40
 8041dd8:	d019      	beq.n	8041e0e <HAL_CAN_IRQHandler+0x316>
 8041dda:	2b40      	cmp	r3, #64	; 0x40
 8041ddc:	d826      	bhi.n	8041e2c <HAL_CAN_IRQHandler+0x334>
 8041dde:	2b30      	cmp	r3, #48	; 0x30
 8041de0:	d010      	beq.n	8041e04 <HAL_CAN_IRQHandler+0x30c>
 8041de2:	2b30      	cmp	r3, #48	; 0x30
 8041de4:	d822      	bhi.n	8041e2c <HAL_CAN_IRQHandler+0x334>
 8041de6:	2b10      	cmp	r3, #16
 8041de8:	d002      	beq.n	8041df0 <HAL_CAN_IRQHandler+0x2f8>
 8041dea:	2b20      	cmp	r3, #32
 8041dec:	d005      	beq.n	8041dfa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8041dee:	e01d      	b.n	8041e2c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8041df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041df2:	f043 0308 	orr.w	r3, r3, #8
 8041df6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8041df8:	e019      	b.n	8041e2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8041dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041dfc:	f043 0310 	orr.w	r3, r3, #16
 8041e00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8041e02:	e014      	b.n	8041e2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8041e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041e06:	f043 0320 	orr.w	r3, r3, #32
 8041e0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8041e0c:	e00f      	b.n	8041e2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8041e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8041e14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8041e16:	e00a      	b.n	8041e2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8041e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041e1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8041e20:	e005      	b.n	8041e2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8041e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041e28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8041e2a:	e000      	b.n	8041e2e <HAL_CAN_IRQHandler+0x336>
            break;
 8041e2c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8041e2e:	687b      	ldr	r3, [r7, #4]
 8041e30:	681b      	ldr	r3, [r3, #0]
 8041e32:	699a      	ldr	r2, [r3, #24]
 8041e34:	687b      	ldr	r3, [r7, #4]
 8041e36:	681b      	ldr	r3, [r3, #0]
 8041e38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8041e3c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8041e3e:	687b      	ldr	r3, [r7, #4]
 8041e40:	681b      	ldr	r3, [r3, #0]
 8041e42:	2204      	movs	r2, #4
 8041e44:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8041e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041e48:	2b00      	cmp	r3, #0
 8041e4a:	d008      	beq.n	8041e5e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8041e4c:	687b      	ldr	r3, [r7, #4]
 8041e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8041e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041e52:	431a      	orrs	r2, r3
 8041e54:	687b      	ldr	r3, [r7, #4]
 8041e56:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8041e58:	6878      	ldr	r0, [r7, #4]
 8041e5a:	f000 f872 	bl	8041f42 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8041e5e:	bf00      	nop
 8041e60:	3728      	adds	r7, #40	; 0x28
 8041e62:	46bd      	mov	sp, r7
 8041e64:	bd80      	pop	{r7, pc}

08041e66 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8041e66:	b480      	push	{r7}
 8041e68:	b083      	sub	sp, #12
 8041e6a:	af00      	add	r7, sp, #0
 8041e6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8041e6e:	bf00      	nop
 8041e70:	370c      	adds	r7, #12
 8041e72:	46bd      	mov	sp, r7
 8041e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e78:	4770      	bx	lr

08041e7a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8041e7a:	b480      	push	{r7}
 8041e7c:	b083      	sub	sp, #12
 8041e7e:	af00      	add	r7, sp, #0
 8041e80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8041e82:	bf00      	nop
 8041e84:	370c      	adds	r7, #12
 8041e86:	46bd      	mov	sp, r7
 8041e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e8c:	4770      	bx	lr

08041e8e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8041e8e:	b480      	push	{r7}
 8041e90:	b083      	sub	sp, #12
 8041e92:	af00      	add	r7, sp, #0
 8041e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8041e96:	bf00      	nop
 8041e98:	370c      	adds	r7, #12
 8041e9a:	46bd      	mov	sp, r7
 8041e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ea0:	4770      	bx	lr

08041ea2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8041ea2:	b480      	push	{r7}
 8041ea4:	b083      	sub	sp, #12
 8041ea6:	af00      	add	r7, sp, #0
 8041ea8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8041eaa:	bf00      	nop
 8041eac:	370c      	adds	r7, #12
 8041eae:	46bd      	mov	sp, r7
 8041eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041eb4:	4770      	bx	lr

08041eb6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8041eb6:	b480      	push	{r7}
 8041eb8:	b083      	sub	sp, #12
 8041eba:	af00      	add	r7, sp, #0
 8041ebc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8041ebe:	bf00      	nop
 8041ec0:	370c      	adds	r7, #12
 8041ec2:	46bd      	mov	sp, r7
 8041ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ec8:	4770      	bx	lr

08041eca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8041eca:	b480      	push	{r7}
 8041ecc:	b083      	sub	sp, #12
 8041ece:	af00      	add	r7, sp, #0
 8041ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8041ed2:	bf00      	nop
 8041ed4:	370c      	adds	r7, #12
 8041ed6:	46bd      	mov	sp, r7
 8041ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041edc:	4770      	bx	lr

08041ede <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8041ede:	b480      	push	{r7}
 8041ee0:	b083      	sub	sp, #12
 8041ee2:	af00      	add	r7, sp, #0
 8041ee4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8041ee6:	bf00      	nop
 8041ee8:	370c      	adds	r7, #12
 8041eea:	46bd      	mov	sp, r7
 8041eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ef0:	4770      	bx	lr

08041ef2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8041ef2:	b480      	push	{r7}
 8041ef4:	b083      	sub	sp, #12
 8041ef6:	af00      	add	r7, sp, #0
 8041ef8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8041efa:	bf00      	nop
 8041efc:	370c      	adds	r7, #12
 8041efe:	46bd      	mov	sp, r7
 8041f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f04:	4770      	bx	lr

08041f06 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8041f06:	b480      	push	{r7}
 8041f08:	b083      	sub	sp, #12
 8041f0a:	af00      	add	r7, sp, #0
 8041f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8041f0e:	bf00      	nop
 8041f10:	370c      	adds	r7, #12
 8041f12:	46bd      	mov	sp, r7
 8041f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f18:	4770      	bx	lr

08041f1a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8041f1a:	b480      	push	{r7}
 8041f1c:	b083      	sub	sp, #12
 8041f1e:	af00      	add	r7, sp, #0
 8041f20:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8041f22:	bf00      	nop
 8041f24:	370c      	adds	r7, #12
 8041f26:	46bd      	mov	sp, r7
 8041f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f2c:	4770      	bx	lr

08041f2e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8041f2e:	b480      	push	{r7}
 8041f30:	b083      	sub	sp, #12
 8041f32:	af00      	add	r7, sp, #0
 8041f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8041f36:	bf00      	nop
 8041f38:	370c      	adds	r7, #12
 8041f3a:	46bd      	mov	sp, r7
 8041f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f40:	4770      	bx	lr

08041f42 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8041f42:	b480      	push	{r7}
 8041f44:	b083      	sub	sp, #12
 8041f46:	af00      	add	r7, sp, #0
 8041f48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8041f4a:	bf00      	nop
 8041f4c:	370c      	adds	r7, #12
 8041f4e:	46bd      	mov	sp, r7
 8041f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f54:	4770      	bx	lr
	...

08041f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8041f58:	b480      	push	{r7}
 8041f5a:	b085      	sub	sp, #20
 8041f5c:	af00      	add	r7, sp, #0
 8041f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8041f60:	687b      	ldr	r3, [r7, #4]
 8041f62:	f003 0307 	and.w	r3, r3, #7
 8041f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8041f68:	4b0b      	ldr	r3, [pc, #44]	; (8041f98 <__NVIC_SetPriorityGrouping+0x40>)
 8041f6a:	68db      	ldr	r3, [r3, #12]
 8041f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8041f6e:	68ba      	ldr	r2, [r7, #8]
 8041f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8041f74:	4013      	ands	r3, r2
 8041f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8041f78:	68fb      	ldr	r3, [r7, #12]
 8041f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8041f7c:	68bb      	ldr	r3, [r7, #8]
 8041f7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8041f80:	4b06      	ldr	r3, [pc, #24]	; (8041f9c <__NVIC_SetPriorityGrouping+0x44>)
 8041f82:	4313      	orrs	r3, r2
 8041f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8041f86:	4a04      	ldr	r2, [pc, #16]	; (8041f98 <__NVIC_SetPriorityGrouping+0x40>)
 8041f88:	68bb      	ldr	r3, [r7, #8]
 8041f8a:	60d3      	str	r3, [r2, #12]
}
 8041f8c:	bf00      	nop
 8041f8e:	3714      	adds	r7, #20
 8041f90:	46bd      	mov	sp, r7
 8041f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f96:	4770      	bx	lr
 8041f98:	e000ed00 	.word	0xe000ed00
 8041f9c:	05fa0000 	.word	0x05fa0000

08041fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8041fa0:	b480      	push	{r7}
 8041fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8041fa4:	4b04      	ldr	r3, [pc, #16]	; (8041fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8041fa6:	68db      	ldr	r3, [r3, #12]
 8041fa8:	0a1b      	lsrs	r3, r3, #8
 8041faa:	f003 0307 	and.w	r3, r3, #7
}
 8041fae:	4618      	mov	r0, r3
 8041fb0:	46bd      	mov	sp, r7
 8041fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041fb6:	4770      	bx	lr
 8041fb8:	e000ed00 	.word	0xe000ed00

08041fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8041fbc:	b480      	push	{r7}
 8041fbe:	b083      	sub	sp, #12
 8041fc0:	af00      	add	r7, sp, #0
 8041fc2:	4603      	mov	r3, r0
 8041fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8041fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041fca:	2b00      	cmp	r3, #0
 8041fcc:	db0b      	blt.n	8041fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8041fce:	79fb      	ldrb	r3, [r7, #7]
 8041fd0:	f003 021f 	and.w	r2, r3, #31
 8041fd4:	4907      	ldr	r1, [pc, #28]	; (8041ff4 <__NVIC_EnableIRQ+0x38>)
 8041fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041fda:	095b      	lsrs	r3, r3, #5
 8041fdc:	2001      	movs	r0, #1
 8041fde:	fa00 f202 	lsl.w	r2, r0, r2
 8041fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8041fe6:	bf00      	nop
 8041fe8:	370c      	adds	r7, #12
 8041fea:	46bd      	mov	sp, r7
 8041fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ff0:	4770      	bx	lr
 8041ff2:	bf00      	nop
 8041ff4:	e000e100 	.word	0xe000e100

08041ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8041ff8:	b480      	push	{r7}
 8041ffa:	b083      	sub	sp, #12
 8041ffc:	af00      	add	r7, sp, #0
 8041ffe:	4603      	mov	r3, r0
 8042000:	6039      	str	r1, [r7, #0]
 8042002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8042004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042008:	2b00      	cmp	r3, #0
 804200a:	db0a      	blt.n	8042022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804200c:	683b      	ldr	r3, [r7, #0]
 804200e:	b2da      	uxtb	r2, r3
 8042010:	490c      	ldr	r1, [pc, #48]	; (8042044 <__NVIC_SetPriority+0x4c>)
 8042012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042016:	0112      	lsls	r2, r2, #4
 8042018:	b2d2      	uxtb	r2, r2
 804201a:	440b      	add	r3, r1
 804201c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8042020:	e00a      	b.n	8042038 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8042022:	683b      	ldr	r3, [r7, #0]
 8042024:	b2da      	uxtb	r2, r3
 8042026:	4908      	ldr	r1, [pc, #32]	; (8042048 <__NVIC_SetPriority+0x50>)
 8042028:	79fb      	ldrb	r3, [r7, #7]
 804202a:	f003 030f 	and.w	r3, r3, #15
 804202e:	3b04      	subs	r3, #4
 8042030:	0112      	lsls	r2, r2, #4
 8042032:	b2d2      	uxtb	r2, r2
 8042034:	440b      	add	r3, r1
 8042036:	761a      	strb	r2, [r3, #24]
}
 8042038:	bf00      	nop
 804203a:	370c      	adds	r7, #12
 804203c:	46bd      	mov	sp, r7
 804203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042042:	4770      	bx	lr
 8042044:	e000e100 	.word	0xe000e100
 8042048:	e000ed00 	.word	0xe000ed00

0804204c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 804204c:	b480      	push	{r7}
 804204e:	b089      	sub	sp, #36	; 0x24
 8042050:	af00      	add	r7, sp, #0
 8042052:	60f8      	str	r0, [r7, #12]
 8042054:	60b9      	str	r1, [r7, #8]
 8042056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8042058:	68fb      	ldr	r3, [r7, #12]
 804205a:	f003 0307 	and.w	r3, r3, #7
 804205e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8042060:	69fb      	ldr	r3, [r7, #28]
 8042062:	f1c3 0307 	rsb	r3, r3, #7
 8042066:	2b04      	cmp	r3, #4
 8042068:	bf28      	it	cs
 804206a:	2304      	movcs	r3, #4
 804206c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 804206e:	69fb      	ldr	r3, [r7, #28]
 8042070:	3304      	adds	r3, #4
 8042072:	2b06      	cmp	r3, #6
 8042074:	d902      	bls.n	804207c <NVIC_EncodePriority+0x30>
 8042076:	69fb      	ldr	r3, [r7, #28]
 8042078:	3b03      	subs	r3, #3
 804207a:	e000      	b.n	804207e <NVIC_EncodePriority+0x32>
 804207c:	2300      	movs	r3, #0
 804207e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8042080:	f04f 32ff 	mov.w	r2, #4294967295
 8042084:	69bb      	ldr	r3, [r7, #24]
 8042086:	fa02 f303 	lsl.w	r3, r2, r3
 804208a:	43da      	mvns	r2, r3
 804208c:	68bb      	ldr	r3, [r7, #8]
 804208e:	401a      	ands	r2, r3
 8042090:	697b      	ldr	r3, [r7, #20]
 8042092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8042094:	f04f 31ff 	mov.w	r1, #4294967295
 8042098:	697b      	ldr	r3, [r7, #20]
 804209a:	fa01 f303 	lsl.w	r3, r1, r3
 804209e:	43d9      	mvns	r1, r3
 80420a0:	687b      	ldr	r3, [r7, #4]
 80420a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80420a4:	4313      	orrs	r3, r2
         );
}
 80420a6:	4618      	mov	r0, r3
 80420a8:	3724      	adds	r7, #36	; 0x24
 80420aa:	46bd      	mov	sp, r7
 80420ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80420b0:	4770      	bx	lr
	...

080420b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80420b4:	b580      	push	{r7, lr}
 80420b6:	b082      	sub	sp, #8
 80420b8:	af00      	add	r7, sp, #0
 80420ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80420bc:	687b      	ldr	r3, [r7, #4]
 80420be:	3b01      	subs	r3, #1
 80420c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80420c4:	d301      	bcc.n	80420ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80420c6:	2301      	movs	r3, #1
 80420c8:	e00f      	b.n	80420ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80420ca:	4a0a      	ldr	r2, [pc, #40]	; (80420f4 <SysTick_Config+0x40>)
 80420cc:	687b      	ldr	r3, [r7, #4]
 80420ce:	3b01      	subs	r3, #1
 80420d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80420d2:	210f      	movs	r1, #15
 80420d4:	f04f 30ff 	mov.w	r0, #4294967295
 80420d8:	f7ff ff8e 	bl	8041ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80420dc:	4b05      	ldr	r3, [pc, #20]	; (80420f4 <SysTick_Config+0x40>)
 80420de:	2200      	movs	r2, #0
 80420e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80420e2:	4b04      	ldr	r3, [pc, #16]	; (80420f4 <SysTick_Config+0x40>)
 80420e4:	2207      	movs	r2, #7
 80420e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80420e8:	2300      	movs	r3, #0
}
 80420ea:	4618      	mov	r0, r3
 80420ec:	3708      	adds	r7, #8
 80420ee:	46bd      	mov	sp, r7
 80420f0:	bd80      	pop	{r7, pc}
 80420f2:	bf00      	nop
 80420f4:	e000e010 	.word	0xe000e010

080420f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80420f8:	b580      	push	{r7, lr}
 80420fa:	b082      	sub	sp, #8
 80420fc:	af00      	add	r7, sp, #0
 80420fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8042100:	6878      	ldr	r0, [r7, #4]
 8042102:	f7ff ff29 	bl	8041f58 <__NVIC_SetPriorityGrouping>
}
 8042106:	bf00      	nop
 8042108:	3708      	adds	r7, #8
 804210a:	46bd      	mov	sp, r7
 804210c:	bd80      	pop	{r7, pc}

0804210e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 804210e:	b580      	push	{r7, lr}
 8042110:	b086      	sub	sp, #24
 8042112:	af00      	add	r7, sp, #0
 8042114:	4603      	mov	r3, r0
 8042116:	60b9      	str	r1, [r7, #8]
 8042118:	607a      	str	r2, [r7, #4]
 804211a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 804211c:	2300      	movs	r3, #0
 804211e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8042120:	f7ff ff3e 	bl	8041fa0 <__NVIC_GetPriorityGrouping>
 8042124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8042126:	687a      	ldr	r2, [r7, #4]
 8042128:	68b9      	ldr	r1, [r7, #8]
 804212a:	6978      	ldr	r0, [r7, #20]
 804212c:	f7ff ff8e 	bl	804204c <NVIC_EncodePriority>
 8042130:	4602      	mov	r2, r0
 8042132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8042136:	4611      	mov	r1, r2
 8042138:	4618      	mov	r0, r3
 804213a:	f7ff ff5d 	bl	8041ff8 <__NVIC_SetPriority>
}
 804213e:	bf00      	nop
 8042140:	3718      	adds	r7, #24
 8042142:	46bd      	mov	sp, r7
 8042144:	bd80      	pop	{r7, pc}

08042146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8042146:	b580      	push	{r7, lr}
 8042148:	b082      	sub	sp, #8
 804214a:	af00      	add	r7, sp, #0
 804214c:	4603      	mov	r3, r0
 804214e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8042150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042154:	4618      	mov	r0, r3
 8042156:	f7ff ff31 	bl	8041fbc <__NVIC_EnableIRQ>
}
 804215a:	bf00      	nop
 804215c:	3708      	adds	r7, #8
 804215e:	46bd      	mov	sp, r7
 8042160:	bd80      	pop	{r7, pc}

08042162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8042162:	b580      	push	{r7, lr}
 8042164:	b082      	sub	sp, #8
 8042166:	af00      	add	r7, sp, #0
 8042168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 804216a:	6878      	ldr	r0, [r7, #4]
 804216c:	f7ff ffa2 	bl	80420b4 <SysTick_Config>
 8042170:	4603      	mov	r3, r0
}
 8042172:	4618      	mov	r0, r3
 8042174:	3708      	adds	r7, #8
 8042176:	46bd      	mov	sp, r7
 8042178:	bd80      	pop	{r7, pc}
	...

0804217c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 804217c:	b480      	push	{r7}
 804217e:	b089      	sub	sp, #36	; 0x24
 8042180:	af00      	add	r7, sp, #0
 8042182:	6078      	str	r0, [r7, #4]
 8042184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8042186:	2300      	movs	r3, #0
 8042188:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 804218a:	2300      	movs	r3, #0
 804218c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 804218e:	2300      	movs	r3, #0
 8042190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8042192:	2300      	movs	r3, #0
 8042194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8042196:	2300      	movs	r3, #0
 8042198:	61fb      	str	r3, [r7, #28]
 804219a:	e175      	b.n	8042488 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 804219c:	2201      	movs	r2, #1
 804219e:	69fb      	ldr	r3, [r7, #28]
 80421a0:	fa02 f303 	lsl.w	r3, r2, r3
 80421a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80421a6:	683b      	ldr	r3, [r7, #0]
 80421a8:	681b      	ldr	r3, [r3, #0]
 80421aa:	697a      	ldr	r2, [r7, #20]
 80421ac:	4013      	ands	r3, r2
 80421ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80421b0:	693a      	ldr	r2, [r7, #16]
 80421b2:	697b      	ldr	r3, [r7, #20]
 80421b4:	429a      	cmp	r2, r3
 80421b6:	f040 8164 	bne.w	8042482 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80421ba:	683b      	ldr	r3, [r7, #0]
 80421bc:	685b      	ldr	r3, [r3, #4]
 80421be:	f003 0303 	and.w	r3, r3, #3
 80421c2:	2b01      	cmp	r3, #1
 80421c4:	d005      	beq.n	80421d2 <HAL_GPIO_Init+0x56>
 80421c6:	683b      	ldr	r3, [r7, #0]
 80421c8:	685b      	ldr	r3, [r3, #4]
 80421ca:	f003 0303 	and.w	r3, r3, #3
 80421ce:	2b02      	cmp	r3, #2
 80421d0:	d130      	bne.n	8042234 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80421d2:	687b      	ldr	r3, [r7, #4]
 80421d4:	689b      	ldr	r3, [r3, #8]
 80421d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80421d8:	69fb      	ldr	r3, [r7, #28]
 80421da:	005b      	lsls	r3, r3, #1
 80421dc:	2203      	movs	r2, #3
 80421de:	fa02 f303 	lsl.w	r3, r2, r3
 80421e2:	43db      	mvns	r3, r3
 80421e4:	69ba      	ldr	r2, [r7, #24]
 80421e6:	4013      	ands	r3, r2
 80421e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80421ea:	683b      	ldr	r3, [r7, #0]
 80421ec:	68da      	ldr	r2, [r3, #12]
 80421ee:	69fb      	ldr	r3, [r7, #28]
 80421f0:	005b      	lsls	r3, r3, #1
 80421f2:	fa02 f303 	lsl.w	r3, r2, r3
 80421f6:	69ba      	ldr	r2, [r7, #24]
 80421f8:	4313      	orrs	r3, r2
 80421fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80421fc:	687b      	ldr	r3, [r7, #4]
 80421fe:	69ba      	ldr	r2, [r7, #24]
 8042200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8042202:	687b      	ldr	r3, [r7, #4]
 8042204:	685b      	ldr	r3, [r3, #4]
 8042206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8042208:	2201      	movs	r2, #1
 804220a:	69fb      	ldr	r3, [r7, #28]
 804220c:	fa02 f303 	lsl.w	r3, r2, r3
 8042210:	43db      	mvns	r3, r3
 8042212:	69ba      	ldr	r2, [r7, #24]
 8042214:	4013      	ands	r3, r2
 8042216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8042218:	683b      	ldr	r3, [r7, #0]
 804221a:	685b      	ldr	r3, [r3, #4]
 804221c:	091b      	lsrs	r3, r3, #4
 804221e:	f003 0201 	and.w	r2, r3, #1
 8042222:	69fb      	ldr	r3, [r7, #28]
 8042224:	fa02 f303 	lsl.w	r3, r2, r3
 8042228:	69ba      	ldr	r2, [r7, #24]
 804222a:	4313      	orrs	r3, r2
 804222c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 804222e:	687b      	ldr	r3, [r7, #4]
 8042230:	69ba      	ldr	r2, [r7, #24]
 8042232:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8042234:	683b      	ldr	r3, [r7, #0]
 8042236:	685b      	ldr	r3, [r3, #4]
 8042238:	f003 0303 	and.w	r3, r3, #3
 804223c:	2b03      	cmp	r3, #3
 804223e:	d017      	beq.n	8042270 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8042240:	687b      	ldr	r3, [r7, #4]
 8042242:	68db      	ldr	r3, [r3, #12]
 8042244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8042246:	69fb      	ldr	r3, [r7, #28]
 8042248:	005b      	lsls	r3, r3, #1
 804224a:	2203      	movs	r2, #3
 804224c:	fa02 f303 	lsl.w	r3, r2, r3
 8042250:	43db      	mvns	r3, r3
 8042252:	69ba      	ldr	r2, [r7, #24]
 8042254:	4013      	ands	r3, r2
 8042256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8042258:	683b      	ldr	r3, [r7, #0]
 804225a:	689a      	ldr	r2, [r3, #8]
 804225c:	69fb      	ldr	r3, [r7, #28]
 804225e:	005b      	lsls	r3, r3, #1
 8042260:	fa02 f303 	lsl.w	r3, r2, r3
 8042264:	69ba      	ldr	r2, [r7, #24]
 8042266:	4313      	orrs	r3, r2
 8042268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 804226a:	687b      	ldr	r3, [r7, #4]
 804226c:	69ba      	ldr	r2, [r7, #24]
 804226e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8042270:	683b      	ldr	r3, [r7, #0]
 8042272:	685b      	ldr	r3, [r3, #4]
 8042274:	f003 0303 	and.w	r3, r3, #3
 8042278:	2b02      	cmp	r3, #2
 804227a:	d123      	bne.n	80422c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 804227c:	69fb      	ldr	r3, [r7, #28]
 804227e:	08da      	lsrs	r2, r3, #3
 8042280:	687b      	ldr	r3, [r7, #4]
 8042282:	3208      	adds	r2, #8
 8042284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8042288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 804228a:	69fb      	ldr	r3, [r7, #28]
 804228c:	f003 0307 	and.w	r3, r3, #7
 8042290:	009b      	lsls	r3, r3, #2
 8042292:	220f      	movs	r2, #15
 8042294:	fa02 f303 	lsl.w	r3, r2, r3
 8042298:	43db      	mvns	r3, r3
 804229a:	69ba      	ldr	r2, [r7, #24]
 804229c:	4013      	ands	r3, r2
 804229e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80422a0:	683b      	ldr	r3, [r7, #0]
 80422a2:	691a      	ldr	r2, [r3, #16]
 80422a4:	69fb      	ldr	r3, [r7, #28]
 80422a6:	f003 0307 	and.w	r3, r3, #7
 80422aa:	009b      	lsls	r3, r3, #2
 80422ac:	fa02 f303 	lsl.w	r3, r2, r3
 80422b0:	69ba      	ldr	r2, [r7, #24]
 80422b2:	4313      	orrs	r3, r2
 80422b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80422b6:	69fb      	ldr	r3, [r7, #28]
 80422b8:	08da      	lsrs	r2, r3, #3
 80422ba:	687b      	ldr	r3, [r7, #4]
 80422bc:	3208      	adds	r2, #8
 80422be:	69b9      	ldr	r1, [r7, #24]
 80422c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80422c4:	687b      	ldr	r3, [r7, #4]
 80422c6:	681b      	ldr	r3, [r3, #0]
 80422c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80422ca:	69fb      	ldr	r3, [r7, #28]
 80422cc:	005b      	lsls	r3, r3, #1
 80422ce:	2203      	movs	r2, #3
 80422d0:	fa02 f303 	lsl.w	r3, r2, r3
 80422d4:	43db      	mvns	r3, r3
 80422d6:	69ba      	ldr	r2, [r7, #24]
 80422d8:	4013      	ands	r3, r2
 80422da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80422dc:	683b      	ldr	r3, [r7, #0]
 80422de:	685b      	ldr	r3, [r3, #4]
 80422e0:	f003 0203 	and.w	r2, r3, #3
 80422e4:	69fb      	ldr	r3, [r7, #28]
 80422e6:	005b      	lsls	r3, r3, #1
 80422e8:	fa02 f303 	lsl.w	r3, r2, r3
 80422ec:	69ba      	ldr	r2, [r7, #24]
 80422ee:	4313      	orrs	r3, r2
 80422f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80422f2:	687b      	ldr	r3, [r7, #4]
 80422f4:	69ba      	ldr	r2, [r7, #24]
 80422f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80422f8:	683b      	ldr	r3, [r7, #0]
 80422fa:	685b      	ldr	r3, [r3, #4]
 80422fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8042300:	2b00      	cmp	r3, #0
 8042302:	f000 80be 	beq.w	8042482 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8042306:	4b66      	ldr	r3, [pc, #408]	; (80424a0 <HAL_GPIO_Init+0x324>)
 8042308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804230a:	4a65      	ldr	r2, [pc, #404]	; (80424a0 <HAL_GPIO_Init+0x324>)
 804230c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8042310:	6453      	str	r3, [r2, #68]	; 0x44
 8042312:	4b63      	ldr	r3, [pc, #396]	; (80424a0 <HAL_GPIO_Init+0x324>)
 8042314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804231a:	60fb      	str	r3, [r7, #12]
 804231c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 804231e:	4a61      	ldr	r2, [pc, #388]	; (80424a4 <HAL_GPIO_Init+0x328>)
 8042320:	69fb      	ldr	r3, [r7, #28]
 8042322:	089b      	lsrs	r3, r3, #2
 8042324:	3302      	adds	r3, #2
 8042326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 804232c:	69fb      	ldr	r3, [r7, #28]
 804232e:	f003 0303 	and.w	r3, r3, #3
 8042332:	009b      	lsls	r3, r3, #2
 8042334:	220f      	movs	r2, #15
 8042336:	fa02 f303 	lsl.w	r3, r2, r3
 804233a:	43db      	mvns	r3, r3
 804233c:	69ba      	ldr	r2, [r7, #24]
 804233e:	4013      	ands	r3, r2
 8042340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8042342:	687b      	ldr	r3, [r7, #4]
 8042344:	4a58      	ldr	r2, [pc, #352]	; (80424a8 <HAL_GPIO_Init+0x32c>)
 8042346:	4293      	cmp	r3, r2
 8042348:	d037      	beq.n	80423ba <HAL_GPIO_Init+0x23e>
 804234a:	687b      	ldr	r3, [r7, #4]
 804234c:	4a57      	ldr	r2, [pc, #348]	; (80424ac <HAL_GPIO_Init+0x330>)
 804234e:	4293      	cmp	r3, r2
 8042350:	d031      	beq.n	80423b6 <HAL_GPIO_Init+0x23a>
 8042352:	687b      	ldr	r3, [r7, #4]
 8042354:	4a56      	ldr	r2, [pc, #344]	; (80424b0 <HAL_GPIO_Init+0x334>)
 8042356:	4293      	cmp	r3, r2
 8042358:	d02b      	beq.n	80423b2 <HAL_GPIO_Init+0x236>
 804235a:	687b      	ldr	r3, [r7, #4]
 804235c:	4a55      	ldr	r2, [pc, #340]	; (80424b4 <HAL_GPIO_Init+0x338>)
 804235e:	4293      	cmp	r3, r2
 8042360:	d025      	beq.n	80423ae <HAL_GPIO_Init+0x232>
 8042362:	687b      	ldr	r3, [r7, #4]
 8042364:	4a54      	ldr	r2, [pc, #336]	; (80424b8 <HAL_GPIO_Init+0x33c>)
 8042366:	4293      	cmp	r3, r2
 8042368:	d01f      	beq.n	80423aa <HAL_GPIO_Init+0x22e>
 804236a:	687b      	ldr	r3, [r7, #4]
 804236c:	4a53      	ldr	r2, [pc, #332]	; (80424bc <HAL_GPIO_Init+0x340>)
 804236e:	4293      	cmp	r3, r2
 8042370:	d019      	beq.n	80423a6 <HAL_GPIO_Init+0x22a>
 8042372:	687b      	ldr	r3, [r7, #4]
 8042374:	4a52      	ldr	r2, [pc, #328]	; (80424c0 <HAL_GPIO_Init+0x344>)
 8042376:	4293      	cmp	r3, r2
 8042378:	d013      	beq.n	80423a2 <HAL_GPIO_Init+0x226>
 804237a:	687b      	ldr	r3, [r7, #4]
 804237c:	4a51      	ldr	r2, [pc, #324]	; (80424c4 <HAL_GPIO_Init+0x348>)
 804237e:	4293      	cmp	r3, r2
 8042380:	d00d      	beq.n	804239e <HAL_GPIO_Init+0x222>
 8042382:	687b      	ldr	r3, [r7, #4]
 8042384:	4a50      	ldr	r2, [pc, #320]	; (80424c8 <HAL_GPIO_Init+0x34c>)
 8042386:	4293      	cmp	r3, r2
 8042388:	d007      	beq.n	804239a <HAL_GPIO_Init+0x21e>
 804238a:	687b      	ldr	r3, [r7, #4]
 804238c:	4a4f      	ldr	r2, [pc, #316]	; (80424cc <HAL_GPIO_Init+0x350>)
 804238e:	4293      	cmp	r3, r2
 8042390:	d101      	bne.n	8042396 <HAL_GPIO_Init+0x21a>
 8042392:	2309      	movs	r3, #9
 8042394:	e012      	b.n	80423bc <HAL_GPIO_Init+0x240>
 8042396:	230a      	movs	r3, #10
 8042398:	e010      	b.n	80423bc <HAL_GPIO_Init+0x240>
 804239a:	2308      	movs	r3, #8
 804239c:	e00e      	b.n	80423bc <HAL_GPIO_Init+0x240>
 804239e:	2307      	movs	r3, #7
 80423a0:	e00c      	b.n	80423bc <HAL_GPIO_Init+0x240>
 80423a2:	2306      	movs	r3, #6
 80423a4:	e00a      	b.n	80423bc <HAL_GPIO_Init+0x240>
 80423a6:	2305      	movs	r3, #5
 80423a8:	e008      	b.n	80423bc <HAL_GPIO_Init+0x240>
 80423aa:	2304      	movs	r3, #4
 80423ac:	e006      	b.n	80423bc <HAL_GPIO_Init+0x240>
 80423ae:	2303      	movs	r3, #3
 80423b0:	e004      	b.n	80423bc <HAL_GPIO_Init+0x240>
 80423b2:	2302      	movs	r3, #2
 80423b4:	e002      	b.n	80423bc <HAL_GPIO_Init+0x240>
 80423b6:	2301      	movs	r3, #1
 80423b8:	e000      	b.n	80423bc <HAL_GPIO_Init+0x240>
 80423ba:	2300      	movs	r3, #0
 80423bc:	69fa      	ldr	r2, [r7, #28]
 80423be:	f002 0203 	and.w	r2, r2, #3
 80423c2:	0092      	lsls	r2, r2, #2
 80423c4:	4093      	lsls	r3, r2
 80423c6:	69ba      	ldr	r2, [r7, #24]
 80423c8:	4313      	orrs	r3, r2
 80423ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80423cc:	4935      	ldr	r1, [pc, #212]	; (80424a4 <HAL_GPIO_Init+0x328>)
 80423ce:	69fb      	ldr	r3, [r7, #28]
 80423d0:	089b      	lsrs	r3, r3, #2
 80423d2:	3302      	adds	r3, #2
 80423d4:	69ba      	ldr	r2, [r7, #24]
 80423d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80423da:	4b3d      	ldr	r3, [pc, #244]	; (80424d0 <HAL_GPIO_Init+0x354>)
 80423dc:	689b      	ldr	r3, [r3, #8]
 80423de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80423e0:	693b      	ldr	r3, [r7, #16]
 80423e2:	43db      	mvns	r3, r3
 80423e4:	69ba      	ldr	r2, [r7, #24]
 80423e6:	4013      	ands	r3, r2
 80423e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80423ea:	683b      	ldr	r3, [r7, #0]
 80423ec:	685b      	ldr	r3, [r3, #4]
 80423ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80423f2:	2b00      	cmp	r3, #0
 80423f4:	d003      	beq.n	80423fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80423f6:	69ba      	ldr	r2, [r7, #24]
 80423f8:	693b      	ldr	r3, [r7, #16]
 80423fa:	4313      	orrs	r3, r2
 80423fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80423fe:	4a34      	ldr	r2, [pc, #208]	; (80424d0 <HAL_GPIO_Init+0x354>)
 8042400:	69bb      	ldr	r3, [r7, #24]
 8042402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8042404:	4b32      	ldr	r3, [pc, #200]	; (80424d0 <HAL_GPIO_Init+0x354>)
 8042406:	68db      	ldr	r3, [r3, #12]
 8042408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 804240a:	693b      	ldr	r3, [r7, #16]
 804240c:	43db      	mvns	r3, r3
 804240e:	69ba      	ldr	r2, [r7, #24]
 8042410:	4013      	ands	r3, r2
 8042412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8042414:	683b      	ldr	r3, [r7, #0]
 8042416:	685b      	ldr	r3, [r3, #4]
 8042418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804241c:	2b00      	cmp	r3, #0
 804241e:	d003      	beq.n	8042428 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8042420:	69ba      	ldr	r2, [r7, #24]
 8042422:	693b      	ldr	r3, [r7, #16]
 8042424:	4313      	orrs	r3, r2
 8042426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8042428:	4a29      	ldr	r2, [pc, #164]	; (80424d0 <HAL_GPIO_Init+0x354>)
 804242a:	69bb      	ldr	r3, [r7, #24]
 804242c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 804242e:	4b28      	ldr	r3, [pc, #160]	; (80424d0 <HAL_GPIO_Init+0x354>)
 8042430:	685b      	ldr	r3, [r3, #4]
 8042432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8042434:	693b      	ldr	r3, [r7, #16]
 8042436:	43db      	mvns	r3, r3
 8042438:	69ba      	ldr	r2, [r7, #24]
 804243a:	4013      	ands	r3, r2
 804243c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 804243e:	683b      	ldr	r3, [r7, #0]
 8042440:	685b      	ldr	r3, [r3, #4]
 8042442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042446:	2b00      	cmp	r3, #0
 8042448:	d003      	beq.n	8042452 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 804244a:	69ba      	ldr	r2, [r7, #24]
 804244c:	693b      	ldr	r3, [r7, #16]
 804244e:	4313      	orrs	r3, r2
 8042450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8042452:	4a1f      	ldr	r2, [pc, #124]	; (80424d0 <HAL_GPIO_Init+0x354>)
 8042454:	69bb      	ldr	r3, [r7, #24]
 8042456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8042458:	4b1d      	ldr	r3, [pc, #116]	; (80424d0 <HAL_GPIO_Init+0x354>)
 804245a:	681b      	ldr	r3, [r3, #0]
 804245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 804245e:	693b      	ldr	r3, [r7, #16]
 8042460:	43db      	mvns	r3, r3
 8042462:	69ba      	ldr	r2, [r7, #24]
 8042464:	4013      	ands	r3, r2
 8042466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8042468:	683b      	ldr	r3, [r7, #0]
 804246a:	685b      	ldr	r3, [r3, #4]
 804246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8042470:	2b00      	cmp	r3, #0
 8042472:	d003      	beq.n	804247c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8042474:	69ba      	ldr	r2, [r7, #24]
 8042476:	693b      	ldr	r3, [r7, #16]
 8042478:	4313      	orrs	r3, r2
 804247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 804247c:	4a14      	ldr	r2, [pc, #80]	; (80424d0 <HAL_GPIO_Init+0x354>)
 804247e:	69bb      	ldr	r3, [r7, #24]
 8042480:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8042482:	69fb      	ldr	r3, [r7, #28]
 8042484:	3301      	adds	r3, #1
 8042486:	61fb      	str	r3, [r7, #28]
 8042488:	69fb      	ldr	r3, [r7, #28]
 804248a:	2b0f      	cmp	r3, #15
 804248c:	f67f ae86 	bls.w	804219c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8042490:	bf00      	nop
 8042492:	bf00      	nop
 8042494:	3724      	adds	r7, #36	; 0x24
 8042496:	46bd      	mov	sp, r7
 8042498:	f85d 7b04 	ldr.w	r7, [sp], #4
 804249c:	4770      	bx	lr
 804249e:	bf00      	nop
 80424a0:	40023800 	.word	0x40023800
 80424a4:	40013800 	.word	0x40013800
 80424a8:	40020000 	.word	0x40020000
 80424ac:	40020400 	.word	0x40020400
 80424b0:	40020800 	.word	0x40020800
 80424b4:	40020c00 	.word	0x40020c00
 80424b8:	40021000 	.word	0x40021000
 80424bc:	40021400 	.word	0x40021400
 80424c0:	40021800 	.word	0x40021800
 80424c4:	40021c00 	.word	0x40021c00
 80424c8:	40022000 	.word	0x40022000
 80424cc:	40022400 	.word	0x40022400
 80424d0:	40013c00 	.word	0x40013c00

080424d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80424d4:	b480      	push	{r7}
 80424d6:	b083      	sub	sp, #12
 80424d8:	af00      	add	r7, sp, #0
 80424da:	6078      	str	r0, [r7, #4]
 80424dc:	460b      	mov	r3, r1
 80424de:	807b      	strh	r3, [r7, #2]
 80424e0:	4613      	mov	r3, r2
 80424e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80424e4:	787b      	ldrb	r3, [r7, #1]
 80424e6:	2b00      	cmp	r3, #0
 80424e8:	d003      	beq.n	80424f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80424ea:	887a      	ldrh	r2, [r7, #2]
 80424ec:	687b      	ldr	r3, [r7, #4]
 80424ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80424f0:	e003      	b.n	80424fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80424f2:	887b      	ldrh	r3, [r7, #2]
 80424f4:	041a      	lsls	r2, r3, #16
 80424f6:	687b      	ldr	r3, [r7, #4]
 80424f8:	619a      	str	r2, [r3, #24]
}
 80424fa:	bf00      	nop
 80424fc:	370c      	adds	r7, #12
 80424fe:	46bd      	mov	sp, r7
 8042500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042504:	4770      	bx	lr

08042506 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8042506:	b480      	push	{r7}
 8042508:	b085      	sub	sp, #20
 804250a:	af00      	add	r7, sp, #0
 804250c:	6078      	str	r0, [r7, #4]
 804250e:	460b      	mov	r3, r1
 8042510:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8042512:	687b      	ldr	r3, [r7, #4]
 8042514:	695b      	ldr	r3, [r3, #20]
 8042516:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8042518:	887a      	ldrh	r2, [r7, #2]
 804251a:	68fb      	ldr	r3, [r7, #12]
 804251c:	4013      	ands	r3, r2
 804251e:	041a      	lsls	r2, r3, #16
 8042520:	68fb      	ldr	r3, [r7, #12]
 8042522:	43d9      	mvns	r1, r3
 8042524:	887b      	ldrh	r3, [r7, #2]
 8042526:	400b      	ands	r3, r1
 8042528:	431a      	orrs	r2, r3
 804252a:	687b      	ldr	r3, [r7, #4]
 804252c:	619a      	str	r2, [r3, #24]
}
 804252e:	bf00      	nop
 8042530:	3714      	adds	r7, #20
 8042532:	46bd      	mov	sp, r7
 8042534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042538:	4770      	bx	lr
	...

0804253c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 804253c:	b580      	push	{r7, lr}
 804253e:	b086      	sub	sp, #24
 8042540:	af00      	add	r7, sp, #0
 8042542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8042544:	2300      	movs	r3, #0
 8042546:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8042548:	687b      	ldr	r3, [r7, #4]
 804254a:	2b00      	cmp	r3, #0
 804254c:	d101      	bne.n	8042552 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 804254e:	2301      	movs	r3, #1
 8042550:	e29b      	b.n	8042a8a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8042552:	687b      	ldr	r3, [r7, #4]
 8042554:	681b      	ldr	r3, [r3, #0]
 8042556:	f003 0301 	and.w	r3, r3, #1
 804255a:	2b00      	cmp	r3, #0
 804255c:	f000 8087 	beq.w	804266e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8042560:	4b96      	ldr	r3, [pc, #600]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 8042562:	689b      	ldr	r3, [r3, #8]
 8042564:	f003 030c 	and.w	r3, r3, #12
 8042568:	2b04      	cmp	r3, #4
 804256a:	d00c      	beq.n	8042586 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804256c:	4b93      	ldr	r3, [pc, #588]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 804256e:	689b      	ldr	r3, [r3, #8]
 8042570:	f003 030c 	and.w	r3, r3, #12
 8042574:	2b08      	cmp	r3, #8
 8042576:	d112      	bne.n	804259e <HAL_RCC_OscConfig+0x62>
 8042578:	4b90      	ldr	r3, [pc, #576]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 804257a:	685b      	ldr	r3, [r3, #4]
 804257c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042584:	d10b      	bne.n	804259e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8042586:	4b8d      	ldr	r3, [pc, #564]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 8042588:	681b      	ldr	r3, [r3, #0]
 804258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804258e:	2b00      	cmp	r3, #0
 8042590:	d06c      	beq.n	804266c <HAL_RCC_OscConfig+0x130>
 8042592:	687b      	ldr	r3, [r7, #4]
 8042594:	685b      	ldr	r3, [r3, #4]
 8042596:	2b00      	cmp	r3, #0
 8042598:	d168      	bne.n	804266c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 804259a:	2301      	movs	r3, #1
 804259c:	e275      	b.n	8042a8a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 804259e:	687b      	ldr	r3, [r7, #4]
 80425a0:	685b      	ldr	r3, [r3, #4]
 80425a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80425a6:	d106      	bne.n	80425b6 <HAL_RCC_OscConfig+0x7a>
 80425a8:	4b84      	ldr	r3, [pc, #528]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80425aa:	681b      	ldr	r3, [r3, #0]
 80425ac:	4a83      	ldr	r2, [pc, #524]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80425ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80425b2:	6013      	str	r3, [r2, #0]
 80425b4:	e02e      	b.n	8042614 <HAL_RCC_OscConfig+0xd8>
 80425b6:	687b      	ldr	r3, [r7, #4]
 80425b8:	685b      	ldr	r3, [r3, #4]
 80425ba:	2b00      	cmp	r3, #0
 80425bc:	d10c      	bne.n	80425d8 <HAL_RCC_OscConfig+0x9c>
 80425be:	4b7f      	ldr	r3, [pc, #508]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80425c0:	681b      	ldr	r3, [r3, #0]
 80425c2:	4a7e      	ldr	r2, [pc, #504]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80425c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80425c8:	6013      	str	r3, [r2, #0]
 80425ca:	4b7c      	ldr	r3, [pc, #496]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80425cc:	681b      	ldr	r3, [r3, #0]
 80425ce:	4a7b      	ldr	r2, [pc, #492]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80425d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80425d4:	6013      	str	r3, [r2, #0]
 80425d6:	e01d      	b.n	8042614 <HAL_RCC_OscConfig+0xd8>
 80425d8:	687b      	ldr	r3, [r7, #4]
 80425da:	685b      	ldr	r3, [r3, #4]
 80425dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80425e0:	d10c      	bne.n	80425fc <HAL_RCC_OscConfig+0xc0>
 80425e2:	4b76      	ldr	r3, [pc, #472]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80425e4:	681b      	ldr	r3, [r3, #0]
 80425e6:	4a75      	ldr	r2, [pc, #468]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80425e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80425ec:	6013      	str	r3, [r2, #0]
 80425ee:	4b73      	ldr	r3, [pc, #460]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80425f0:	681b      	ldr	r3, [r3, #0]
 80425f2:	4a72      	ldr	r2, [pc, #456]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80425f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80425f8:	6013      	str	r3, [r2, #0]
 80425fa:	e00b      	b.n	8042614 <HAL_RCC_OscConfig+0xd8>
 80425fc:	4b6f      	ldr	r3, [pc, #444]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80425fe:	681b      	ldr	r3, [r3, #0]
 8042600:	4a6e      	ldr	r2, [pc, #440]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 8042602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8042606:	6013      	str	r3, [r2, #0]
 8042608:	4b6c      	ldr	r3, [pc, #432]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 804260a:	681b      	ldr	r3, [r3, #0]
 804260c:	4a6b      	ldr	r2, [pc, #428]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 804260e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8042612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8042614:	687b      	ldr	r3, [r7, #4]
 8042616:	685b      	ldr	r3, [r3, #4]
 8042618:	2b00      	cmp	r3, #0
 804261a:	d013      	beq.n	8042644 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804261c:	f7fe fe08 	bl	8041230 <HAL_GetTick>
 8042620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8042622:	e008      	b.n	8042636 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8042624:	f7fe fe04 	bl	8041230 <HAL_GetTick>
 8042628:	4602      	mov	r2, r0
 804262a:	693b      	ldr	r3, [r7, #16]
 804262c:	1ad3      	subs	r3, r2, r3
 804262e:	2b64      	cmp	r3, #100	; 0x64
 8042630:	d901      	bls.n	8042636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8042632:	2303      	movs	r3, #3
 8042634:	e229      	b.n	8042a8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8042636:	4b61      	ldr	r3, [pc, #388]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 8042638:	681b      	ldr	r3, [r3, #0]
 804263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804263e:	2b00      	cmp	r3, #0
 8042640:	d0f0      	beq.n	8042624 <HAL_RCC_OscConfig+0xe8>
 8042642:	e014      	b.n	804266e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042644:	f7fe fdf4 	bl	8041230 <HAL_GetTick>
 8042648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804264a:	e008      	b.n	804265e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 804264c:	f7fe fdf0 	bl	8041230 <HAL_GetTick>
 8042650:	4602      	mov	r2, r0
 8042652:	693b      	ldr	r3, [r7, #16]
 8042654:	1ad3      	subs	r3, r2, r3
 8042656:	2b64      	cmp	r3, #100	; 0x64
 8042658:	d901      	bls.n	804265e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 804265a:	2303      	movs	r3, #3
 804265c:	e215      	b.n	8042a8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804265e:	4b57      	ldr	r3, [pc, #348]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 8042660:	681b      	ldr	r3, [r3, #0]
 8042662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042666:	2b00      	cmp	r3, #0
 8042668:	d1f0      	bne.n	804264c <HAL_RCC_OscConfig+0x110>
 804266a:	e000      	b.n	804266e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804266c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 804266e:	687b      	ldr	r3, [r7, #4]
 8042670:	681b      	ldr	r3, [r3, #0]
 8042672:	f003 0302 	and.w	r3, r3, #2
 8042676:	2b00      	cmp	r3, #0
 8042678:	d069      	beq.n	804274e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 804267a:	4b50      	ldr	r3, [pc, #320]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 804267c:	689b      	ldr	r3, [r3, #8]
 804267e:	f003 030c 	and.w	r3, r3, #12
 8042682:	2b00      	cmp	r3, #0
 8042684:	d00b      	beq.n	804269e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8042686:	4b4d      	ldr	r3, [pc, #308]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 8042688:	689b      	ldr	r3, [r3, #8]
 804268a:	f003 030c 	and.w	r3, r3, #12
 804268e:	2b08      	cmp	r3, #8
 8042690:	d11c      	bne.n	80426cc <HAL_RCC_OscConfig+0x190>
 8042692:	4b4a      	ldr	r3, [pc, #296]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 8042694:	685b      	ldr	r3, [r3, #4]
 8042696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804269a:	2b00      	cmp	r3, #0
 804269c:	d116      	bne.n	80426cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 804269e:	4b47      	ldr	r3, [pc, #284]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80426a0:	681b      	ldr	r3, [r3, #0]
 80426a2:	f003 0302 	and.w	r3, r3, #2
 80426a6:	2b00      	cmp	r3, #0
 80426a8:	d005      	beq.n	80426b6 <HAL_RCC_OscConfig+0x17a>
 80426aa:	687b      	ldr	r3, [r7, #4]
 80426ac:	68db      	ldr	r3, [r3, #12]
 80426ae:	2b01      	cmp	r3, #1
 80426b0:	d001      	beq.n	80426b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80426b2:	2301      	movs	r3, #1
 80426b4:	e1e9      	b.n	8042a8a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80426b6:	4b41      	ldr	r3, [pc, #260]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80426b8:	681b      	ldr	r3, [r3, #0]
 80426ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80426be:	687b      	ldr	r3, [r7, #4]
 80426c0:	691b      	ldr	r3, [r3, #16]
 80426c2:	00db      	lsls	r3, r3, #3
 80426c4:	493d      	ldr	r1, [pc, #244]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80426c6:	4313      	orrs	r3, r2
 80426c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80426ca:	e040      	b.n	804274e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80426cc:	687b      	ldr	r3, [r7, #4]
 80426ce:	68db      	ldr	r3, [r3, #12]
 80426d0:	2b00      	cmp	r3, #0
 80426d2:	d023      	beq.n	804271c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80426d4:	4b39      	ldr	r3, [pc, #228]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80426d6:	681b      	ldr	r3, [r3, #0]
 80426d8:	4a38      	ldr	r2, [pc, #224]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80426da:	f043 0301 	orr.w	r3, r3, #1
 80426de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80426e0:	f7fe fda6 	bl	8041230 <HAL_GetTick>
 80426e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80426e6:	e008      	b.n	80426fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80426e8:	f7fe fda2 	bl	8041230 <HAL_GetTick>
 80426ec:	4602      	mov	r2, r0
 80426ee:	693b      	ldr	r3, [r7, #16]
 80426f0:	1ad3      	subs	r3, r2, r3
 80426f2:	2b02      	cmp	r3, #2
 80426f4:	d901      	bls.n	80426fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80426f6:	2303      	movs	r3, #3
 80426f8:	e1c7      	b.n	8042a8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80426fa:	4b30      	ldr	r3, [pc, #192]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 80426fc:	681b      	ldr	r3, [r3, #0]
 80426fe:	f003 0302 	and.w	r3, r3, #2
 8042702:	2b00      	cmp	r3, #0
 8042704:	d0f0      	beq.n	80426e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8042706:	4b2d      	ldr	r3, [pc, #180]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 8042708:	681b      	ldr	r3, [r3, #0]
 804270a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 804270e:	687b      	ldr	r3, [r7, #4]
 8042710:	691b      	ldr	r3, [r3, #16]
 8042712:	00db      	lsls	r3, r3, #3
 8042714:	4929      	ldr	r1, [pc, #164]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 8042716:	4313      	orrs	r3, r2
 8042718:	600b      	str	r3, [r1, #0]
 804271a:	e018      	b.n	804274e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 804271c:	4b27      	ldr	r3, [pc, #156]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 804271e:	681b      	ldr	r3, [r3, #0]
 8042720:	4a26      	ldr	r2, [pc, #152]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 8042722:	f023 0301 	bic.w	r3, r3, #1
 8042726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042728:	f7fe fd82 	bl	8041230 <HAL_GetTick>
 804272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804272e:	e008      	b.n	8042742 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8042730:	f7fe fd7e 	bl	8041230 <HAL_GetTick>
 8042734:	4602      	mov	r2, r0
 8042736:	693b      	ldr	r3, [r7, #16]
 8042738:	1ad3      	subs	r3, r2, r3
 804273a:	2b02      	cmp	r3, #2
 804273c:	d901      	bls.n	8042742 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 804273e:	2303      	movs	r3, #3
 8042740:	e1a3      	b.n	8042a8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8042742:	4b1e      	ldr	r3, [pc, #120]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 8042744:	681b      	ldr	r3, [r3, #0]
 8042746:	f003 0302 	and.w	r3, r3, #2
 804274a:	2b00      	cmp	r3, #0
 804274c:	d1f0      	bne.n	8042730 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804274e:	687b      	ldr	r3, [r7, #4]
 8042750:	681b      	ldr	r3, [r3, #0]
 8042752:	f003 0308 	and.w	r3, r3, #8
 8042756:	2b00      	cmp	r3, #0
 8042758:	d038      	beq.n	80427cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 804275a:	687b      	ldr	r3, [r7, #4]
 804275c:	695b      	ldr	r3, [r3, #20]
 804275e:	2b00      	cmp	r3, #0
 8042760:	d019      	beq.n	8042796 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8042762:	4b16      	ldr	r3, [pc, #88]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 8042764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042766:	4a15      	ldr	r2, [pc, #84]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 8042768:	f043 0301 	orr.w	r3, r3, #1
 804276c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804276e:	f7fe fd5f 	bl	8041230 <HAL_GetTick>
 8042772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8042774:	e008      	b.n	8042788 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8042776:	f7fe fd5b 	bl	8041230 <HAL_GetTick>
 804277a:	4602      	mov	r2, r0
 804277c:	693b      	ldr	r3, [r7, #16]
 804277e:	1ad3      	subs	r3, r2, r3
 8042780:	2b02      	cmp	r3, #2
 8042782:	d901      	bls.n	8042788 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8042784:	2303      	movs	r3, #3
 8042786:	e180      	b.n	8042a8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8042788:	4b0c      	ldr	r3, [pc, #48]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 804278a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804278c:	f003 0302 	and.w	r3, r3, #2
 8042790:	2b00      	cmp	r3, #0
 8042792:	d0f0      	beq.n	8042776 <HAL_RCC_OscConfig+0x23a>
 8042794:	e01a      	b.n	80427cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8042796:	4b09      	ldr	r3, [pc, #36]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 8042798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804279a:	4a08      	ldr	r2, [pc, #32]	; (80427bc <HAL_RCC_OscConfig+0x280>)
 804279c:	f023 0301 	bic.w	r3, r3, #1
 80427a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80427a2:	f7fe fd45 	bl	8041230 <HAL_GetTick>
 80427a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80427a8:	e00a      	b.n	80427c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80427aa:	f7fe fd41 	bl	8041230 <HAL_GetTick>
 80427ae:	4602      	mov	r2, r0
 80427b0:	693b      	ldr	r3, [r7, #16]
 80427b2:	1ad3      	subs	r3, r2, r3
 80427b4:	2b02      	cmp	r3, #2
 80427b6:	d903      	bls.n	80427c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80427b8:	2303      	movs	r3, #3
 80427ba:	e166      	b.n	8042a8a <HAL_RCC_OscConfig+0x54e>
 80427bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80427c0:	4b92      	ldr	r3, [pc, #584]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 80427c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80427c4:	f003 0302 	and.w	r3, r3, #2
 80427c8:	2b00      	cmp	r3, #0
 80427ca:	d1ee      	bne.n	80427aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80427cc:	687b      	ldr	r3, [r7, #4]
 80427ce:	681b      	ldr	r3, [r3, #0]
 80427d0:	f003 0304 	and.w	r3, r3, #4
 80427d4:	2b00      	cmp	r3, #0
 80427d6:	f000 80a4 	beq.w	8042922 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80427da:	4b8c      	ldr	r3, [pc, #560]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 80427dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80427de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80427e2:	2b00      	cmp	r3, #0
 80427e4:	d10d      	bne.n	8042802 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80427e6:	4b89      	ldr	r3, [pc, #548]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 80427e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80427ea:	4a88      	ldr	r2, [pc, #544]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 80427ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80427f0:	6413      	str	r3, [r2, #64]	; 0x40
 80427f2:	4b86      	ldr	r3, [pc, #536]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 80427f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80427f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80427fa:	60bb      	str	r3, [r7, #8]
 80427fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80427fe:	2301      	movs	r3, #1
 8042800:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8042802:	4b83      	ldr	r3, [pc, #524]	; (8042a10 <HAL_RCC_OscConfig+0x4d4>)
 8042804:	681b      	ldr	r3, [r3, #0]
 8042806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804280a:	2b00      	cmp	r3, #0
 804280c:	d118      	bne.n	8042840 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 804280e:	4b80      	ldr	r3, [pc, #512]	; (8042a10 <HAL_RCC_OscConfig+0x4d4>)
 8042810:	681b      	ldr	r3, [r3, #0]
 8042812:	4a7f      	ldr	r2, [pc, #508]	; (8042a10 <HAL_RCC_OscConfig+0x4d4>)
 8042814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8042818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 804281a:	f7fe fd09 	bl	8041230 <HAL_GetTick>
 804281e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8042820:	e008      	b.n	8042834 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8042822:	f7fe fd05 	bl	8041230 <HAL_GetTick>
 8042826:	4602      	mov	r2, r0
 8042828:	693b      	ldr	r3, [r7, #16]
 804282a:	1ad3      	subs	r3, r2, r3
 804282c:	2b64      	cmp	r3, #100	; 0x64
 804282e:	d901      	bls.n	8042834 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8042830:	2303      	movs	r3, #3
 8042832:	e12a      	b.n	8042a8a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8042834:	4b76      	ldr	r3, [pc, #472]	; (8042a10 <HAL_RCC_OscConfig+0x4d4>)
 8042836:	681b      	ldr	r3, [r3, #0]
 8042838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804283c:	2b00      	cmp	r3, #0
 804283e:	d0f0      	beq.n	8042822 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8042840:	687b      	ldr	r3, [r7, #4]
 8042842:	689b      	ldr	r3, [r3, #8]
 8042844:	2b01      	cmp	r3, #1
 8042846:	d106      	bne.n	8042856 <HAL_RCC_OscConfig+0x31a>
 8042848:	4b70      	ldr	r3, [pc, #448]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 804284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804284c:	4a6f      	ldr	r2, [pc, #444]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 804284e:	f043 0301 	orr.w	r3, r3, #1
 8042852:	6713      	str	r3, [r2, #112]	; 0x70
 8042854:	e02d      	b.n	80428b2 <HAL_RCC_OscConfig+0x376>
 8042856:	687b      	ldr	r3, [r7, #4]
 8042858:	689b      	ldr	r3, [r3, #8]
 804285a:	2b00      	cmp	r3, #0
 804285c:	d10c      	bne.n	8042878 <HAL_RCC_OscConfig+0x33c>
 804285e:	4b6b      	ldr	r3, [pc, #428]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 8042860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042862:	4a6a      	ldr	r2, [pc, #424]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 8042864:	f023 0301 	bic.w	r3, r3, #1
 8042868:	6713      	str	r3, [r2, #112]	; 0x70
 804286a:	4b68      	ldr	r3, [pc, #416]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 804286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804286e:	4a67      	ldr	r2, [pc, #412]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 8042870:	f023 0304 	bic.w	r3, r3, #4
 8042874:	6713      	str	r3, [r2, #112]	; 0x70
 8042876:	e01c      	b.n	80428b2 <HAL_RCC_OscConfig+0x376>
 8042878:	687b      	ldr	r3, [r7, #4]
 804287a:	689b      	ldr	r3, [r3, #8]
 804287c:	2b05      	cmp	r3, #5
 804287e:	d10c      	bne.n	804289a <HAL_RCC_OscConfig+0x35e>
 8042880:	4b62      	ldr	r3, [pc, #392]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 8042882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042884:	4a61      	ldr	r2, [pc, #388]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 8042886:	f043 0304 	orr.w	r3, r3, #4
 804288a:	6713      	str	r3, [r2, #112]	; 0x70
 804288c:	4b5f      	ldr	r3, [pc, #380]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 804288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042890:	4a5e      	ldr	r2, [pc, #376]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 8042892:	f043 0301 	orr.w	r3, r3, #1
 8042896:	6713      	str	r3, [r2, #112]	; 0x70
 8042898:	e00b      	b.n	80428b2 <HAL_RCC_OscConfig+0x376>
 804289a:	4b5c      	ldr	r3, [pc, #368]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 804289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804289e:	4a5b      	ldr	r2, [pc, #364]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 80428a0:	f023 0301 	bic.w	r3, r3, #1
 80428a4:	6713      	str	r3, [r2, #112]	; 0x70
 80428a6:	4b59      	ldr	r3, [pc, #356]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 80428a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80428aa:	4a58      	ldr	r2, [pc, #352]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 80428ac:	f023 0304 	bic.w	r3, r3, #4
 80428b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80428b2:	687b      	ldr	r3, [r7, #4]
 80428b4:	689b      	ldr	r3, [r3, #8]
 80428b6:	2b00      	cmp	r3, #0
 80428b8:	d015      	beq.n	80428e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80428ba:	f7fe fcb9 	bl	8041230 <HAL_GetTick>
 80428be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80428c0:	e00a      	b.n	80428d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80428c2:	f7fe fcb5 	bl	8041230 <HAL_GetTick>
 80428c6:	4602      	mov	r2, r0
 80428c8:	693b      	ldr	r3, [r7, #16]
 80428ca:	1ad3      	subs	r3, r2, r3
 80428cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80428d0:	4293      	cmp	r3, r2
 80428d2:	d901      	bls.n	80428d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80428d4:	2303      	movs	r3, #3
 80428d6:	e0d8      	b.n	8042a8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80428d8:	4b4c      	ldr	r3, [pc, #304]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 80428da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80428dc:	f003 0302 	and.w	r3, r3, #2
 80428e0:	2b00      	cmp	r3, #0
 80428e2:	d0ee      	beq.n	80428c2 <HAL_RCC_OscConfig+0x386>
 80428e4:	e014      	b.n	8042910 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80428e6:	f7fe fca3 	bl	8041230 <HAL_GetTick>
 80428ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80428ec:	e00a      	b.n	8042904 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80428ee:	f7fe fc9f 	bl	8041230 <HAL_GetTick>
 80428f2:	4602      	mov	r2, r0
 80428f4:	693b      	ldr	r3, [r7, #16]
 80428f6:	1ad3      	subs	r3, r2, r3
 80428f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80428fc:	4293      	cmp	r3, r2
 80428fe:	d901      	bls.n	8042904 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8042900:	2303      	movs	r3, #3
 8042902:	e0c2      	b.n	8042a8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8042904:	4b41      	ldr	r3, [pc, #260]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 8042906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042908:	f003 0302 	and.w	r3, r3, #2
 804290c:	2b00      	cmp	r3, #0
 804290e:	d1ee      	bne.n	80428ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8042910:	7dfb      	ldrb	r3, [r7, #23]
 8042912:	2b01      	cmp	r3, #1
 8042914:	d105      	bne.n	8042922 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8042916:	4b3d      	ldr	r3, [pc, #244]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 8042918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804291a:	4a3c      	ldr	r2, [pc, #240]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 804291c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042920:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8042922:	687b      	ldr	r3, [r7, #4]
 8042924:	699b      	ldr	r3, [r3, #24]
 8042926:	2b00      	cmp	r3, #0
 8042928:	f000 80ae 	beq.w	8042a88 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 804292c:	4b37      	ldr	r3, [pc, #220]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 804292e:	689b      	ldr	r3, [r3, #8]
 8042930:	f003 030c 	and.w	r3, r3, #12
 8042934:	2b08      	cmp	r3, #8
 8042936:	d06d      	beq.n	8042a14 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8042938:	687b      	ldr	r3, [r7, #4]
 804293a:	699b      	ldr	r3, [r3, #24]
 804293c:	2b02      	cmp	r3, #2
 804293e:	d14b      	bne.n	80429d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8042940:	4b32      	ldr	r3, [pc, #200]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 8042942:	681b      	ldr	r3, [r3, #0]
 8042944:	4a31      	ldr	r2, [pc, #196]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 8042946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 804294a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804294c:	f7fe fc70 	bl	8041230 <HAL_GetTick>
 8042950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8042952:	e008      	b.n	8042966 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8042954:	f7fe fc6c 	bl	8041230 <HAL_GetTick>
 8042958:	4602      	mov	r2, r0
 804295a:	693b      	ldr	r3, [r7, #16]
 804295c:	1ad3      	subs	r3, r2, r3
 804295e:	2b02      	cmp	r3, #2
 8042960:	d901      	bls.n	8042966 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8042962:	2303      	movs	r3, #3
 8042964:	e091      	b.n	8042a8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8042966:	4b29      	ldr	r3, [pc, #164]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 8042968:	681b      	ldr	r3, [r3, #0]
 804296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804296e:	2b00      	cmp	r3, #0
 8042970:	d1f0      	bne.n	8042954 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8042972:	687b      	ldr	r3, [r7, #4]
 8042974:	69da      	ldr	r2, [r3, #28]
 8042976:	687b      	ldr	r3, [r7, #4]
 8042978:	6a1b      	ldr	r3, [r3, #32]
 804297a:	431a      	orrs	r2, r3
 804297c:	687b      	ldr	r3, [r7, #4]
 804297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042980:	019b      	lsls	r3, r3, #6
 8042982:	431a      	orrs	r2, r3
 8042984:	687b      	ldr	r3, [r7, #4]
 8042986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042988:	085b      	lsrs	r3, r3, #1
 804298a:	3b01      	subs	r3, #1
 804298c:	041b      	lsls	r3, r3, #16
 804298e:	431a      	orrs	r2, r3
 8042990:	687b      	ldr	r3, [r7, #4]
 8042992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042994:	061b      	lsls	r3, r3, #24
 8042996:	431a      	orrs	r2, r3
 8042998:	687b      	ldr	r3, [r7, #4]
 804299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804299c:	071b      	lsls	r3, r3, #28
 804299e:	491b      	ldr	r1, [pc, #108]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 80429a0:	4313      	orrs	r3, r2
 80429a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80429a4:	4b19      	ldr	r3, [pc, #100]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 80429a6:	681b      	ldr	r3, [r3, #0]
 80429a8:	4a18      	ldr	r2, [pc, #96]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 80429aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80429ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80429b0:	f7fe fc3e 	bl	8041230 <HAL_GetTick>
 80429b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80429b6:	e008      	b.n	80429ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80429b8:	f7fe fc3a 	bl	8041230 <HAL_GetTick>
 80429bc:	4602      	mov	r2, r0
 80429be:	693b      	ldr	r3, [r7, #16]
 80429c0:	1ad3      	subs	r3, r2, r3
 80429c2:	2b02      	cmp	r3, #2
 80429c4:	d901      	bls.n	80429ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80429c6:	2303      	movs	r3, #3
 80429c8:	e05f      	b.n	8042a8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80429ca:	4b10      	ldr	r3, [pc, #64]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 80429cc:	681b      	ldr	r3, [r3, #0]
 80429ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80429d2:	2b00      	cmp	r3, #0
 80429d4:	d0f0      	beq.n	80429b8 <HAL_RCC_OscConfig+0x47c>
 80429d6:	e057      	b.n	8042a88 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80429d8:	4b0c      	ldr	r3, [pc, #48]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 80429da:	681b      	ldr	r3, [r3, #0]
 80429dc:	4a0b      	ldr	r2, [pc, #44]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 80429de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80429e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80429e4:	f7fe fc24 	bl	8041230 <HAL_GetTick>
 80429e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80429ea:	e008      	b.n	80429fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80429ec:	f7fe fc20 	bl	8041230 <HAL_GetTick>
 80429f0:	4602      	mov	r2, r0
 80429f2:	693b      	ldr	r3, [r7, #16]
 80429f4:	1ad3      	subs	r3, r2, r3
 80429f6:	2b02      	cmp	r3, #2
 80429f8:	d901      	bls.n	80429fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80429fa:	2303      	movs	r3, #3
 80429fc:	e045      	b.n	8042a8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80429fe:	4b03      	ldr	r3, [pc, #12]	; (8042a0c <HAL_RCC_OscConfig+0x4d0>)
 8042a00:	681b      	ldr	r3, [r3, #0]
 8042a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042a06:	2b00      	cmp	r3, #0
 8042a08:	d1f0      	bne.n	80429ec <HAL_RCC_OscConfig+0x4b0>
 8042a0a:	e03d      	b.n	8042a88 <HAL_RCC_OscConfig+0x54c>
 8042a0c:	40023800 	.word	0x40023800
 8042a10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8042a14:	4b1f      	ldr	r3, [pc, #124]	; (8042a94 <HAL_RCC_OscConfig+0x558>)
 8042a16:	685b      	ldr	r3, [r3, #4]
 8042a18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8042a1a:	687b      	ldr	r3, [r7, #4]
 8042a1c:	699b      	ldr	r3, [r3, #24]
 8042a1e:	2b01      	cmp	r3, #1
 8042a20:	d030      	beq.n	8042a84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8042a22:	68fb      	ldr	r3, [r7, #12]
 8042a24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8042a28:	687b      	ldr	r3, [r7, #4]
 8042a2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8042a2c:	429a      	cmp	r2, r3
 8042a2e:	d129      	bne.n	8042a84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8042a30:	68fb      	ldr	r3, [r7, #12]
 8042a32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8042a36:	687b      	ldr	r3, [r7, #4]
 8042a38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8042a3a:	429a      	cmp	r2, r3
 8042a3c:	d122      	bne.n	8042a84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8042a3e:	68fa      	ldr	r2, [r7, #12]
 8042a40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8042a44:	4013      	ands	r3, r2
 8042a46:	687a      	ldr	r2, [r7, #4]
 8042a48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8042a4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8042a4c:	4293      	cmp	r3, r2
 8042a4e:	d119      	bne.n	8042a84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8042a50:	68fb      	ldr	r3, [r7, #12]
 8042a52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8042a56:	687b      	ldr	r3, [r7, #4]
 8042a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042a5a:	085b      	lsrs	r3, r3, #1
 8042a5c:	3b01      	subs	r3, #1
 8042a5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8042a60:	429a      	cmp	r2, r3
 8042a62:	d10f      	bne.n	8042a84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8042a64:	68fb      	ldr	r3, [r7, #12]
 8042a66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8042a6a:	687b      	ldr	r3, [r7, #4]
 8042a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042a6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8042a70:	429a      	cmp	r2, r3
 8042a72:	d107      	bne.n	8042a84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8042a74:	68fb      	ldr	r3, [r7, #12]
 8042a76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8042a7a:	687b      	ldr	r3, [r7, #4]
 8042a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042a7e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8042a80:	429a      	cmp	r2, r3
 8042a82:	d001      	beq.n	8042a88 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8042a84:	2301      	movs	r3, #1
 8042a86:	e000      	b.n	8042a8a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8042a88:	2300      	movs	r3, #0
}
 8042a8a:	4618      	mov	r0, r3
 8042a8c:	3718      	adds	r7, #24
 8042a8e:	46bd      	mov	sp, r7
 8042a90:	bd80      	pop	{r7, pc}
 8042a92:	bf00      	nop
 8042a94:	40023800 	.word	0x40023800

08042a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8042a98:	b580      	push	{r7, lr}
 8042a9a:	b084      	sub	sp, #16
 8042a9c:	af00      	add	r7, sp, #0
 8042a9e:	6078      	str	r0, [r7, #4]
 8042aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8042aa2:	2300      	movs	r3, #0
 8042aa4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8042aa6:	687b      	ldr	r3, [r7, #4]
 8042aa8:	2b00      	cmp	r3, #0
 8042aaa:	d101      	bne.n	8042ab0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8042aac:	2301      	movs	r3, #1
 8042aae:	e0d0      	b.n	8042c52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8042ab0:	4b6a      	ldr	r3, [pc, #424]	; (8042c5c <HAL_RCC_ClockConfig+0x1c4>)
 8042ab2:	681b      	ldr	r3, [r3, #0]
 8042ab4:	f003 030f 	and.w	r3, r3, #15
 8042ab8:	683a      	ldr	r2, [r7, #0]
 8042aba:	429a      	cmp	r2, r3
 8042abc:	d910      	bls.n	8042ae0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8042abe:	4b67      	ldr	r3, [pc, #412]	; (8042c5c <HAL_RCC_ClockConfig+0x1c4>)
 8042ac0:	681b      	ldr	r3, [r3, #0]
 8042ac2:	f023 020f 	bic.w	r2, r3, #15
 8042ac6:	4965      	ldr	r1, [pc, #404]	; (8042c5c <HAL_RCC_ClockConfig+0x1c4>)
 8042ac8:	683b      	ldr	r3, [r7, #0]
 8042aca:	4313      	orrs	r3, r2
 8042acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8042ace:	4b63      	ldr	r3, [pc, #396]	; (8042c5c <HAL_RCC_ClockConfig+0x1c4>)
 8042ad0:	681b      	ldr	r3, [r3, #0]
 8042ad2:	f003 030f 	and.w	r3, r3, #15
 8042ad6:	683a      	ldr	r2, [r7, #0]
 8042ad8:	429a      	cmp	r2, r3
 8042ada:	d001      	beq.n	8042ae0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8042adc:	2301      	movs	r3, #1
 8042ade:	e0b8      	b.n	8042c52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8042ae0:	687b      	ldr	r3, [r7, #4]
 8042ae2:	681b      	ldr	r3, [r3, #0]
 8042ae4:	f003 0302 	and.w	r3, r3, #2
 8042ae8:	2b00      	cmp	r3, #0
 8042aea:	d020      	beq.n	8042b2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8042aec:	687b      	ldr	r3, [r7, #4]
 8042aee:	681b      	ldr	r3, [r3, #0]
 8042af0:	f003 0304 	and.w	r3, r3, #4
 8042af4:	2b00      	cmp	r3, #0
 8042af6:	d005      	beq.n	8042b04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8042af8:	4b59      	ldr	r3, [pc, #356]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042afa:	689b      	ldr	r3, [r3, #8]
 8042afc:	4a58      	ldr	r2, [pc, #352]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8042b02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8042b04:	687b      	ldr	r3, [r7, #4]
 8042b06:	681b      	ldr	r3, [r3, #0]
 8042b08:	f003 0308 	and.w	r3, r3, #8
 8042b0c:	2b00      	cmp	r3, #0
 8042b0e:	d005      	beq.n	8042b1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8042b10:	4b53      	ldr	r3, [pc, #332]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042b12:	689b      	ldr	r3, [r3, #8]
 8042b14:	4a52      	ldr	r2, [pc, #328]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8042b1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8042b1c:	4b50      	ldr	r3, [pc, #320]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042b1e:	689b      	ldr	r3, [r3, #8]
 8042b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8042b24:	687b      	ldr	r3, [r7, #4]
 8042b26:	689b      	ldr	r3, [r3, #8]
 8042b28:	494d      	ldr	r1, [pc, #308]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042b2a:	4313      	orrs	r3, r2
 8042b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8042b2e:	687b      	ldr	r3, [r7, #4]
 8042b30:	681b      	ldr	r3, [r3, #0]
 8042b32:	f003 0301 	and.w	r3, r3, #1
 8042b36:	2b00      	cmp	r3, #0
 8042b38:	d040      	beq.n	8042bbc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8042b3a:	687b      	ldr	r3, [r7, #4]
 8042b3c:	685b      	ldr	r3, [r3, #4]
 8042b3e:	2b01      	cmp	r3, #1
 8042b40:	d107      	bne.n	8042b52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8042b42:	4b47      	ldr	r3, [pc, #284]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042b44:	681b      	ldr	r3, [r3, #0]
 8042b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042b4a:	2b00      	cmp	r3, #0
 8042b4c:	d115      	bne.n	8042b7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8042b4e:	2301      	movs	r3, #1
 8042b50:	e07f      	b.n	8042c52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8042b52:	687b      	ldr	r3, [r7, #4]
 8042b54:	685b      	ldr	r3, [r3, #4]
 8042b56:	2b02      	cmp	r3, #2
 8042b58:	d107      	bne.n	8042b6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8042b5a:	4b41      	ldr	r3, [pc, #260]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042b5c:	681b      	ldr	r3, [r3, #0]
 8042b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042b62:	2b00      	cmp	r3, #0
 8042b64:	d109      	bne.n	8042b7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8042b66:	2301      	movs	r3, #1
 8042b68:	e073      	b.n	8042c52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8042b6a:	4b3d      	ldr	r3, [pc, #244]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042b6c:	681b      	ldr	r3, [r3, #0]
 8042b6e:	f003 0302 	and.w	r3, r3, #2
 8042b72:	2b00      	cmp	r3, #0
 8042b74:	d101      	bne.n	8042b7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8042b76:	2301      	movs	r3, #1
 8042b78:	e06b      	b.n	8042c52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8042b7a:	4b39      	ldr	r3, [pc, #228]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042b7c:	689b      	ldr	r3, [r3, #8]
 8042b7e:	f023 0203 	bic.w	r2, r3, #3
 8042b82:	687b      	ldr	r3, [r7, #4]
 8042b84:	685b      	ldr	r3, [r3, #4]
 8042b86:	4936      	ldr	r1, [pc, #216]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042b88:	4313      	orrs	r3, r2
 8042b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042b8c:	f7fe fb50 	bl	8041230 <HAL_GetTick>
 8042b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8042b92:	e00a      	b.n	8042baa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8042b94:	f7fe fb4c 	bl	8041230 <HAL_GetTick>
 8042b98:	4602      	mov	r2, r0
 8042b9a:	68fb      	ldr	r3, [r7, #12]
 8042b9c:	1ad3      	subs	r3, r2, r3
 8042b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8042ba2:	4293      	cmp	r3, r2
 8042ba4:	d901      	bls.n	8042baa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8042ba6:	2303      	movs	r3, #3
 8042ba8:	e053      	b.n	8042c52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8042baa:	4b2d      	ldr	r3, [pc, #180]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042bac:	689b      	ldr	r3, [r3, #8]
 8042bae:	f003 020c 	and.w	r2, r3, #12
 8042bb2:	687b      	ldr	r3, [r7, #4]
 8042bb4:	685b      	ldr	r3, [r3, #4]
 8042bb6:	009b      	lsls	r3, r3, #2
 8042bb8:	429a      	cmp	r2, r3
 8042bba:	d1eb      	bne.n	8042b94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8042bbc:	4b27      	ldr	r3, [pc, #156]	; (8042c5c <HAL_RCC_ClockConfig+0x1c4>)
 8042bbe:	681b      	ldr	r3, [r3, #0]
 8042bc0:	f003 030f 	and.w	r3, r3, #15
 8042bc4:	683a      	ldr	r2, [r7, #0]
 8042bc6:	429a      	cmp	r2, r3
 8042bc8:	d210      	bcs.n	8042bec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8042bca:	4b24      	ldr	r3, [pc, #144]	; (8042c5c <HAL_RCC_ClockConfig+0x1c4>)
 8042bcc:	681b      	ldr	r3, [r3, #0]
 8042bce:	f023 020f 	bic.w	r2, r3, #15
 8042bd2:	4922      	ldr	r1, [pc, #136]	; (8042c5c <HAL_RCC_ClockConfig+0x1c4>)
 8042bd4:	683b      	ldr	r3, [r7, #0]
 8042bd6:	4313      	orrs	r3, r2
 8042bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8042bda:	4b20      	ldr	r3, [pc, #128]	; (8042c5c <HAL_RCC_ClockConfig+0x1c4>)
 8042bdc:	681b      	ldr	r3, [r3, #0]
 8042bde:	f003 030f 	and.w	r3, r3, #15
 8042be2:	683a      	ldr	r2, [r7, #0]
 8042be4:	429a      	cmp	r2, r3
 8042be6:	d001      	beq.n	8042bec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8042be8:	2301      	movs	r3, #1
 8042bea:	e032      	b.n	8042c52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8042bec:	687b      	ldr	r3, [r7, #4]
 8042bee:	681b      	ldr	r3, [r3, #0]
 8042bf0:	f003 0304 	and.w	r3, r3, #4
 8042bf4:	2b00      	cmp	r3, #0
 8042bf6:	d008      	beq.n	8042c0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8042bf8:	4b19      	ldr	r3, [pc, #100]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042bfa:	689b      	ldr	r3, [r3, #8]
 8042bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8042c00:	687b      	ldr	r3, [r7, #4]
 8042c02:	68db      	ldr	r3, [r3, #12]
 8042c04:	4916      	ldr	r1, [pc, #88]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042c06:	4313      	orrs	r3, r2
 8042c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8042c0a:	687b      	ldr	r3, [r7, #4]
 8042c0c:	681b      	ldr	r3, [r3, #0]
 8042c0e:	f003 0308 	and.w	r3, r3, #8
 8042c12:	2b00      	cmp	r3, #0
 8042c14:	d009      	beq.n	8042c2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8042c16:	4b12      	ldr	r3, [pc, #72]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042c18:	689b      	ldr	r3, [r3, #8]
 8042c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8042c1e:	687b      	ldr	r3, [r7, #4]
 8042c20:	691b      	ldr	r3, [r3, #16]
 8042c22:	00db      	lsls	r3, r3, #3
 8042c24:	490e      	ldr	r1, [pc, #56]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042c26:	4313      	orrs	r3, r2
 8042c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8042c2a:	f000 f821 	bl	8042c70 <HAL_RCC_GetSysClockFreq>
 8042c2e:	4602      	mov	r2, r0
 8042c30:	4b0b      	ldr	r3, [pc, #44]	; (8042c60 <HAL_RCC_ClockConfig+0x1c8>)
 8042c32:	689b      	ldr	r3, [r3, #8]
 8042c34:	091b      	lsrs	r3, r3, #4
 8042c36:	f003 030f 	and.w	r3, r3, #15
 8042c3a:	490a      	ldr	r1, [pc, #40]	; (8042c64 <HAL_RCC_ClockConfig+0x1cc>)
 8042c3c:	5ccb      	ldrb	r3, [r1, r3]
 8042c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8042c42:	4a09      	ldr	r2, [pc, #36]	; (8042c68 <HAL_RCC_ClockConfig+0x1d0>)
 8042c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8042c46:	4b09      	ldr	r3, [pc, #36]	; (8042c6c <HAL_RCC_ClockConfig+0x1d4>)
 8042c48:	681b      	ldr	r3, [r3, #0]
 8042c4a:	4618      	mov	r0, r3
 8042c4c:	f7fe faac 	bl	80411a8 <HAL_InitTick>

  return HAL_OK;
 8042c50:	2300      	movs	r3, #0
}
 8042c52:	4618      	mov	r0, r3
 8042c54:	3710      	adds	r7, #16
 8042c56:	46bd      	mov	sp, r7
 8042c58:	bd80      	pop	{r7, pc}
 8042c5a:	bf00      	nop
 8042c5c:	40023c00 	.word	0x40023c00
 8042c60:	40023800 	.word	0x40023800
 8042c64:	0804503c 	.word	0x0804503c
 8042c68:	20000014 	.word	0x20000014
 8042c6c:	20000018 	.word	0x20000018

08042c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8042c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8042c74:	b090      	sub	sp, #64	; 0x40
 8042c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8042c78:	2300      	movs	r3, #0
 8042c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8042c7c:	2300      	movs	r3, #0
 8042c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8042c80:	2300      	movs	r3, #0
 8042c82:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8042c84:	2300      	movs	r3, #0
 8042c86:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8042c88:	4b59      	ldr	r3, [pc, #356]	; (8042df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8042c8a:	689b      	ldr	r3, [r3, #8]
 8042c8c:	f003 030c 	and.w	r3, r3, #12
 8042c90:	2b08      	cmp	r3, #8
 8042c92:	d00d      	beq.n	8042cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8042c94:	2b08      	cmp	r3, #8
 8042c96:	f200 80a1 	bhi.w	8042ddc <HAL_RCC_GetSysClockFreq+0x16c>
 8042c9a:	2b00      	cmp	r3, #0
 8042c9c:	d002      	beq.n	8042ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8042c9e:	2b04      	cmp	r3, #4
 8042ca0:	d003      	beq.n	8042caa <HAL_RCC_GetSysClockFreq+0x3a>
 8042ca2:	e09b      	b.n	8042ddc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8042ca4:	4b53      	ldr	r3, [pc, #332]	; (8042df4 <HAL_RCC_GetSysClockFreq+0x184>)
 8042ca6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8042ca8:	e09b      	b.n	8042de2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8042caa:	4b53      	ldr	r3, [pc, #332]	; (8042df8 <HAL_RCC_GetSysClockFreq+0x188>)
 8042cac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8042cae:	e098      	b.n	8042de2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8042cb0:	4b4f      	ldr	r3, [pc, #316]	; (8042df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8042cb2:	685b      	ldr	r3, [r3, #4]
 8042cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8042cb8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8042cba:	4b4d      	ldr	r3, [pc, #308]	; (8042df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8042cbc:	685b      	ldr	r3, [r3, #4]
 8042cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042cc2:	2b00      	cmp	r3, #0
 8042cc4:	d028      	beq.n	8042d18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8042cc6:	4b4a      	ldr	r3, [pc, #296]	; (8042df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8042cc8:	685b      	ldr	r3, [r3, #4]
 8042cca:	099b      	lsrs	r3, r3, #6
 8042ccc:	2200      	movs	r2, #0
 8042cce:	623b      	str	r3, [r7, #32]
 8042cd0:	627a      	str	r2, [r7, #36]	; 0x24
 8042cd2:	6a3b      	ldr	r3, [r7, #32]
 8042cd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8042cd8:	2100      	movs	r1, #0
 8042cda:	4b47      	ldr	r3, [pc, #284]	; (8042df8 <HAL_RCC_GetSysClockFreq+0x188>)
 8042cdc:	fb03 f201 	mul.w	r2, r3, r1
 8042ce0:	2300      	movs	r3, #0
 8042ce2:	fb00 f303 	mul.w	r3, r0, r3
 8042ce6:	4413      	add	r3, r2
 8042ce8:	4a43      	ldr	r2, [pc, #268]	; (8042df8 <HAL_RCC_GetSysClockFreq+0x188>)
 8042cea:	fba0 1202 	umull	r1, r2, r0, r2
 8042cee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8042cf0:	460a      	mov	r2, r1
 8042cf2:	62ba      	str	r2, [r7, #40]	; 0x28
 8042cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8042cf6:	4413      	add	r3, r2
 8042cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8042cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8042cfc:	2200      	movs	r2, #0
 8042cfe:	61bb      	str	r3, [r7, #24]
 8042d00:	61fa      	str	r2, [r7, #28]
 8042d02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8042d06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8042d0a:	f7fd fae9 	bl	80402e0 <__aeabi_uldivmod>
 8042d0e:	4602      	mov	r2, r0
 8042d10:	460b      	mov	r3, r1
 8042d12:	4613      	mov	r3, r2
 8042d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8042d16:	e053      	b.n	8042dc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8042d18:	4b35      	ldr	r3, [pc, #212]	; (8042df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8042d1a:	685b      	ldr	r3, [r3, #4]
 8042d1c:	099b      	lsrs	r3, r3, #6
 8042d1e:	2200      	movs	r2, #0
 8042d20:	613b      	str	r3, [r7, #16]
 8042d22:	617a      	str	r2, [r7, #20]
 8042d24:	693b      	ldr	r3, [r7, #16]
 8042d26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8042d2a:	f04f 0b00 	mov.w	fp, #0
 8042d2e:	4652      	mov	r2, sl
 8042d30:	465b      	mov	r3, fp
 8042d32:	f04f 0000 	mov.w	r0, #0
 8042d36:	f04f 0100 	mov.w	r1, #0
 8042d3a:	0159      	lsls	r1, r3, #5
 8042d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8042d40:	0150      	lsls	r0, r2, #5
 8042d42:	4602      	mov	r2, r0
 8042d44:	460b      	mov	r3, r1
 8042d46:	ebb2 080a 	subs.w	r8, r2, sl
 8042d4a:	eb63 090b 	sbc.w	r9, r3, fp
 8042d4e:	f04f 0200 	mov.w	r2, #0
 8042d52:	f04f 0300 	mov.w	r3, #0
 8042d56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8042d5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8042d5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8042d62:	ebb2 0408 	subs.w	r4, r2, r8
 8042d66:	eb63 0509 	sbc.w	r5, r3, r9
 8042d6a:	f04f 0200 	mov.w	r2, #0
 8042d6e:	f04f 0300 	mov.w	r3, #0
 8042d72:	00eb      	lsls	r3, r5, #3
 8042d74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8042d78:	00e2      	lsls	r2, r4, #3
 8042d7a:	4614      	mov	r4, r2
 8042d7c:	461d      	mov	r5, r3
 8042d7e:	eb14 030a 	adds.w	r3, r4, sl
 8042d82:	603b      	str	r3, [r7, #0]
 8042d84:	eb45 030b 	adc.w	r3, r5, fp
 8042d88:	607b      	str	r3, [r7, #4]
 8042d8a:	f04f 0200 	mov.w	r2, #0
 8042d8e:	f04f 0300 	mov.w	r3, #0
 8042d92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8042d96:	4629      	mov	r1, r5
 8042d98:	028b      	lsls	r3, r1, #10
 8042d9a:	4621      	mov	r1, r4
 8042d9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8042da0:	4621      	mov	r1, r4
 8042da2:	028a      	lsls	r2, r1, #10
 8042da4:	4610      	mov	r0, r2
 8042da6:	4619      	mov	r1, r3
 8042da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8042daa:	2200      	movs	r2, #0
 8042dac:	60bb      	str	r3, [r7, #8]
 8042dae:	60fa      	str	r2, [r7, #12]
 8042db0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8042db4:	f7fd fa94 	bl	80402e0 <__aeabi_uldivmod>
 8042db8:	4602      	mov	r2, r0
 8042dba:	460b      	mov	r3, r1
 8042dbc:	4613      	mov	r3, r2
 8042dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8042dc0:	4b0b      	ldr	r3, [pc, #44]	; (8042df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8042dc2:	685b      	ldr	r3, [r3, #4]
 8042dc4:	0c1b      	lsrs	r3, r3, #16
 8042dc6:	f003 0303 	and.w	r3, r3, #3
 8042dca:	3301      	adds	r3, #1
 8042dcc:	005b      	lsls	r3, r3, #1
 8042dce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8042dd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8042dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8042dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8042dd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8042dda:	e002      	b.n	8042de2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8042ddc:	4b05      	ldr	r3, [pc, #20]	; (8042df4 <HAL_RCC_GetSysClockFreq+0x184>)
 8042dde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8042de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8042de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8042de4:	4618      	mov	r0, r3
 8042de6:	3740      	adds	r7, #64	; 0x40
 8042de8:	46bd      	mov	sp, r7
 8042dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8042dee:	bf00      	nop
 8042df0:	40023800 	.word	0x40023800
 8042df4:	00f42400 	.word	0x00f42400
 8042df8:	017d7840 	.word	0x017d7840

08042dfc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8042dfc:	b480      	push	{r7}
 8042dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8042e00:	4b03      	ldr	r3, [pc, #12]	; (8042e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8042e02:	681b      	ldr	r3, [r3, #0]
}
 8042e04:	4618      	mov	r0, r3
 8042e06:	46bd      	mov	sp, r7
 8042e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e0c:	4770      	bx	lr
 8042e0e:	bf00      	nop
 8042e10:	20000014 	.word	0x20000014

08042e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8042e14:	b580      	push	{r7, lr}
 8042e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8042e18:	f7ff fff0 	bl	8042dfc <HAL_RCC_GetHCLKFreq>
 8042e1c:	4602      	mov	r2, r0
 8042e1e:	4b05      	ldr	r3, [pc, #20]	; (8042e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8042e20:	689b      	ldr	r3, [r3, #8]
 8042e22:	0a9b      	lsrs	r3, r3, #10
 8042e24:	f003 0307 	and.w	r3, r3, #7
 8042e28:	4903      	ldr	r1, [pc, #12]	; (8042e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8042e2a:	5ccb      	ldrb	r3, [r1, r3]
 8042e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8042e30:	4618      	mov	r0, r3
 8042e32:	bd80      	pop	{r7, pc}
 8042e34:	40023800 	.word	0x40023800
 8042e38:	0804504c 	.word	0x0804504c

08042e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8042e3c:	b580      	push	{r7, lr}
 8042e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8042e40:	f7ff ffdc 	bl	8042dfc <HAL_RCC_GetHCLKFreq>
 8042e44:	4602      	mov	r2, r0
 8042e46:	4b05      	ldr	r3, [pc, #20]	; (8042e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8042e48:	689b      	ldr	r3, [r3, #8]
 8042e4a:	0b5b      	lsrs	r3, r3, #13
 8042e4c:	f003 0307 	and.w	r3, r3, #7
 8042e50:	4903      	ldr	r1, [pc, #12]	; (8042e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8042e52:	5ccb      	ldrb	r3, [r1, r3]
 8042e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8042e58:	4618      	mov	r0, r3
 8042e5a:	bd80      	pop	{r7, pc}
 8042e5c:	40023800 	.word	0x40023800
 8042e60:	0804504c 	.word	0x0804504c

08042e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8042e64:	b580      	push	{r7, lr}
 8042e66:	b088      	sub	sp, #32
 8042e68:	af00      	add	r7, sp, #0
 8042e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8042e6c:	2300      	movs	r3, #0
 8042e6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8042e70:	2300      	movs	r3, #0
 8042e72:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8042e74:	2300      	movs	r3, #0
 8042e76:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8042e78:	2300      	movs	r3, #0
 8042e7a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8042e7c:	2300      	movs	r3, #0
 8042e7e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8042e80:	687b      	ldr	r3, [r7, #4]
 8042e82:	681b      	ldr	r3, [r3, #0]
 8042e84:	f003 0301 	and.w	r3, r3, #1
 8042e88:	2b00      	cmp	r3, #0
 8042e8a:	d012      	beq.n	8042eb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8042e8c:	4b69      	ldr	r3, [pc, #420]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042e8e:	689b      	ldr	r3, [r3, #8]
 8042e90:	4a68      	ldr	r2, [pc, #416]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042e92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8042e96:	6093      	str	r3, [r2, #8]
 8042e98:	4b66      	ldr	r3, [pc, #408]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042e9a:	689a      	ldr	r2, [r3, #8]
 8042e9c:	687b      	ldr	r3, [r7, #4]
 8042e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8042ea0:	4964      	ldr	r1, [pc, #400]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042ea2:	4313      	orrs	r3, r2
 8042ea4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8042ea6:	687b      	ldr	r3, [r7, #4]
 8042ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8042eaa:	2b00      	cmp	r3, #0
 8042eac:	d101      	bne.n	8042eb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8042eae:	2301      	movs	r3, #1
 8042eb0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8042eb2:	687b      	ldr	r3, [r7, #4]
 8042eb4:	681b      	ldr	r3, [r3, #0]
 8042eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8042eba:	2b00      	cmp	r3, #0
 8042ebc:	d017      	beq.n	8042eee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8042ebe:	4b5d      	ldr	r3, [pc, #372]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042ec4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8042ec8:	687b      	ldr	r3, [r7, #4]
 8042eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042ecc:	4959      	ldr	r1, [pc, #356]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042ece:	4313      	orrs	r3, r2
 8042ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8042ed4:	687b      	ldr	r3, [r7, #4]
 8042ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042ed8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042edc:	d101      	bne.n	8042ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8042ede:	2301      	movs	r3, #1
 8042ee0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8042ee2:	687b      	ldr	r3, [r7, #4]
 8042ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042ee6:	2b00      	cmp	r3, #0
 8042ee8:	d101      	bne.n	8042eee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8042eea:	2301      	movs	r3, #1
 8042eec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8042eee:	687b      	ldr	r3, [r7, #4]
 8042ef0:	681b      	ldr	r3, [r3, #0]
 8042ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8042ef6:	2b00      	cmp	r3, #0
 8042ef8:	d017      	beq.n	8042f2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8042efa:	4b4e      	ldr	r3, [pc, #312]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042f00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8042f04:	687b      	ldr	r3, [r7, #4]
 8042f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042f08:	494a      	ldr	r1, [pc, #296]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042f0a:	4313      	orrs	r3, r2
 8042f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8042f10:	687b      	ldr	r3, [r7, #4]
 8042f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042f18:	d101      	bne.n	8042f1e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8042f1a:	2301      	movs	r3, #1
 8042f1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8042f1e:	687b      	ldr	r3, [r7, #4]
 8042f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042f22:	2b00      	cmp	r3, #0
 8042f24:	d101      	bne.n	8042f2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8042f26:	2301      	movs	r3, #1
 8042f28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8042f2a:	687b      	ldr	r3, [r7, #4]
 8042f2c:	681b      	ldr	r3, [r3, #0]
 8042f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8042f32:	2b00      	cmp	r3, #0
 8042f34:	d001      	beq.n	8042f3a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8042f36:	2301      	movs	r3, #1
 8042f38:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8042f3a:	687b      	ldr	r3, [r7, #4]
 8042f3c:	681b      	ldr	r3, [r3, #0]
 8042f3e:	f003 0320 	and.w	r3, r3, #32
 8042f42:	2b00      	cmp	r3, #0
 8042f44:	f000 808b 	beq.w	804305e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8042f48:	4b3a      	ldr	r3, [pc, #232]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042f4c:	4a39      	ldr	r2, [pc, #228]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8042f52:	6413      	str	r3, [r2, #64]	; 0x40
 8042f54:	4b37      	ldr	r3, [pc, #220]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042f5c:	60bb      	str	r3, [r7, #8]
 8042f5e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8042f60:	4b35      	ldr	r3, [pc, #212]	; (8043038 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8042f62:	681b      	ldr	r3, [r3, #0]
 8042f64:	4a34      	ldr	r2, [pc, #208]	; (8043038 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8042f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8042f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042f6c:	f7fe f960 	bl	8041230 <HAL_GetTick>
 8042f70:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8042f72:	e008      	b.n	8042f86 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8042f74:	f7fe f95c 	bl	8041230 <HAL_GetTick>
 8042f78:	4602      	mov	r2, r0
 8042f7a:	697b      	ldr	r3, [r7, #20]
 8042f7c:	1ad3      	subs	r3, r2, r3
 8042f7e:	2b64      	cmp	r3, #100	; 0x64
 8042f80:	d901      	bls.n	8042f86 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8042f82:	2303      	movs	r3, #3
 8042f84:	e38f      	b.n	80436a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8042f86:	4b2c      	ldr	r3, [pc, #176]	; (8043038 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8042f88:	681b      	ldr	r3, [r3, #0]
 8042f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042f8e:	2b00      	cmp	r3, #0
 8042f90:	d0f0      	beq.n	8042f74 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8042f92:	4b28      	ldr	r3, [pc, #160]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042f9a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8042f9c:	693b      	ldr	r3, [r7, #16]
 8042f9e:	2b00      	cmp	r3, #0
 8042fa0:	d035      	beq.n	804300e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8042fa2:	687b      	ldr	r3, [r7, #4]
 8042fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042faa:	693a      	ldr	r2, [r7, #16]
 8042fac:	429a      	cmp	r2, r3
 8042fae:	d02e      	beq.n	804300e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8042fb0:	4b20      	ldr	r3, [pc, #128]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8042fb8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8042fba:	4b1e      	ldr	r3, [pc, #120]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042fbe:	4a1d      	ldr	r2, [pc, #116]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042fc4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8042fc6:	4b1b      	ldr	r3, [pc, #108]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042fca:	4a1a      	ldr	r2, [pc, #104]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8042fd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8042fd2:	4a18      	ldr	r2, [pc, #96]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042fd4:	693b      	ldr	r3, [r7, #16]
 8042fd6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8042fd8:	4b16      	ldr	r3, [pc, #88]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042fdc:	f003 0301 	and.w	r3, r3, #1
 8042fe0:	2b01      	cmp	r3, #1
 8042fe2:	d114      	bne.n	804300e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042fe4:	f7fe f924 	bl	8041230 <HAL_GetTick>
 8042fe8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8042fea:	e00a      	b.n	8043002 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8042fec:	f7fe f920 	bl	8041230 <HAL_GetTick>
 8042ff0:	4602      	mov	r2, r0
 8042ff2:	697b      	ldr	r3, [r7, #20]
 8042ff4:	1ad3      	subs	r3, r2, r3
 8042ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8042ffa:	4293      	cmp	r3, r2
 8042ffc:	d901      	bls.n	8043002 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8042ffe:	2303      	movs	r3, #3
 8043000:	e351      	b.n	80436a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8043002:	4b0c      	ldr	r3, [pc, #48]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8043004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043006:	f003 0302 	and.w	r3, r3, #2
 804300a:	2b00      	cmp	r3, #0
 804300c:	d0ee      	beq.n	8042fec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 804300e:	687b      	ldr	r3, [r7, #4]
 8043010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8043016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804301a:	d111      	bne.n	8043040 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 804301c:	4b05      	ldr	r3, [pc, #20]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804301e:	689b      	ldr	r3, [r3, #8]
 8043020:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8043024:	687b      	ldr	r3, [r7, #4]
 8043026:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8043028:	4b04      	ldr	r3, [pc, #16]	; (804303c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 804302a:	400b      	ands	r3, r1
 804302c:	4901      	ldr	r1, [pc, #4]	; (8043034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804302e:	4313      	orrs	r3, r2
 8043030:	608b      	str	r3, [r1, #8]
 8043032:	e00b      	b.n	804304c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8043034:	40023800 	.word	0x40023800
 8043038:	40007000 	.word	0x40007000
 804303c:	0ffffcff 	.word	0x0ffffcff
 8043040:	4bac      	ldr	r3, [pc, #688]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043042:	689b      	ldr	r3, [r3, #8]
 8043044:	4aab      	ldr	r2, [pc, #684]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043046:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 804304a:	6093      	str	r3, [r2, #8]
 804304c:	4ba9      	ldr	r3, [pc, #676]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 804304e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8043050:	687b      	ldr	r3, [r7, #4]
 8043052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8043058:	49a6      	ldr	r1, [pc, #664]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 804305a:	4313      	orrs	r3, r2
 804305c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 804305e:	687b      	ldr	r3, [r7, #4]
 8043060:	681b      	ldr	r3, [r3, #0]
 8043062:	f003 0310 	and.w	r3, r3, #16
 8043066:	2b00      	cmp	r3, #0
 8043068:	d010      	beq.n	804308c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 804306a:	4ba2      	ldr	r3, [pc, #648]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 804306c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8043070:	4aa0      	ldr	r2, [pc, #640]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8043076:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 804307a:	4b9e      	ldr	r3, [pc, #632]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 804307c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8043080:	687b      	ldr	r3, [r7, #4]
 8043082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043084:	499b      	ldr	r1, [pc, #620]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043086:	4313      	orrs	r3, r2
 8043088:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 804308c:	687b      	ldr	r3, [r7, #4]
 804308e:	681b      	ldr	r3, [r3, #0]
 8043090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8043094:	2b00      	cmp	r3, #0
 8043096:	d00a      	beq.n	80430ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8043098:	4b96      	ldr	r3, [pc, #600]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 804309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804309e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80430a2:	687b      	ldr	r3, [r7, #4]
 80430a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80430a6:	4993      	ldr	r1, [pc, #588]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80430a8:	4313      	orrs	r3, r2
 80430aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80430ae:	687b      	ldr	r3, [r7, #4]
 80430b0:	681b      	ldr	r3, [r3, #0]
 80430b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80430b6:	2b00      	cmp	r3, #0
 80430b8:	d00a      	beq.n	80430d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80430ba:	4b8e      	ldr	r3, [pc, #568]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80430bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80430c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80430c4:	687b      	ldr	r3, [r7, #4]
 80430c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80430c8:	498a      	ldr	r1, [pc, #552]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80430ca:	4313      	orrs	r3, r2
 80430cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80430d0:	687b      	ldr	r3, [r7, #4]
 80430d2:	681b      	ldr	r3, [r3, #0]
 80430d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80430d8:	2b00      	cmp	r3, #0
 80430da:	d00a      	beq.n	80430f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80430dc:	4b85      	ldr	r3, [pc, #532]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80430de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80430e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80430e6:	687b      	ldr	r3, [r7, #4]
 80430e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80430ea:	4982      	ldr	r1, [pc, #520]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80430ec:	4313      	orrs	r3, r2
 80430ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80430f2:	687b      	ldr	r3, [r7, #4]
 80430f4:	681b      	ldr	r3, [r3, #0]
 80430f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80430fa:	2b00      	cmp	r3, #0
 80430fc:	d00a      	beq.n	8043114 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80430fe:	4b7d      	ldr	r3, [pc, #500]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043104:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8043108:	687b      	ldr	r3, [r7, #4]
 804310a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804310c:	4979      	ldr	r1, [pc, #484]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 804310e:	4313      	orrs	r3, r2
 8043110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8043114:	687b      	ldr	r3, [r7, #4]
 8043116:	681b      	ldr	r3, [r3, #0]
 8043118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804311c:	2b00      	cmp	r3, #0
 804311e:	d00a      	beq.n	8043136 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8043120:	4b74      	ldr	r3, [pc, #464]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043126:	f023 0203 	bic.w	r2, r3, #3
 804312a:	687b      	ldr	r3, [r7, #4]
 804312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804312e:	4971      	ldr	r1, [pc, #452]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043130:	4313      	orrs	r3, r2
 8043132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8043136:	687b      	ldr	r3, [r7, #4]
 8043138:	681b      	ldr	r3, [r3, #0]
 804313a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804313e:	2b00      	cmp	r3, #0
 8043140:	d00a      	beq.n	8043158 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8043142:	4b6c      	ldr	r3, [pc, #432]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043148:	f023 020c 	bic.w	r2, r3, #12
 804314c:	687b      	ldr	r3, [r7, #4]
 804314e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8043150:	4968      	ldr	r1, [pc, #416]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043152:	4313      	orrs	r3, r2
 8043154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8043158:	687b      	ldr	r3, [r7, #4]
 804315a:	681b      	ldr	r3, [r3, #0]
 804315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043160:	2b00      	cmp	r3, #0
 8043162:	d00a      	beq.n	804317a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8043164:	4b63      	ldr	r3, [pc, #396]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804316a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 804316e:	687b      	ldr	r3, [r7, #4]
 8043170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8043172:	4960      	ldr	r1, [pc, #384]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043174:	4313      	orrs	r3, r2
 8043176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 804317a:	687b      	ldr	r3, [r7, #4]
 804317c:	681b      	ldr	r3, [r3, #0]
 804317e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8043182:	2b00      	cmp	r3, #0
 8043184:	d00a      	beq.n	804319c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8043186:	4b5b      	ldr	r3, [pc, #364]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804318c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8043190:	687b      	ldr	r3, [r7, #4]
 8043192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043194:	4957      	ldr	r1, [pc, #348]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043196:	4313      	orrs	r3, r2
 8043198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 804319c:	687b      	ldr	r3, [r7, #4]
 804319e:	681b      	ldr	r3, [r3, #0]
 80431a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80431a4:	2b00      	cmp	r3, #0
 80431a6:	d00a      	beq.n	80431be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80431a8:	4b52      	ldr	r3, [pc, #328]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80431aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80431ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80431b2:	687b      	ldr	r3, [r7, #4]
 80431b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80431b6:	494f      	ldr	r1, [pc, #316]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80431b8:	4313      	orrs	r3, r2
 80431ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80431be:	687b      	ldr	r3, [r7, #4]
 80431c0:	681b      	ldr	r3, [r3, #0]
 80431c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80431c6:	2b00      	cmp	r3, #0
 80431c8:	d00a      	beq.n	80431e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80431ca:	4b4a      	ldr	r3, [pc, #296]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80431cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80431d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80431d4:	687b      	ldr	r3, [r7, #4]
 80431d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80431d8:	4946      	ldr	r1, [pc, #280]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80431da:	4313      	orrs	r3, r2
 80431dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80431e0:	687b      	ldr	r3, [r7, #4]
 80431e2:	681b      	ldr	r3, [r3, #0]
 80431e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80431e8:	2b00      	cmp	r3, #0
 80431ea:	d00a      	beq.n	8043202 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80431ec:	4b41      	ldr	r3, [pc, #260]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80431ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80431f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80431f6:	687b      	ldr	r3, [r7, #4]
 80431f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80431fa:	493e      	ldr	r1, [pc, #248]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80431fc:	4313      	orrs	r3, r2
 80431fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8043202:	687b      	ldr	r3, [r7, #4]
 8043204:	681b      	ldr	r3, [r3, #0]
 8043206:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 804320a:	2b00      	cmp	r3, #0
 804320c:	d00a      	beq.n	8043224 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 804320e:	4b39      	ldr	r3, [pc, #228]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043214:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8043218:	687b      	ldr	r3, [r7, #4]
 804321a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804321c:	4935      	ldr	r1, [pc, #212]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 804321e:	4313      	orrs	r3, r2
 8043220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8043224:	687b      	ldr	r3, [r7, #4]
 8043226:	681b      	ldr	r3, [r3, #0]
 8043228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804322c:	2b00      	cmp	r3, #0
 804322e:	d00a      	beq.n	8043246 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8043230:	4b30      	ldr	r3, [pc, #192]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043236:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 804323a:	687b      	ldr	r3, [r7, #4]
 804323c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804323e:	492d      	ldr	r1, [pc, #180]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043240:	4313      	orrs	r3, r2
 8043242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8043246:	687b      	ldr	r3, [r7, #4]
 8043248:	681b      	ldr	r3, [r3, #0]
 804324a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804324e:	2b00      	cmp	r3, #0
 8043250:	d011      	beq.n	8043276 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8043252:	4b28      	ldr	r3, [pc, #160]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043258:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 804325c:	687b      	ldr	r3, [r7, #4]
 804325e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8043260:	4924      	ldr	r1, [pc, #144]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043262:	4313      	orrs	r3, r2
 8043264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8043268:	687b      	ldr	r3, [r7, #4]
 804326a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804326c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8043270:	d101      	bne.n	8043276 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8043272:	2301      	movs	r3, #1
 8043274:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8043276:	687b      	ldr	r3, [r7, #4]
 8043278:	681b      	ldr	r3, [r3, #0]
 804327a:	f003 0308 	and.w	r3, r3, #8
 804327e:	2b00      	cmp	r3, #0
 8043280:	d001      	beq.n	8043286 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8043282:	2301      	movs	r3, #1
 8043284:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8043286:	687b      	ldr	r3, [r7, #4]
 8043288:	681b      	ldr	r3, [r3, #0]
 804328a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 804328e:	2b00      	cmp	r3, #0
 8043290:	d00a      	beq.n	80432a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8043292:	4b18      	ldr	r3, [pc, #96]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8043294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043298:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 804329c:	687b      	ldr	r3, [r7, #4]
 804329e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80432a0:	4914      	ldr	r1, [pc, #80]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80432a2:	4313      	orrs	r3, r2
 80432a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80432a8:	687b      	ldr	r3, [r7, #4]
 80432aa:	681b      	ldr	r3, [r3, #0]
 80432ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80432b0:	2b00      	cmp	r3, #0
 80432b2:	d00b      	beq.n	80432cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80432b4:	4b0f      	ldr	r3, [pc, #60]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80432b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80432ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80432be:	687b      	ldr	r3, [r7, #4]
 80432c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80432c4:	490b      	ldr	r1, [pc, #44]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80432c6:	4313      	orrs	r3, r2
 80432c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80432cc:	687b      	ldr	r3, [r7, #4]
 80432ce:	681b      	ldr	r3, [r3, #0]
 80432d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80432d4:	2b00      	cmp	r3, #0
 80432d6:	d00f      	beq.n	80432f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80432d8:	4b06      	ldr	r3, [pc, #24]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80432da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80432de:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80432e2:	687b      	ldr	r3, [r7, #4]
 80432e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80432e8:	4902      	ldr	r1, [pc, #8]	; (80432f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80432ea:	4313      	orrs	r3, r2
 80432ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80432f0:	e002      	b.n	80432f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80432f2:	bf00      	nop
 80432f4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80432f8:	687b      	ldr	r3, [r7, #4]
 80432fa:	681b      	ldr	r3, [r3, #0]
 80432fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8043300:	2b00      	cmp	r3, #0
 8043302:	d00b      	beq.n	804331c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8043304:	4b8a      	ldr	r3, [pc, #552]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8043306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804330a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 804330e:	687b      	ldr	r3, [r7, #4]
 8043310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043314:	4986      	ldr	r1, [pc, #536]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8043316:	4313      	orrs	r3, r2
 8043318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 804331c:	687b      	ldr	r3, [r7, #4]
 804331e:	681b      	ldr	r3, [r3, #0]
 8043320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8043324:	2b00      	cmp	r3, #0
 8043326:	d00b      	beq.n	8043340 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8043328:	4b81      	ldr	r3, [pc, #516]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804332a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804332e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8043332:	687b      	ldr	r3, [r7, #4]
 8043334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8043338:	497d      	ldr	r1, [pc, #500]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804333a:	4313      	orrs	r3, r2
 804333c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8043340:	69fb      	ldr	r3, [r7, #28]
 8043342:	2b01      	cmp	r3, #1
 8043344:	d006      	beq.n	8043354 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8043346:	687b      	ldr	r3, [r7, #4]
 8043348:	681b      	ldr	r3, [r3, #0]
 804334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804334e:	2b00      	cmp	r3, #0
 8043350:	f000 80d6 	beq.w	8043500 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8043354:	4b76      	ldr	r3, [pc, #472]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8043356:	681b      	ldr	r3, [r3, #0]
 8043358:	4a75      	ldr	r2, [pc, #468]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804335a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 804335e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8043360:	f7fd ff66 	bl	8041230 <HAL_GetTick>
 8043364:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8043366:	e008      	b.n	804337a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8043368:	f7fd ff62 	bl	8041230 <HAL_GetTick>
 804336c:	4602      	mov	r2, r0
 804336e:	697b      	ldr	r3, [r7, #20]
 8043370:	1ad3      	subs	r3, r2, r3
 8043372:	2b64      	cmp	r3, #100	; 0x64
 8043374:	d901      	bls.n	804337a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8043376:	2303      	movs	r3, #3
 8043378:	e195      	b.n	80436a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 804337a:	4b6d      	ldr	r3, [pc, #436]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804337c:	681b      	ldr	r3, [r3, #0]
 804337e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8043382:	2b00      	cmp	r3, #0
 8043384:	d1f0      	bne.n	8043368 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8043386:	687b      	ldr	r3, [r7, #4]
 8043388:	681b      	ldr	r3, [r3, #0]
 804338a:	f003 0301 	and.w	r3, r3, #1
 804338e:	2b00      	cmp	r3, #0
 8043390:	d021      	beq.n	80433d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8043392:	687b      	ldr	r3, [r7, #4]
 8043394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8043396:	2b00      	cmp	r3, #0
 8043398:	d11d      	bne.n	80433d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 804339a:	4b65      	ldr	r3, [pc, #404]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804339c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80433a0:	0c1b      	lsrs	r3, r3, #16
 80433a2:	f003 0303 	and.w	r3, r3, #3
 80433a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80433a8:	4b61      	ldr	r3, [pc, #388]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80433aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80433ae:	0e1b      	lsrs	r3, r3, #24
 80433b0:	f003 030f 	and.w	r3, r3, #15
 80433b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80433b6:	687b      	ldr	r3, [r7, #4]
 80433b8:	685b      	ldr	r3, [r3, #4]
 80433ba:	019a      	lsls	r2, r3, #6
 80433bc:	693b      	ldr	r3, [r7, #16]
 80433be:	041b      	lsls	r3, r3, #16
 80433c0:	431a      	orrs	r2, r3
 80433c2:	68fb      	ldr	r3, [r7, #12]
 80433c4:	061b      	lsls	r3, r3, #24
 80433c6:	431a      	orrs	r2, r3
 80433c8:	687b      	ldr	r3, [r7, #4]
 80433ca:	689b      	ldr	r3, [r3, #8]
 80433cc:	071b      	lsls	r3, r3, #28
 80433ce:	4958      	ldr	r1, [pc, #352]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80433d0:	4313      	orrs	r3, r2
 80433d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80433d6:	687b      	ldr	r3, [r7, #4]
 80433d8:	681b      	ldr	r3, [r3, #0]
 80433da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80433de:	2b00      	cmp	r3, #0
 80433e0:	d004      	beq.n	80433ec <HAL_RCCEx_PeriphCLKConfig+0x588>
 80433e2:	687b      	ldr	r3, [r7, #4]
 80433e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80433e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80433ea:	d00a      	beq.n	8043402 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80433ec:	687b      	ldr	r3, [r7, #4]
 80433ee:	681b      	ldr	r3, [r3, #0]
 80433f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80433f4:	2b00      	cmp	r3, #0
 80433f6:	d02e      	beq.n	8043456 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80433f8:	687b      	ldr	r3, [r7, #4]
 80433fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80433fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8043400:	d129      	bne.n	8043456 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8043402:	4b4b      	ldr	r3, [pc, #300]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8043404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043408:	0c1b      	lsrs	r3, r3, #16
 804340a:	f003 0303 	and.w	r3, r3, #3
 804340e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8043410:	4b47      	ldr	r3, [pc, #284]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8043412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043416:	0f1b      	lsrs	r3, r3, #28
 8043418:	f003 0307 	and.w	r3, r3, #7
 804341c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 804341e:	687b      	ldr	r3, [r7, #4]
 8043420:	685b      	ldr	r3, [r3, #4]
 8043422:	019a      	lsls	r2, r3, #6
 8043424:	693b      	ldr	r3, [r7, #16]
 8043426:	041b      	lsls	r3, r3, #16
 8043428:	431a      	orrs	r2, r3
 804342a:	687b      	ldr	r3, [r7, #4]
 804342c:	68db      	ldr	r3, [r3, #12]
 804342e:	061b      	lsls	r3, r3, #24
 8043430:	431a      	orrs	r2, r3
 8043432:	68fb      	ldr	r3, [r7, #12]
 8043434:	071b      	lsls	r3, r3, #28
 8043436:	493e      	ldr	r1, [pc, #248]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8043438:	4313      	orrs	r3, r2
 804343a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 804343e:	4b3c      	ldr	r3, [pc, #240]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8043440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8043444:	f023 021f 	bic.w	r2, r3, #31
 8043448:	687b      	ldr	r3, [r7, #4]
 804344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804344c:	3b01      	subs	r3, #1
 804344e:	4938      	ldr	r1, [pc, #224]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8043450:	4313      	orrs	r3, r2
 8043452:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8043456:	687b      	ldr	r3, [r7, #4]
 8043458:	681b      	ldr	r3, [r3, #0]
 804345a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804345e:	2b00      	cmp	r3, #0
 8043460:	d01d      	beq.n	804349e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8043462:	4b33      	ldr	r3, [pc, #204]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8043464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043468:	0e1b      	lsrs	r3, r3, #24
 804346a:	f003 030f 	and.w	r3, r3, #15
 804346e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8043470:	4b2f      	ldr	r3, [pc, #188]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8043472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043476:	0f1b      	lsrs	r3, r3, #28
 8043478:	f003 0307 	and.w	r3, r3, #7
 804347c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 804347e:	687b      	ldr	r3, [r7, #4]
 8043480:	685b      	ldr	r3, [r3, #4]
 8043482:	019a      	lsls	r2, r3, #6
 8043484:	687b      	ldr	r3, [r7, #4]
 8043486:	691b      	ldr	r3, [r3, #16]
 8043488:	041b      	lsls	r3, r3, #16
 804348a:	431a      	orrs	r2, r3
 804348c:	693b      	ldr	r3, [r7, #16]
 804348e:	061b      	lsls	r3, r3, #24
 8043490:	431a      	orrs	r2, r3
 8043492:	68fb      	ldr	r3, [r7, #12]
 8043494:	071b      	lsls	r3, r3, #28
 8043496:	4926      	ldr	r1, [pc, #152]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8043498:	4313      	orrs	r3, r2
 804349a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 804349e:	687b      	ldr	r3, [r7, #4]
 80434a0:	681b      	ldr	r3, [r3, #0]
 80434a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80434a6:	2b00      	cmp	r3, #0
 80434a8:	d011      	beq.n	80434ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80434aa:	687b      	ldr	r3, [r7, #4]
 80434ac:	685b      	ldr	r3, [r3, #4]
 80434ae:	019a      	lsls	r2, r3, #6
 80434b0:	687b      	ldr	r3, [r7, #4]
 80434b2:	691b      	ldr	r3, [r3, #16]
 80434b4:	041b      	lsls	r3, r3, #16
 80434b6:	431a      	orrs	r2, r3
 80434b8:	687b      	ldr	r3, [r7, #4]
 80434ba:	68db      	ldr	r3, [r3, #12]
 80434bc:	061b      	lsls	r3, r3, #24
 80434be:	431a      	orrs	r2, r3
 80434c0:	687b      	ldr	r3, [r7, #4]
 80434c2:	689b      	ldr	r3, [r3, #8]
 80434c4:	071b      	lsls	r3, r3, #28
 80434c6:	491a      	ldr	r1, [pc, #104]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80434c8:	4313      	orrs	r3, r2
 80434ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80434ce:	4b18      	ldr	r3, [pc, #96]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80434d0:	681b      	ldr	r3, [r3, #0]
 80434d2:	4a17      	ldr	r2, [pc, #92]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80434d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80434d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80434da:	f7fd fea9 	bl	8041230 <HAL_GetTick>
 80434de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80434e0:	e008      	b.n	80434f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80434e2:	f7fd fea5 	bl	8041230 <HAL_GetTick>
 80434e6:	4602      	mov	r2, r0
 80434e8:	697b      	ldr	r3, [r7, #20]
 80434ea:	1ad3      	subs	r3, r2, r3
 80434ec:	2b64      	cmp	r3, #100	; 0x64
 80434ee:	d901      	bls.n	80434f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80434f0:	2303      	movs	r3, #3
 80434f2:	e0d8      	b.n	80436a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80434f4:	4b0e      	ldr	r3, [pc, #56]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80434f6:	681b      	ldr	r3, [r3, #0]
 80434f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80434fc:	2b00      	cmp	r3, #0
 80434fe:	d0f0      	beq.n	80434e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8043500:	69bb      	ldr	r3, [r7, #24]
 8043502:	2b01      	cmp	r3, #1
 8043504:	f040 80ce 	bne.w	80436a4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8043508:	4b09      	ldr	r3, [pc, #36]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804350a:	681b      	ldr	r3, [r3, #0]
 804350c:	4a08      	ldr	r2, [pc, #32]	; (8043530 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804350e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8043512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8043514:	f7fd fe8c 	bl	8041230 <HAL_GetTick>
 8043518:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 804351a:	e00b      	b.n	8043534 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 804351c:	f7fd fe88 	bl	8041230 <HAL_GetTick>
 8043520:	4602      	mov	r2, r0
 8043522:	697b      	ldr	r3, [r7, #20]
 8043524:	1ad3      	subs	r3, r2, r3
 8043526:	2b64      	cmp	r3, #100	; 0x64
 8043528:	d904      	bls.n	8043534 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 804352a:	2303      	movs	r3, #3
 804352c:	e0bb      	b.n	80436a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 804352e:	bf00      	nop
 8043530:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8043534:	4b5e      	ldr	r3, [pc, #376]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8043536:	681b      	ldr	r3, [r3, #0]
 8043538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804353c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8043540:	d0ec      	beq.n	804351c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8043542:	687b      	ldr	r3, [r7, #4]
 8043544:	681b      	ldr	r3, [r3, #0]
 8043546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 804354a:	2b00      	cmp	r3, #0
 804354c:	d003      	beq.n	8043556 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 804354e:	687b      	ldr	r3, [r7, #4]
 8043550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043552:	2b00      	cmp	r3, #0
 8043554:	d009      	beq.n	804356a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8043556:	687b      	ldr	r3, [r7, #4]
 8043558:	681b      	ldr	r3, [r3, #0]
 804355a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 804355e:	2b00      	cmp	r3, #0
 8043560:	d02e      	beq.n	80435c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8043562:	687b      	ldr	r3, [r7, #4]
 8043564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043566:	2b00      	cmp	r3, #0
 8043568:	d12a      	bne.n	80435c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 804356a:	4b51      	ldr	r3, [pc, #324]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043570:	0c1b      	lsrs	r3, r3, #16
 8043572:	f003 0303 	and.w	r3, r3, #3
 8043576:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8043578:	4b4d      	ldr	r3, [pc, #308]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804357e:	0f1b      	lsrs	r3, r3, #28
 8043580:	f003 0307 	and.w	r3, r3, #7
 8043584:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8043586:	687b      	ldr	r3, [r7, #4]
 8043588:	695b      	ldr	r3, [r3, #20]
 804358a:	019a      	lsls	r2, r3, #6
 804358c:	693b      	ldr	r3, [r7, #16]
 804358e:	041b      	lsls	r3, r3, #16
 8043590:	431a      	orrs	r2, r3
 8043592:	687b      	ldr	r3, [r7, #4]
 8043594:	699b      	ldr	r3, [r3, #24]
 8043596:	061b      	lsls	r3, r3, #24
 8043598:	431a      	orrs	r2, r3
 804359a:	68fb      	ldr	r3, [r7, #12]
 804359c:	071b      	lsls	r3, r3, #28
 804359e:	4944      	ldr	r1, [pc, #272]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80435a0:	4313      	orrs	r3, r2
 80435a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80435a6:	4b42      	ldr	r3, [pc, #264]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80435a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80435ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80435b0:	687b      	ldr	r3, [r7, #4]
 80435b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80435b4:	3b01      	subs	r3, #1
 80435b6:	021b      	lsls	r3, r3, #8
 80435b8:	493d      	ldr	r1, [pc, #244]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80435ba:	4313      	orrs	r3, r2
 80435bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80435c0:	687b      	ldr	r3, [r7, #4]
 80435c2:	681b      	ldr	r3, [r3, #0]
 80435c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80435c8:	2b00      	cmp	r3, #0
 80435ca:	d022      	beq.n	8043612 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80435cc:	687b      	ldr	r3, [r7, #4]
 80435ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80435d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80435d4:	d11d      	bne.n	8043612 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80435d6:	4b36      	ldr	r3, [pc, #216]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80435d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80435dc:	0e1b      	lsrs	r3, r3, #24
 80435de:	f003 030f 	and.w	r3, r3, #15
 80435e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80435e4:	4b32      	ldr	r3, [pc, #200]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80435e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80435ea:	0f1b      	lsrs	r3, r3, #28
 80435ec:	f003 0307 	and.w	r3, r3, #7
 80435f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80435f2:	687b      	ldr	r3, [r7, #4]
 80435f4:	695b      	ldr	r3, [r3, #20]
 80435f6:	019a      	lsls	r2, r3, #6
 80435f8:	687b      	ldr	r3, [r7, #4]
 80435fa:	6a1b      	ldr	r3, [r3, #32]
 80435fc:	041b      	lsls	r3, r3, #16
 80435fe:	431a      	orrs	r2, r3
 8043600:	693b      	ldr	r3, [r7, #16]
 8043602:	061b      	lsls	r3, r3, #24
 8043604:	431a      	orrs	r2, r3
 8043606:	68fb      	ldr	r3, [r7, #12]
 8043608:	071b      	lsls	r3, r3, #28
 804360a:	4929      	ldr	r1, [pc, #164]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804360c:	4313      	orrs	r3, r2
 804360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8043612:	687b      	ldr	r3, [r7, #4]
 8043614:	681b      	ldr	r3, [r3, #0]
 8043616:	f003 0308 	and.w	r3, r3, #8
 804361a:	2b00      	cmp	r3, #0
 804361c:	d028      	beq.n	8043670 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 804361e:	4b24      	ldr	r3, [pc, #144]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8043620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043624:	0e1b      	lsrs	r3, r3, #24
 8043626:	f003 030f 	and.w	r3, r3, #15
 804362a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 804362c:	4b20      	ldr	r3, [pc, #128]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043632:	0c1b      	lsrs	r3, r3, #16
 8043634:	f003 0303 	and.w	r3, r3, #3
 8043638:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 804363a:	687b      	ldr	r3, [r7, #4]
 804363c:	695b      	ldr	r3, [r3, #20]
 804363e:	019a      	lsls	r2, r3, #6
 8043640:	68fb      	ldr	r3, [r7, #12]
 8043642:	041b      	lsls	r3, r3, #16
 8043644:	431a      	orrs	r2, r3
 8043646:	693b      	ldr	r3, [r7, #16]
 8043648:	061b      	lsls	r3, r3, #24
 804364a:	431a      	orrs	r2, r3
 804364c:	687b      	ldr	r3, [r7, #4]
 804364e:	69db      	ldr	r3, [r3, #28]
 8043650:	071b      	lsls	r3, r3, #28
 8043652:	4917      	ldr	r1, [pc, #92]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8043654:	4313      	orrs	r3, r2
 8043656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 804365a:	4b15      	ldr	r3, [pc, #84]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804365c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8043660:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8043664:	687b      	ldr	r3, [r7, #4]
 8043666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043668:	4911      	ldr	r1, [pc, #68]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804366a:	4313      	orrs	r3, r2
 804366c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8043670:	4b0f      	ldr	r3, [pc, #60]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8043672:	681b      	ldr	r3, [r3, #0]
 8043674:	4a0e      	ldr	r2, [pc, #56]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8043676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804367a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804367c:	f7fd fdd8 	bl	8041230 <HAL_GetTick>
 8043680:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8043682:	e008      	b.n	8043696 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8043684:	f7fd fdd4 	bl	8041230 <HAL_GetTick>
 8043688:	4602      	mov	r2, r0
 804368a:	697b      	ldr	r3, [r7, #20]
 804368c:	1ad3      	subs	r3, r2, r3
 804368e:	2b64      	cmp	r3, #100	; 0x64
 8043690:	d901      	bls.n	8043696 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8043692:	2303      	movs	r3, #3
 8043694:	e007      	b.n	80436a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8043696:	4b06      	ldr	r3, [pc, #24]	; (80436b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8043698:	681b      	ldr	r3, [r3, #0]
 804369a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804369e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80436a2:	d1ef      	bne.n	8043684 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80436a4:	2300      	movs	r3, #0
}
 80436a6:	4618      	mov	r0, r3
 80436a8:	3720      	adds	r7, #32
 80436aa:	46bd      	mov	sp, r7
 80436ac:	bd80      	pop	{r7, pc}
 80436ae:	bf00      	nop
 80436b0:	40023800 	.word	0x40023800

080436b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80436b4:	b580      	push	{r7, lr}
 80436b6:	b082      	sub	sp, #8
 80436b8:	af00      	add	r7, sp, #0
 80436ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80436bc:	687b      	ldr	r3, [r7, #4]
 80436be:	2b00      	cmp	r3, #0
 80436c0:	d101      	bne.n	80436c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80436c2:	2301      	movs	r3, #1
 80436c4:	e040      	b.n	8043748 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80436c6:	687b      	ldr	r3, [r7, #4]
 80436c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80436ca:	2b00      	cmp	r3, #0
 80436cc:	d106      	bne.n	80436dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80436ce:	687b      	ldr	r3, [r7, #4]
 80436d0:	2200      	movs	r2, #0
 80436d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80436d6:	6878      	ldr	r0, [r7, #4]
 80436d8:	f7fd fbd8 	bl	8040e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80436dc:	687b      	ldr	r3, [r7, #4]
 80436de:	2224      	movs	r2, #36	; 0x24
 80436e0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80436e2:	687b      	ldr	r3, [r7, #4]
 80436e4:	681b      	ldr	r3, [r3, #0]
 80436e6:	681a      	ldr	r2, [r3, #0]
 80436e8:	687b      	ldr	r3, [r7, #4]
 80436ea:	681b      	ldr	r3, [r3, #0]
 80436ec:	f022 0201 	bic.w	r2, r2, #1
 80436f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80436f2:	6878      	ldr	r0, [r7, #4]
 80436f4:	f000 f8b0 	bl	8043858 <UART_SetConfig>
 80436f8:	4603      	mov	r3, r0
 80436fa:	2b01      	cmp	r3, #1
 80436fc:	d101      	bne.n	8043702 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80436fe:	2301      	movs	r3, #1
 8043700:	e022      	b.n	8043748 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8043702:	687b      	ldr	r3, [r7, #4]
 8043704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043706:	2b00      	cmp	r3, #0
 8043708:	d002      	beq.n	8043710 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 804370a:	6878      	ldr	r0, [r7, #4]
 804370c:	f000 fb08 	bl	8043d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8043710:	687b      	ldr	r3, [r7, #4]
 8043712:	681b      	ldr	r3, [r3, #0]
 8043714:	685a      	ldr	r2, [r3, #4]
 8043716:	687b      	ldr	r3, [r7, #4]
 8043718:	681b      	ldr	r3, [r3, #0]
 804371a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 804371e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8043720:	687b      	ldr	r3, [r7, #4]
 8043722:	681b      	ldr	r3, [r3, #0]
 8043724:	689a      	ldr	r2, [r3, #8]
 8043726:	687b      	ldr	r3, [r7, #4]
 8043728:	681b      	ldr	r3, [r3, #0]
 804372a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 804372e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8043730:	687b      	ldr	r3, [r7, #4]
 8043732:	681b      	ldr	r3, [r3, #0]
 8043734:	681a      	ldr	r2, [r3, #0]
 8043736:	687b      	ldr	r3, [r7, #4]
 8043738:	681b      	ldr	r3, [r3, #0]
 804373a:	f042 0201 	orr.w	r2, r2, #1
 804373e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8043740:	6878      	ldr	r0, [r7, #4]
 8043742:	f000 fb8f 	bl	8043e64 <UART_CheckIdleState>
 8043746:	4603      	mov	r3, r0
}
 8043748:	4618      	mov	r0, r3
 804374a:	3708      	adds	r7, #8
 804374c:	46bd      	mov	sp, r7
 804374e:	bd80      	pop	{r7, pc}

08043750 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8043750:	b580      	push	{r7, lr}
 8043752:	b08a      	sub	sp, #40	; 0x28
 8043754:	af02      	add	r7, sp, #8
 8043756:	60f8      	str	r0, [r7, #12]
 8043758:	60b9      	str	r1, [r7, #8]
 804375a:	603b      	str	r3, [r7, #0]
 804375c:	4613      	mov	r3, r2
 804375e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8043760:	68fb      	ldr	r3, [r7, #12]
 8043762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8043764:	2b20      	cmp	r3, #32
 8043766:	d171      	bne.n	804384c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8043768:	68bb      	ldr	r3, [r7, #8]
 804376a:	2b00      	cmp	r3, #0
 804376c:	d002      	beq.n	8043774 <HAL_UART_Transmit+0x24>
 804376e:	88fb      	ldrh	r3, [r7, #6]
 8043770:	2b00      	cmp	r3, #0
 8043772:	d101      	bne.n	8043778 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8043774:	2301      	movs	r3, #1
 8043776:	e06a      	b.n	804384e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043778:	68fb      	ldr	r3, [r7, #12]
 804377a:	2200      	movs	r2, #0
 804377c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8043780:	68fb      	ldr	r3, [r7, #12]
 8043782:	2221      	movs	r2, #33	; 0x21
 8043784:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8043786:	f7fd fd53 	bl	8041230 <HAL_GetTick>
 804378a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 804378c:	68fb      	ldr	r3, [r7, #12]
 804378e:	88fa      	ldrh	r2, [r7, #6]
 8043790:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8043794:	68fb      	ldr	r3, [r7, #12]
 8043796:	88fa      	ldrh	r2, [r7, #6]
 8043798:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 804379c:	68fb      	ldr	r3, [r7, #12]
 804379e:	689b      	ldr	r3, [r3, #8]
 80437a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80437a4:	d108      	bne.n	80437b8 <HAL_UART_Transmit+0x68>
 80437a6:	68fb      	ldr	r3, [r7, #12]
 80437a8:	691b      	ldr	r3, [r3, #16]
 80437aa:	2b00      	cmp	r3, #0
 80437ac:	d104      	bne.n	80437b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80437ae:	2300      	movs	r3, #0
 80437b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80437b2:	68bb      	ldr	r3, [r7, #8]
 80437b4:	61bb      	str	r3, [r7, #24]
 80437b6:	e003      	b.n	80437c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80437b8:	68bb      	ldr	r3, [r7, #8]
 80437ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80437bc:	2300      	movs	r3, #0
 80437be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80437c0:	e02c      	b.n	804381c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80437c2:	683b      	ldr	r3, [r7, #0]
 80437c4:	9300      	str	r3, [sp, #0]
 80437c6:	697b      	ldr	r3, [r7, #20]
 80437c8:	2200      	movs	r2, #0
 80437ca:	2180      	movs	r1, #128	; 0x80
 80437cc:	68f8      	ldr	r0, [r7, #12]
 80437ce:	f000 fb96 	bl	8043efe <UART_WaitOnFlagUntilTimeout>
 80437d2:	4603      	mov	r3, r0
 80437d4:	2b00      	cmp	r3, #0
 80437d6:	d001      	beq.n	80437dc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80437d8:	2303      	movs	r3, #3
 80437da:	e038      	b.n	804384e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80437dc:	69fb      	ldr	r3, [r7, #28]
 80437de:	2b00      	cmp	r3, #0
 80437e0:	d10b      	bne.n	80437fa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80437e2:	69bb      	ldr	r3, [r7, #24]
 80437e4:	881b      	ldrh	r3, [r3, #0]
 80437e6:	461a      	mov	r2, r3
 80437e8:	68fb      	ldr	r3, [r7, #12]
 80437ea:	681b      	ldr	r3, [r3, #0]
 80437ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80437f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80437f2:	69bb      	ldr	r3, [r7, #24]
 80437f4:	3302      	adds	r3, #2
 80437f6:	61bb      	str	r3, [r7, #24]
 80437f8:	e007      	b.n	804380a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80437fa:	69fb      	ldr	r3, [r7, #28]
 80437fc:	781a      	ldrb	r2, [r3, #0]
 80437fe:	68fb      	ldr	r3, [r7, #12]
 8043800:	681b      	ldr	r3, [r3, #0]
 8043802:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8043804:	69fb      	ldr	r3, [r7, #28]
 8043806:	3301      	adds	r3, #1
 8043808:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 804380a:	68fb      	ldr	r3, [r7, #12]
 804380c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8043810:	b29b      	uxth	r3, r3
 8043812:	3b01      	subs	r3, #1
 8043814:	b29a      	uxth	r2, r3
 8043816:	68fb      	ldr	r3, [r7, #12]
 8043818:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 804381c:	68fb      	ldr	r3, [r7, #12]
 804381e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8043822:	b29b      	uxth	r3, r3
 8043824:	2b00      	cmp	r3, #0
 8043826:	d1cc      	bne.n	80437c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8043828:	683b      	ldr	r3, [r7, #0]
 804382a:	9300      	str	r3, [sp, #0]
 804382c:	697b      	ldr	r3, [r7, #20]
 804382e:	2200      	movs	r2, #0
 8043830:	2140      	movs	r1, #64	; 0x40
 8043832:	68f8      	ldr	r0, [r7, #12]
 8043834:	f000 fb63 	bl	8043efe <UART_WaitOnFlagUntilTimeout>
 8043838:	4603      	mov	r3, r0
 804383a:	2b00      	cmp	r3, #0
 804383c:	d001      	beq.n	8043842 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 804383e:	2303      	movs	r3, #3
 8043840:	e005      	b.n	804384e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8043842:	68fb      	ldr	r3, [r7, #12]
 8043844:	2220      	movs	r2, #32
 8043846:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8043848:	2300      	movs	r3, #0
 804384a:	e000      	b.n	804384e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 804384c:	2302      	movs	r3, #2
  }
}
 804384e:	4618      	mov	r0, r3
 8043850:	3720      	adds	r7, #32
 8043852:	46bd      	mov	sp, r7
 8043854:	bd80      	pop	{r7, pc}
	...

08043858 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8043858:	b580      	push	{r7, lr}
 804385a:	b088      	sub	sp, #32
 804385c:	af00      	add	r7, sp, #0
 804385e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8043860:	2300      	movs	r3, #0
 8043862:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8043864:	687b      	ldr	r3, [r7, #4]
 8043866:	689a      	ldr	r2, [r3, #8]
 8043868:	687b      	ldr	r3, [r7, #4]
 804386a:	691b      	ldr	r3, [r3, #16]
 804386c:	431a      	orrs	r2, r3
 804386e:	687b      	ldr	r3, [r7, #4]
 8043870:	695b      	ldr	r3, [r3, #20]
 8043872:	431a      	orrs	r2, r3
 8043874:	687b      	ldr	r3, [r7, #4]
 8043876:	69db      	ldr	r3, [r3, #28]
 8043878:	4313      	orrs	r3, r2
 804387a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 804387c:	687b      	ldr	r3, [r7, #4]
 804387e:	681b      	ldr	r3, [r3, #0]
 8043880:	681a      	ldr	r2, [r3, #0]
 8043882:	4ba6      	ldr	r3, [pc, #664]	; (8043b1c <UART_SetConfig+0x2c4>)
 8043884:	4013      	ands	r3, r2
 8043886:	687a      	ldr	r2, [r7, #4]
 8043888:	6812      	ldr	r2, [r2, #0]
 804388a:	6979      	ldr	r1, [r7, #20]
 804388c:	430b      	orrs	r3, r1
 804388e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8043890:	687b      	ldr	r3, [r7, #4]
 8043892:	681b      	ldr	r3, [r3, #0]
 8043894:	685b      	ldr	r3, [r3, #4]
 8043896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 804389a:	687b      	ldr	r3, [r7, #4]
 804389c:	68da      	ldr	r2, [r3, #12]
 804389e:	687b      	ldr	r3, [r7, #4]
 80438a0:	681b      	ldr	r3, [r3, #0]
 80438a2:	430a      	orrs	r2, r1
 80438a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80438a6:	687b      	ldr	r3, [r7, #4]
 80438a8:	699b      	ldr	r3, [r3, #24]
 80438aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80438ac:	687b      	ldr	r3, [r7, #4]
 80438ae:	6a1b      	ldr	r3, [r3, #32]
 80438b0:	697a      	ldr	r2, [r7, #20]
 80438b2:	4313      	orrs	r3, r2
 80438b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80438b6:	687b      	ldr	r3, [r7, #4]
 80438b8:	681b      	ldr	r3, [r3, #0]
 80438ba:	689b      	ldr	r3, [r3, #8]
 80438bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80438c0:	687b      	ldr	r3, [r7, #4]
 80438c2:	681b      	ldr	r3, [r3, #0]
 80438c4:	697a      	ldr	r2, [r7, #20]
 80438c6:	430a      	orrs	r2, r1
 80438c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80438ca:	687b      	ldr	r3, [r7, #4]
 80438cc:	681b      	ldr	r3, [r3, #0]
 80438ce:	4a94      	ldr	r2, [pc, #592]	; (8043b20 <UART_SetConfig+0x2c8>)
 80438d0:	4293      	cmp	r3, r2
 80438d2:	d120      	bne.n	8043916 <UART_SetConfig+0xbe>
 80438d4:	4b93      	ldr	r3, [pc, #588]	; (8043b24 <UART_SetConfig+0x2cc>)
 80438d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80438da:	f003 0303 	and.w	r3, r3, #3
 80438de:	2b03      	cmp	r3, #3
 80438e0:	d816      	bhi.n	8043910 <UART_SetConfig+0xb8>
 80438e2:	a201      	add	r2, pc, #4	; (adr r2, 80438e8 <UART_SetConfig+0x90>)
 80438e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80438e8:	080438f9 	.word	0x080438f9
 80438ec:	08043905 	.word	0x08043905
 80438f0:	080438ff 	.word	0x080438ff
 80438f4:	0804390b 	.word	0x0804390b
 80438f8:	2301      	movs	r3, #1
 80438fa:	77fb      	strb	r3, [r7, #31]
 80438fc:	e150      	b.n	8043ba0 <UART_SetConfig+0x348>
 80438fe:	2302      	movs	r3, #2
 8043900:	77fb      	strb	r3, [r7, #31]
 8043902:	e14d      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043904:	2304      	movs	r3, #4
 8043906:	77fb      	strb	r3, [r7, #31]
 8043908:	e14a      	b.n	8043ba0 <UART_SetConfig+0x348>
 804390a:	2308      	movs	r3, #8
 804390c:	77fb      	strb	r3, [r7, #31]
 804390e:	e147      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043910:	2310      	movs	r3, #16
 8043912:	77fb      	strb	r3, [r7, #31]
 8043914:	e144      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043916:	687b      	ldr	r3, [r7, #4]
 8043918:	681b      	ldr	r3, [r3, #0]
 804391a:	4a83      	ldr	r2, [pc, #524]	; (8043b28 <UART_SetConfig+0x2d0>)
 804391c:	4293      	cmp	r3, r2
 804391e:	d132      	bne.n	8043986 <UART_SetConfig+0x12e>
 8043920:	4b80      	ldr	r3, [pc, #512]	; (8043b24 <UART_SetConfig+0x2cc>)
 8043922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043926:	f003 030c 	and.w	r3, r3, #12
 804392a:	2b0c      	cmp	r3, #12
 804392c:	d828      	bhi.n	8043980 <UART_SetConfig+0x128>
 804392e:	a201      	add	r2, pc, #4	; (adr r2, 8043934 <UART_SetConfig+0xdc>)
 8043930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043934:	08043969 	.word	0x08043969
 8043938:	08043981 	.word	0x08043981
 804393c:	08043981 	.word	0x08043981
 8043940:	08043981 	.word	0x08043981
 8043944:	08043975 	.word	0x08043975
 8043948:	08043981 	.word	0x08043981
 804394c:	08043981 	.word	0x08043981
 8043950:	08043981 	.word	0x08043981
 8043954:	0804396f 	.word	0x0804396f
 8043958:	08043981 	.word	0x08043981
 804395c:	08043981 	.word	0x08043981
 8043960:	08043981 	.word	0x08043981
 8043964:	0804397b 	.word	0x0804397b
 8043968:	2300      	movs	r3, #0
 804396a:	77fb      	strb	r3, [r7, #31]
 804396c:	e118      	b.n	8043ba0 <UART_SetConfig+0x348>
 804396e:	2302      	movs	r3, #2
 8043970:	77fb      	strb	r3, [r7, #31]
 8043972:	e115      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043974:	2304      	movs	r3, #4
 8043976:	77fb      	strb	r3, [r7, #31]
 8043978:	e112      	b.n	8043ba0 <UART_SetConfig+0x348>
 804397a:	2308      	movs	r3, #8
 804397c:	77fb      	strb	r3, [r7, #31]
 804397e:	e10f      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043980:	2310      	movs	r3, #16
 8043982:	77fb      	strb	r3, [r7, #31]
 8043984:	e10c      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043986:	687b      	ldr	r3, [r7, #4]
 8043988:	681b      	ldr	r3, [r3, #0]
 804398a:	4a68      	ldr	r2, [pc, #416]	; (8043b2c <UART_SetConfig+0x2d4>)
 804398c:	4293      	cmp	r3, r2
 804398e:	d120      	bne.n	80439d2 <UART_SetConfig+0x17a>
 8043990:	4b64      	ldr	r3, [pc, #400]	; (8043b24 <UART_SetConfig+0x2cc>)
 8043992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043996:	f003 0330 	and.w	r3, r3, #48	; 0x30
 804399a:	2b30      	cmp	r3, #48	; 0x30
 804399c:	d013      	beq.n	80439c6 <UART_SetConfig+0x16e>
 804399e:	2b30      	cmp	r3, #48	; 0x30
 80439a0:	d814      	bhi.n	80439cc <UART_SetConfig+0x174>
 80439a2:	2b20      	cmp	r3, #32
 80439a4:	d009      	beq.n	80439ba <UART_SetConfig+0x162>
 80439a6:	2b20      	cmp	r3, #32
 80439a8:	d810      	bhi.n	80439cc <UART_SetConfig+0x174>
 80439aa:	2b00      	cmp	r3, #0
 80439ac:	d002      	beq.n	80439b4 <UART_SetConfig+0x15c>
 80439ae:	2b10      	cmp	r3, #16
 80439b0:	d006      	beq.n	80439c0 <UART_SetConfig+0x168>
 80439b2:	e00b      	b.n	80439cc <UART_SetConfig+0x174>
 80439b4:	2300      	movs	r3, #0
 80439b6:	77fb      	strb	r3, [r7, #31]
 80439b8:	e0f2      	b.n	8043ba0 <UART_SetConfig+0x348>
 80439ba:	2302      	movs	r3, #2
 80439bc:	77fb      	strb	r3, [r7, #31]
 80439be:	e0ef      	b.n	8043ba0 <UART_SetConfig+0x348>
 80439c0:	2304      	movs	r3, #4
 80439c2:	77fb      	strb	r3, [r7, #31]
 80439c4:	e0ec      	b.n	8043ba0 <UART_SetConfig+0x348>
 80439c6:	2308      	movs	r3, #8
 80439c8:	77fb      	strb	r3, [r7, #31]
 80439ca:	e0e9      	b.n	8043ba0 <UART_SetConfig+0x348>
 80439cc:	2310      	movs	r3, #16
 80439ce:	77fb      	strb	r3, [r7, #31]
 80439d0:	e0e6      	b.n	8043ba0 <UART_SetConfig+0x348>
 80439d2:	687b      	ldr	r3, [r7, #4]
 80439d4:	681b      	ldr	r3, [r3, #0]
 80439d6:	4a56      	ldr	r2, [pc, #344]	; (8043b30 <UART_SetConfig+0x2d8>)
 80439d8:	4293      	cmp	r3, r2
 80439da:	d120      	bne.n	8043a1e <UART_SetConfig+0x1c6>
 80439dc:	4b51      	ldr	r3, [pc, #324]	; (8043b24 <UART_SetConfig+0x2cc>)
 80439de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80439e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80439e6:	2bc0      	cmp	r3, #192	; 0xc0
 80439e8:	d013      	beq.n	8043a12 <UART_SetConfig+0x1ba>
 80439ea:	2bc0      	cmp	r3, #192	; 0xc0
 80439ec:	d814      	bhi.n	8043a18 <UART_SetConfig+0x1c0>
 80439ee:	2b80      	cmp	r3, #128	; 0x80
 80439f0:	d009      	beq.n	8043a06 <UART_SetConfig+0x1ae>
 80439f2:	2b80      	cmp	r3, #128	; 0x80
 80439f4:	d810      	bhi.n	8043a18 <UART_SetConfig+0x1c0>
 80439f6:	2b00      	cmp	r3, #0
 80439f8:	d002      	beq.n	8043a00 <UART_SetConfig+0x1a8>
 80439fa:	2b40      	cmp	r3, #64	; 0x40
 80439fc:	d006      	beq.n	8043a0c <UART_SetConfig+0x1b4>
 80439fe:	e00b      	b.n	8043a18 <UART_SetConfig+0x1c0>
 8043a00:	2300      	movs	r3, #0
 8043a02:	77fb      	strb	r3, [r7, #31]
 8043a04:	e0cc      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043a06:	2302      	movs	r3, #2
 8043a08:	77fb      	strb	r3, [r7, #31]
 8043a0a:	e0c9      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043a0c:	2304      	movs	r3, #4
 8043a0e:	77fb      	strb	r3, [r7, #31]
 8043a10:	e0c6      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043a12:	2308      	movs	r3, #8
 8043a14:	77fb      	strb	r3, [r7, #31]
 8043a16:	e0c3      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043a18:	2310      	movs	r3, #16
 8043a1a:	77fb      	strb	r3, [r7, #31]
 8043a1c:	e0c0      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043a1e:	687b      	ldr	r3, [r7, #4]
 8043a20:	681b      	ldr	r3, [r3, #0]
 8043a22:	4a44      	ldr	r2, [pc, #272]	; (8043b34 <UART_SetConfig+0x2dc>)
 8043a24:	4293      	cmp	r3, r2
 8043a26:	d125      	bne.n	8043a74 <UART_SetConfig+0x21c>
 8043a28:	4b3e      	ldr	r3, [pc, #248]	; (8043b24 <UART_SetConfig+0x2cc>)
 8043a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8043a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8043a36:	d017      	beq.n	8043a68 <UART_SetConfig+0x210>
 8043a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8043a3c:	d817      	bhi.n	8043a6e <UART_SetConfig+0x216>
 8043a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8043a42:	d00b      	beq.n	8043a5c <UART_SetConfig+0x204>
 8043a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8043a48:	d811      	bhi.n	8043a6e <UART_SetConfig+0x216>
 8043a4a:	2b00      	cmp	r3, #0
 8043a4c:	d003      	beq.n	8043a56 <UART_SetConfig+0x1fe>
 8043a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8043a52:	d006      	beq.n	8043a62 <UART_SetConfig+0x20a>
 8043a54:	e00b      	b.n	8043a6e <UART_SetConfig+0x216>
 8043a56:	2300      	movs	r3, #0
 8043a58:	77fb      	strb	r3, [r7, #31]
 8043a5a:	e0a1      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043a5c:	2302      	movs	r3, #2
 8043a5e:	77fb      	strb	r3, [r7, #31]
 8043a60:	e09e      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043a62:	2304      	movs	r3, #4
 8043a64:	77fb      	strb	r3, [r7, #31]
 8043a66:	e09b      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043a68:	2308      	movs	r3, #8
 8043a6a:	77fb      	strb	r3, [r7, #31]
 8043a6c:	e098      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043a6e:	2310      	movs	r3, #16
 8043a70:	77fb      	strb	r3, [r7, #31]
 8043a72:	e095      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043a74:	687b      	ldr	r3, [r7, #4]
 8043a76:	681b      	ldr	r3, [r3, #0]
 8043a78:	4a2f      	ldr	r2, [pc, #188]	; (8043b38 <UART_SetConfig+0x2e0>)
 8043a7a:	4293      	cmp	r3, r2
 8043a7c:	d125      	bne.n	8043aca <UART_SetConfig+0x272>
 8043a7e:	4b29      	ldr	r3, [pc, #164]	; (8043b24 <UART_SetConfig+0x2cc>)
 8043a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043a84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8043a88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8043a8c:	d017      	beq.n	8043abe <UART_SetConfig+0x266>
 8043a8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8043a92:	d817      	bhi.n	8043ac4 <UART_SetConfig+0x26c>
 8043a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043a98:	d00b      	beq.n	8043ab2 <UART_SetConfig+0x25a>
 8043a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043a9e:	d811      	bhi.n	8043ac4 <UART_SetConfig+0x26c>
 8043aa0:	2b00      	cmp	r3, #0
 8043aa2:	d003      	beq.n	8043aac <UART_SetConfig+0x254>
 8043aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8043aa8:	d006      	beq.n	8043ab8 <UART_SetConfig+0x260>
 8043aaa:	e00b      	b.n	8043ac4 <UART_SetConfig+0x26c>
 8043aac:	2301      	movs	r3, #1
 8043aae:	77fb      	strb	r3, [r7, #31]
 8043ab0:	e076      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043ab2:	2302      	movs	r3, #2
 8043ab4:	77fb      	strb	r3, [r7, #31]
 8043ab6:	e073      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043ab8:	2304      	movs	r3, #4
 8043aba:	77fb      	strb	r3, [r7, #31]
 8043abc:	e070      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043abe:	2308      	movs	r3, #8
 8043ac0:	77fb      	strb	r3, [r7, #31]
 8043ac2:	e06d      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043ac4:	2310      	movs	r3, #16
 8043ac6:	77fb      	strb	r3, [r7, #31]
 8043ac8:	e06a      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043aca:	687b      	ldr	r3, [r7, #4]
 8043acc:	681b      	ldr	r3, [r3, #0]
 8043ace:	4a1b      	ldr	r2, [pc, #108]	; (8043b3c <UART_SetConfig+0x2e4>)
 8043ad0:	4293      	cmp	r3, r2
 8043ad2:	d138      	bne.n	8043b46 <UART_SetConfig+0x2ee>
 8043ad4:	4b13      	ldr	r3, [pc, #76]	; (8043b24 <UART_SetConfig+0x2cc>)
 8043ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043ada:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8043ade:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8043ae2:	d017      	beq.n	8043b14 <UART_SetConfig+0x2bc>
 8043ae4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8043ae8:	d82a      	bhi.n	8043b40 <UART_SetConfig+0x2e8>
 8043aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8043aee:	d00b      	beq.n	8043b08 <UART_SetConfig+0x2b0>
 8043af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8043af4:	d824      	bhi.n	8043b40 <UART_SetConfig+0x2e8>
 8043af6:	2b00      	cmp	r3, #0
 8043af8:	d003      	beq.n	8043b02 <UART_SetConfig+0x2aa>
 8043afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8043afe:	d006      	beq.n	8043b0e <UART_SetConfig+0x2b6>
 8043b00:	e01e      	b.n	8043b40 <UART_SetConfig+0x2e8>
 8043b02:	2300      	movs	r3, #0
 8043b04:	77fb      	strb	r3, [r7, #31]
 8043b06:	e04b      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043b08:	2302      	movs	r3, #2
 8043b0a:	77fb      	strb	r3, [r7, #31]
 8043b0c:	e048      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043b0e:	2304      	movs	r3, #4
 8043b10:	77fb      	strb	r3, [r7, #31]
 8043b12:	e045      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043b14:	2308      	movs	r3, #8
 8043b16:	77fb      	strb	r3, [r7, #31]
 8043b18:	e042      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043b1a:	bf00      	nop
 8043b1c:	efff69f3 	.word	0xefff69f3
 8043b20:	40011000 	.word	0x40011000
 8043b24:	40023800 	.word	0x40023800
 8043b28:	40004400 	.word	0x40004400
 8043b2c:	40004800 	.word	0x40004800
 8043b30:	40004c00 	.word	0x40004c00
 8043b34:	40005000 	.word	0x40005000
 8043b38:	40011400 	.word	0x40011400
 8043b3c:	40007800 	.word	0x40007800
 8043b40:	2310      	movs	r3, #16
 8043b42:	77fb      	strb	r3, [r7, #31]
 8043b44:	e02c      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043b46:	687b      	ldr	r3, [r7, #4]
 8043b48:	681b      	ldr	r3, [r3, #0]
 8043b4a:	4a72      	ldr	r2, [pc, #456]	; (8043d14 <UART_SetConfig+0x4bc>)
 8043b4c:	4293      	cmp	r3, r2
 8043b4e:	d125      	bne.n	8043b9c <UART_SetConfig+0x344>
 8043b50:	4b71      	ldr	r3, [pc, #452]	; (8043d18 <UART_SetConfig+0x4c0>)
 8043b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043b56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8043b5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8043b5e:	d017      	beq.n	8043b90 <UART_SetConfig+0x338>
 8043b60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8043b64:	d817      	bhi.n	8043b96 <UART_SetConfig+0x33e>
 8043b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8043b6a:	d00b      	beq.n	8043b84 <UART_SetConfig+0x32c>
 8043b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8043b70:	d811      	bhi.n	8043b96 <UART_SetConfig+0x33e>
 8043b72:	2b00      	cmp	r3, #0
 8043b74:	d003      	beq.n	8043b7e <UART_SetConfig+0x326>
 8043b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8043b7a:	d006      	beq.n	8043b8a <UART_SetConfig+0x332>
 8043b7c:	e00b      	b.n	8043b96 <UART_SetConfig+0x33e>
 8043b7e:	2300      	movs	r3, #0
 8043b80:	77fb      	strb	r3, [r7, #31]
 8043b82:	e00d      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043b84:	2302      	movs	r3, #2
 8043b86:	77fb      	strb	r3, [r7, #31]
 8043b88:	e00a      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043b8a:	2304      	movs	r3, #4
 8043b8c:	77fb      	strb	r3, [r7, #31]
 8043b8e:	e007      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043b90:	2308      	movs	r3, #8
 8043b92:	77fb      	strb	r3, [r7, #31]
 8043b94:	e004      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043b96:	2310      	movs	r3, #16
 8043b98:	77fb      	strb	r3, [r7, #31]
 8043b9a:	e001      	b.n	8043ba0 <UART_SetConfig+0x348>
 8043b9c:	2310      	movs	r3, #16
 8043b9e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8043ba0:	687b      	ldr	r3, [r7, #4]
 8043ba2:	69db      	ldr	r3, [r3, #28]
 8043ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8043ba8:	d15b      	bne.n	8043c62 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8043baa:	7ffb      	ldrb	r3, [r7, #31]
 8043bac:	2b08      	cmp	r3, #8
 8043bae:	d828      	bhi.n	8043c02 <UART_SetConfig+0x3aa>
 8043bb0:	a201      	add	r2, pc, #4	; (adr r2, 8043bb8 <UART_SetConfig+0x360>)
 8043bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043bb6:	bf00      	nop
 8043bb8:	08043bdd 	.word	0x08043bdd
 8043bbc:	08043be5 	.word	0x08043be5
 8043bc0:	08043bed 	.word	0x08043bed
 8043bc4:	08043c03 	.word	0x08043c03
 8043bc8:	08043bf3 	.word	0x08043bf3
 8043bcc:	08043c03 	.word	0x08043c03
 8043bd0:	08043c03 	.word	0x08043c03
 8043bd4:	08043c03 	.word	0x08043c03
 8043bd8:	08043bfb 	.word	0x08043bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8043bdc:	f7ff f91a 	bl	8042e14 <HAL_RCC_GetPCLK1Freq>
 8043be0:	61b8      	str	r0, [r7, #24]
        break;
 8043be2:	e013      	b.n	8043c0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8043be4:	f7ff f92a 	bl	8042e3c <HAL_RCC_GetPCLK2Freq>
 8043be8:	61b8      	str	r0, [r7, #24]
        break;
 8043bea:	e00f      	b.n	8043c0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8043bec:	4b4b      	ldr	r3, [pc, #300]	; (8043d1c <UART_SetConfig+0x4c4>)
 8043bee:	61bb      	str	r3, [r7, #24]
        break;
 8043bf0:	e00c      	b.n	8043c0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8043bf2:	f7ff f83d 	bl	8042c70 <HAL_RCC_GetSysClockFreq>
 8043bf6:	61b8      	str	r0, [r7, #24]
        break;
 8043bf8:	e008      	b.n	8043c0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8043bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8043bfe:	61bb      	str	r3, [r7, #24]
        break;
 8043c00:	e004      	b.n	8043c0c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8043c02:	2300      	movs	r3, #0
 8043c04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8043c06:	2301      	movs	r3, #1
 8043c08:	77bb      	strb	r3, [r7, #30]
        break;
 8043c0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8043c0c:	69bb      	ldr	r3, [r7, #24]
 8043c0e:	2b00      	cmp	r3, #0
 8043c10:	d074      	beq.n	8043cfc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8043c12:	69bb      	ldr	r3, [r7, #24]
 8043c14:	005a      	lsls	r2, r3, #1
 8043c16:	687b      	ldr	r3, [r7, #4]
 8043c18:	685b      	ldr	r3, [r3, #4]
 8043c1a:	085b      	lsrs	r3, r3, #1
 8043c1c:	441a      	add	r2, r3
 8043c1e:	687b      	ldr	r3, [r7, #4]
 8043c20:	685b      	ldr	r3, [r3, #4]
 8043c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8043c26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8043c28:	693b      	ldr	r3, [r7, #16]
 8043c2a:	2b0f      	cmp	r3, #15
 8043c2c:	d916      	bls.n	8043c5c <UART_SetConfig+0x404>
 8043c2e:	693b      	ldr	r3, [r7, #16]
 8043c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043c34:	d212      	bcs.n	8043c5c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8043c36:	693b      	ldr	r3, [r7, #16]
 8043c38:	b29b      	uxth	r3, r3
 8043c3a:	f023 030f 	bic.w	r3, r3, #15
 8043c3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8043c40:	693b      	ldr	r3, [r7, #16]
 8043c42:	085b      	lsrs	r3, r3, #1
 8043c44:	b29b      	uxth	r3, r3
 8043c46:	f003 0307 	and.w	r3, r3, #7
 8043c4a:	b29a      	uxth	r2, r3
 8043c4c:	89fb      	ldrh	r3, [r7, #14]
 8043c4e:	4313      	orrs	r3, r2
 8043c50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8043c52:	687b      	ldr	r3, [r7, #4]
 8043c54:	681b      	ldr	r3, [r3, #0]
 8043c56:	89fa      	ldrh	r2, [r7, #14]
 8043c58:	60da      	str	r2, [r3, #12]
 8043c5a:	e04f      	b.n	8043cfc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8043c5c:	2301      	movs	r3, #1
 8043c5e:	77bb      	strb	r3, [r7, #30]
 8043c60:	e04c      	b.n	8043cfc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8043c62:	7ffb      	ldrb	r3, [r7, #31]
 8043c64:	2b08      	cmp	r3, #8
 8043c66:	d828      	bhi.n	8043cba <UART_SetConfig+0x462>
 8043c68:	a201      	add	r2, pc, #4	; (adr r2, 8043c70 <UART_SetConfig+0x418>)
 8043c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043c6e:	bf00      	nop
 8043c70:	08043c95 	.word	0x08043c95
 8043c74:	08043c9d 	.word	0x08043c9d
 8043c78:	08043ca5 	.word	0x08043ca5
 8043c7c:	08043cbb 	.word	0x08043cbb
 8043c80:	08043cab 	.word	0x08043cab
 8043c84:	08043cbb 	.word	0x08043cbb
 8043c88:	08043cbb 	.word	0x08043cbb
 8043c8c:	08043cbb 	.word	0x08043cbb
 8043c90:	08043cb3 	.word	0x08043cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8043c94:	f7ff f8be 	bl	8042e14 <HAL_RCC_GetPCLK1Freq>
 8043c98:	61b8      	str	r0, [r7, #24]
        break;
 8043c9a:	e013      	b.n	8043cc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8043c9c:	f7ff f8ce 	bl	8042e3c <HAL_RCC_GetPCLK2Freq>
 8043ca0:	61b8      	str	r0, [r7, #24]
        break;
 8043ca2:	e00f      	b.n	8043cc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8043ca4:	4b1d      	ldr	r3, [pc, #116]	; (8043d1c <UART_SetConfig+0x4c4>)
 8043ca6:	61bb      	str	r3, [r7, #24]
        break;
 8043ca8:	e00c      	b.n	8043cc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8043caa:	f7fe ffe1 	bl	8042c70 <HAL_RCC_GetSysClockFreq>
 8043cae:	61b8      	str	r0, [r7, #24]
        break;
 8043cb0:	e008      	b.n	8043cc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8043cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8043cb6:	61bb      	str	r3, [r7, #24]
        break;
 8043cb8:	e004      	b.n	8043cc4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8043cba:	2300      	movs	r3, #0
 8043cbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8043cbe:	2301      	movs	r3, #1
 8043cc0:	77bb      	strb	r3, [r7, #30]
        break;
 8043cc2:	bf00      	nop
    }

    if (pclk != 0U)
 8043cc4:	69bb      	ldr	r3, [r7, #24]
 8043cc6:	2b00      	cmp	r3, #0
 8043cc8:	d018      	beq.n	8043cfc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8043cca:	687b      	ldr	r3, [r7, #4]
 8043ccc:	685b      	ldr	r3, [r3, #4]
 8043cce:	085a      	lsrs	r2, r3, #1
 8043cd0:	69bb      	ldr	r3, [r7, #24]
 8043cd2:	441a      	add	r2, r3
 8043cd4:	687b      	ldr	r3, [r7, #4]
 8043cd6:	685b      	ldr	r3, [r3, #4]
 8043cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8043cdc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8043cde:	693b      	ldr	r3, [r7, #16]
 8043ce0:	2b0f      	cmp	r3, #15
 8043ce2:	d909      	bls.n	8043cf8 <UART_SetConfig+0x4a0>
 8043ce4:	693b      	ldr	r3, [r7, #16]
 8043ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043cea:	d205      	bcs.n	8043cf8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8043cec:	693b      	ldr	r3, [r7, #16]
 8043cee:	b29a      	uxth	r2, r3
 8043cf0:	687b      	ldr	r3, [r7, #4]
 8043cf2:	681b      	ldr	r3, [r3, #0]
 8043cf4:	60da      	str	r2, [r3, #12]
 8043cf6:	e001      	b.n	8043cfc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8043cf8:	2301      	movs	r3, #1
 8043cfa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8043cfc:	687b      	ldr	r3, [r7, #4]
 8043cfe:	2200      	movs	r2, #0
 8043d00:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8043d02:	687b      	ldr	r3, [r7, #4]
 8043d04:	2200      	movs	r2, #0
 8043d06:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8043d08:	7fbb      	ldrb	r3, [r7, #30]
}
 8043d0a:	4618      	mov	r0, r3
 8043d0c:	3720      	adds	r7, #32
 8043d0e:	46bd      	mov	sp, r7
 8043d10:	bd80      	pop	{r7, pc}
 8043d12:	bf00      	nop
 8043d14:	40007c00 	.word	0x40007c00
 8043d18:	40023800 	.word	0x40023800
 8043d1c:	00f42400 	.word	0x00f42400

08043d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8043d20:	b480      	push	{r7}
 8043d22:	b083      	sub	sp, #12
 8043d24:	af00      	add	r7, sp, #0
 8043d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8043d28:	687b      	ldr	r3, [r7, #4]
 8043d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043d2c:	f003 0301 	and.w	r3, r3, #1
 8043d30:	2b00      	cmp	r3, #0
 8043d32:	d00a      	beq.n	8043d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8043d34:	687b      	ldr	r3, [r7, #4]
 8043d36:	681b      	ldr	r3, [r3, #0]
 8043d38:	685b      	ldr	r3, [r3, #4]
 8043d3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8043d3e:	687b      	ldr	r3, [r7, #4]
 8043d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8043d42:	687b      	ldr	r3, [r7, #4]
 8043d44:	681b      	ldr	r3, [r3, #0]
 8043d46:	430a      	orrs	r2, r1
 8043d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8043d4a:	687b      	ldr	r3, [r7, #4]
 8043d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043d4e:	f003 0302 	and.w	r3, r3, #2
 8043d52:	2b00      	cmp	r3, #0
 8043d54:	d00a      	beq.n	8043d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8043d56:	687b      	ldr	r3, [r7, #4]
 8043d58:	681b      	ldr	r3, [r3, #0]
 8043d5a:	685b      	ldr	r3, [r3, #4]
 8043d5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8043d60:	687b      	ldr	r3, [r7, #4]
 8043d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043d64:	687b      	ldr	r3, [r7, #4]
 8043d66:	681b      	ldr	r3, [r3, #0]
 8043d68:	430a      	orrs	r2, r1
 8043d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8043d6c:	687b      	ldr	r3, [r7, #4]
 8043d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043d70:	f003 0304 	and.w	r3, r3, #4
 8043d74:	2b00      	cmp	r3, #0
 8043d76:	d00a      	beq.n	8043d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8043d78:	687b      	ldr	r3, [r7, #4]
 8043d7a:	681b      	ldr	r3, [r3, #0]
 8043d7c:	685b      	ldr	r3, [r3, #4]
 8043d7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8043d82:	687b      	ldr	r3, [r7, #4]
 8043d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8043d86:	687b      	ldr	r3, [r7, #4]
 8043d88:	681b      	ldr	r3, [r3, #0]
 8043d8a:	430a      	orrs	r2, r1
 8043d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8043d8e:	687b      	ldr	r3, [r7, #4]
 8043d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043d92:	f003 0308 	and.w	r3, r3, #8
 8043d96:	2b00      	cmp	r3, #0
 8043d98:	d00a      	beq.n	8043db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8043d9a:	687b      	ldr	r3, [r7, #4]
 8043d9c:	681b      	ldr	r3, [r3, #0]
 8043d9e:	685b      	ldr	r3, [r3, #4]
 8043da0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8043da4:	687b      	ldr	r3, [r7, #4]
 8043da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8043da8:	687b      	ldr	r3, [r7, #4]
 8043daa:	681b      	ldr	r3, [r3, #0]
 8043dac:	430a      	orrs	r2, r1
 8043dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8043db0:	687b      	ldr	r3, [r7, #4]
 8043db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043db4:	f003 0310 	and.w	r3, r3, #16
 8043db8:	2b00      	cmp	r3, #0
 8043dba:	d00a      	beq.n	8043dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8043dbc:	687b      	ldr	r3, [r7, #4]
 8043dbe:	681b      	ldr	r3, [r3, #0]
 8043dc0:	689b      	ldr	r3, [r3, #8]
 8043dc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8043dc6:	687b      	ldr	r3, [r7, #4]
 8043dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8043dca:	687b      	ldr	r3, [r7, #4]
 8043dcc:	681b      	ldr	r3, [r3, #0]
 8043dce:	430a      	orrs	r2, r1
 8043dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8043dd2:	687b      	ldr	r3, [r7, #4]
 8043dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043dd6:	f003 0320 	and.w	r3, r3, #32
 8043dda:	2b00      	cmp	r3, #0
 8043ddc:	d00a      	beq.n	8043df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8043dde:	687b      	ldr	r3, [r7, #4]
 8043de0:	681b      	ldr	r3, [r3, #0]
 8043de2:	689b      	ldr	r3, [r3, #8]
 8043de4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8043de8:	687b      	ldr	r3, [r7, #4]
 8043dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8043dec:	687b      	ldr	r3, [r7, #4]
 8043dee:	681b      	ldr	r3, [r3, #0]
 8043df0:	430a      	orrs	r2, r1
 8043df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8043df4:	687b      	ldr	r3, [r7, #4]
 8043df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043dfc:	2b00      	cmp	r3, #0
 8043dfe:	d01a      	beq.n	8043e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8043e00:	687b      	ldr	r3, [r7, #4]
 8043e02:	681b      	ldr	r3, [r3, #0]
 8043e04:	685b      	ldr	r3, [r3, #4]
 8043e06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8043e0a:	687b      	ldr	r3, [r7, #4]
 8043e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8043e0e:	687b      	ldr	r3, [r7, #4]
 8043e10:	681b      	ldr	r3, [r3, #0]
 8043e12:	430a      	orrs	r2, r1
 8043e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8043e16:	687b      	ldr	r3, [r7, #4]
 8043e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8043e1e:	d10a      	bne.n	8043e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8043e20:	687b      	ldr	r3, [r7, #4]
 8043e22:	681b      	ldr	r3, [r3, #0]
 8043e24:	685b      	ldr	r3, [r3, #4]
 8043e26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8043e2a:	687b      	ldr	r3, [r7, #4]
 8043e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8043e2e:	687b      	ldr	r3, [r7, #4]
 8043e30:	681b      	ldr	r3, [r3, #0]
 8043e32:	430a      	orrs	r2, r1
 8043e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8043e36:	687b      	ldr	r3, [r7, #4]
 8043e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043e3e:	2b00      	cmp	r3, #0
 8043e40:	d00a      	beq.n	8043e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8043e42:	687b      	ldr	r3, [r7, #4]
 8043e44:	681b      	ldr	r3, [r3, #0]
 8043e46:	685b      	ldr	r3, [r3, #4]
 8043e48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8043e4c:	687b      	ldr	r3, [r7, #4]
 8043e4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8043e50:	687b      	ldr	r3, [r7, #4]
 8043e52:	681b      	ldr	r3, [r3, #0]
 8043e54:	430a      	orrs	r2, r1
 8043e56:	605a      	str	r2, [r3, #4]
  }
}
 8043e58:	bf00      	nop
 8043e5a:	370c      	adds	r7, #12
 8043e5c:	46bd      	mov	sp, r7
 8043e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e62:	4770      	bx	lr

08043e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8043e64:	b580      	push	{r7, lr}
 8043e66:	b086      	sub	sp, #24
 8043e68:	af02      	add	r7, sp, #8
 8043e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043e6c:	687b      	ldr	r3, [r7, #4]
 8043e6e:	2200      	movs	r2, #0
 8043e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8043e74:	f7fd f9dc 	bl	8041230 <HAL_GetTick>
 8043e78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8043e7a:	687b      	ldr	r3, [r7, #4]
 8043e7c:	681b      	ldr	r3, [r3, #0]
 8043e7e:	681b      	ldr	r3, [r3, #0]
 8043e80:	f003 0308 	and.w	r3, r3, #8
 8043e84:	2b08      	cmp	r3, #8
 8043e86:	d10e      	bne.n	8043ea6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8043e88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8043e8c:	9300      	str	r3, [sp, #0]
 8043e8e:	68fb      	ldr	r3, [r7, #12]
 8043e90:	2200      	movs	r2, #0
 8043e92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8043e96:	6878      	ldr	r0, [r7, #4]
 8043e98:	f000 f831 	bl	8043efe <UART_WaitOnFlagUntilTimeout>
 8043e9c:	4603      	mov	r3, r0
 8043e9e:	2b00      	cmp	r3, #0
 8043ea0:	d001      	beq.n	8043ea6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8043ea2:	2303      	movs	r3, #3
 8043ea4:	e027      	b.n	8043ef6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8043ea6:	687b      	ldr	r3, [r7, #4]
 8043ea8:	681b      	ldr	r3, [r3, #0]
 8043eaa:	681b      	ldr	r3, [r3, #0]
 8043eac:	f003 0304 	and.w	r3, r3, #4
 8043eb0:	2b04      	cmp	r3, #4
 8043eb2:	d10e      	bne.n	8043ed2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8043eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8043eb8:	9300      	str	r3, [sp, #0]
 8043eba:	68fb      	ldr	r3, [r7, #12]
 8043ebc:	2200      	movs	r2, #0
 8043ebe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8043ec2:	6878      	ldr	r0, [r7, #4]
 8043ec4:	f000 f81b 	bl	8043efe <UART_WaitOnFlagUntilTimeout>
 8043ec8:	4603      	mov	r3, r0
 8043eca:	2b00      	cmp	r3, #0
 8043ecc:	d001      	beq.n	8043ed2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8043ece:	2303      	movs	r3, #3
 8043ed0:	e011      	b.n	8043ef6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8043ed2:	687b      	ldr	r3, [r7, #4]
 8043ed4:	2220      	movs	r2, #32
 8043ed6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8043ed8:	687b      	ldr	r3, [r7, #4]
 8043eda:	2220      	movs	r2, #32
 8043edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043ee0:	687b      	ldr	r3, [r7, #4]
 8043ee2:	2200      	movs	r2, #0
 8043ee4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8043ee6:	687b      	ldr	r3, [r7, #4]
 8043ee8:	2200      	movs	r2, #0
 8043eea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8043eec:	687b      	ldr	r3, [r7, #4]
 8043eee:	2200      	movs	r2, #0
 8043ef0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8043ef4:	2300      	movs	r3, #0
}
 8043ef6:	4618      	mov	r0, r3
 8043ef8:	3710      	adds	r7, #16
 8043efa:	46bd      	mov	sp, r7
 8043efc:	bd80      	pop	{r7, pc}

08043efe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8043efe:	b580      	push	{r7, lr}
 8043f00:	b09c      	sub	sp, #112	; 0x70
 8043f02:	af00      	add	r7, sp, #0
 8043f04:	60f8      	str	r0, [r7, #12]
 8043f06:	60b9      	str	r1, [r7, #8]
 8043f08:	603b      	str	r3, [r7, #0]
 8043f0a:	4613      	mov	r3, r2
 8043f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8043f0e:	e0a7      	b.n	8044060 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8043f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8043f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043f16:	f000 80a3 	beq.w	8044060 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8043f1a:	f7fd f989 	bl	8041230 <HAL_GetTick>
 8043f1e:	4602      	mov	r2, r0
 8043f20:	683b      	ldr	r3, [r7, #0]
 8043f22:	1ad3      	subs	r3, r2, r3
 8043f24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8043f26:	429a      	cmp	r2, r3
 8043f28:	d302      	bcc.n	8043f30 <UART_WaitOnFlagUntilTimeout+0x32>
 8043f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8043f2c:	2b00      	cmp	r3, #0
 8043f2e:	d13f      	bne.n	8043fb0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8043f30:	68fb      	ldr	r3, [r7, #12]
 8043f32:	681b      	ldr	r3, [r3, #0]
 8043f34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8043f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8043f38:	e853 3f00 	ldrex	r3, [r3]
 8043f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8043f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8043f40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8043f44:	667b      	str	r3, [r7, #100]	; 0x64
 8043f46:	68fb      	ldr	r3, [r7, #12]
 8043f48:	681b      	ldr	r3, [r3, #0]
 8043f4a:	461a      	mov	r2, r3
 8043f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8043f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8043f50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8043f52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8043f54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8043f56:	e841 2300 	strex	r3, r2, [r1]
 8043f5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8043f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8043f5e:	2b00      	cmp	r3, #0
 8043f60:	d1e6      	bne.n	8043f30 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8043f62:	68fb      	ldr	r3, [r7, #12]
 8043f64:	681b      	ldr	r3, [r3, #0]
 8043f66:	3308      	adds	r3, #8
 8043f68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8043f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8043f6c:	e853 3f00 	ldrex	r3, [r3]
 8043f70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8043f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8043f74:	f023 0301 	bic.w	r3, r3, #1
 8043f78:	663b      	str	r3, [r7, #96]	; 0x60
 8043f7a:	68fb      	ldr	r3, [r7, #12]
 8043f7c:	681b      	ldr	r3, [r3, #0]
 8043f7e:	3308      	adds	r3, #8
 8043f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8043f82:	64ba      	str	r2, [r7, #72]	; 0x48
 8043f84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8043f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8043f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8043f8a:	e841 2300 	strex	r3, r2, [r1]
 8043f8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8043f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8043f92:	2b00      	cmp	r3, #0
 8043f94:	d1e5      	bne.n	8043f62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8043f96:	68fb      	ldr	r3, [r7, #12]
 8043f98:	2220      	movs	r2, #32
 8043f9a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8043f9c:	68fb      	ldr	r3, [r7, #12]
 8043f9e:	2220      	movs	r2, #32
 8043fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8043fa4:	68fb      	ldr	r3, [r7, #12]
 8043fa6:	2200      	movs	r2, #0
 8043fa8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8043fac:	2303      	movs	r3, #3
 8043fae:	e068      	b.n	8044082 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8043fb0:	68fb      	ldr	r3, [r7, #12]
 8043fb2:	681b      	ldr	r3, [r3, #0]
 8043fb4:	681b      	ldr	r3, [r3, #0]
 8043fb6:	f003 0304 	and.w	r3, r3, #4
 8043fba:	2b00      	cmp	r3, #0
 8043fbc:	d050      	beq.n	8044060 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8043fbe:	68fb      	ldr	r3, [r7, #12]
 8043fc0:	681b      	ldr	r3, [r3, #0]
 8043fc2:	69db      	ldr	r3, [r3, #28]
 8043fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8043fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043fcc:	d148      	bne.n	8044060 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8043fce:	68fb      	ldr	r3, [r7, #12]
 8043fd0:	681b      	ldr	r3, [r3, #0]
 8043fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8043fd6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8043fd8:	68fb      	ldr	r3, [r7, #12]
 8043fda:	681b      	ldr	r3, [r3, #0]
 8043fdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8043fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043fe0:	e853 3f00 	ldrex	r3, [r3]
 8043fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8043fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043fe8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8043fec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8043fee:	68fb      	ldr	r3, [r7, #12]
 8043ff0:	681b      	ldr	r3, [r3, #0]
 8043ff2:	461a      	mov	r2, r3
 8043ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8043ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8043ff8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8043ffa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8043ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8043ffe:	e841 2300 	strex	r3, r2, [r1]
 8044002:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8044004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8044006:	2b00      	cmp	r3, #0
 8044008:	d1e6      	bne.n	8043fd8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804400a:	68fb      	ldr	r3, [r7, #12]
 804400c:	681b      	ldr	r3, [r3, #0]
 804400e:	3308      	adds	r3, #8
 8044010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8044012:	697b      	ldr	r3, [r7, #20]
 8044014:	e853 3f00 	ldrex	r3, [r3]
 8044018:	613b      	str	r3, [r7, #16]
   return(result);
 804401a:	693b      	ldr	r3, [r7, #16]
 804401c:	f023 0301 	bic.w	r3, r3, #1
 8044020:	66bb      	str	r3, [r7, #104]	; 0x68
 8044022:	68fb      	ldr	r3, [r7, #12]
 8044024:	681b      	ldr	r3, [r3, #0]
 8044026:	3308      	adds	r3, #8
 8044028:	6eba      	ldr	r2, [r7, #104]	; 0x68
 804402a:	623a      	str	r2, [r7, #32]
 804402c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804402e:	69f9      	ldr	r1, [r7, #28]
 8044030:	6a3a      	ldr	r2, [r7, #32]
 8044032:	e841 2300 	strex	r3, r2, [r1]
 8044036:	61bb      	str	r3, [r7, #24]
   return(result);
 8044038:	69bb      	ldr	r3, [r7, #24]
 804403a:	2b00      	cmp	r3, #0
 804403c:	d1e5      	bne.n	804400a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 804403e:	68fb      	ldr	r3, [r7, #12]
 8044040:	2220      	movs	r2, #32
 8044042:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8044044:	68fb      	ldr	r3, [r7, #12]
 8044046:	2220      	movs	r2, #32
 8044048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 804404c:	68fb      	ldr	r3, [r7, #12]
 804404e:	2220      	movs	r2, #32
 8044050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8044054:	68fb      	ldr	r3, [r7, #12]
 8044056:	2200      	movs	r2, #0
 8044058:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 804405c:	2303      	movs	r3, #3
 804405e:	e010      	b.n	8044082 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8044060:	68fb      	ldr	r3, [r7, #12]
 8044062:	681b      	ldr	r3, [r3, #0]
 8044064:	69da      	ldr	r2, [r3, #28]
 8044066:	68bb      	ldr	r3, [r7, #8]
 8044068:	4013      	ands	r3, r2
 804406a:	68ba      	ldr	r2, [r7, #8]
 804406c:	429a      	cmp	r2, r3
 804406e:	bf0c      	ite	eq
 8044070:	2301      	moveq	r3, #1
 8044072:	2300      	movne	r3, #0
 8044074:	b2db      	uxtb	r3, r3
 8044076:	461a      	mov	r2, r3
 8044078:	79fb      	ldrb	r3, [r7, #7]
 804407a:	429a      	cmp	r2, r3
 804407c:	f43f af48 	beq.w	8043f10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8044080:	2300      	movs	r3, #0
}
 8044082:	4618      	mov	r0, r3
 8044084:	3770      	adds	r7, #112	; 0x70
 8044086:	46bd      	mov	sp, r7
 8044088:	bd80      	pop	{r7, pc}
	...

0804408c <__errno>:
 804408c:	4b01      	ldr	r3, [pc, #4]	; (8044094 <__errno+0x8>)
 804408e:	6818      	ldr	r0, [r3, #0]
 8044090:	4770      	bx	lr
 8044092:	bf00      	nop
 8044094:	20000020 	.word	0x20000020

08044098 <__libc_init_array>:
 8044098:	b570      	push	{r4, r5, r6, lr}
 804409a:	4d0d      	ldr	r5, [pc, #52]	; (80440d0 <__libc_init_array+0x38>)
 804409c:	4c0d      	ldr	r4, [pc, #52]	; (80440d4 <__libc_init_array+0x3c>)
 804409e:	1b64      	subs	r4, r4, r5
 80440a0:	10a4      	asrs	r4, r4, #2
 80440a2:	2600      	movs	r6, #0
 80440a4:	42a6      	cmp	r6, r4
 80440a6:	d109      	bne.n	80440bc <__libc_init_array+0x24>
 80440a8:	4d0b      	ldr	r5, [pc, #44]	; (80440d8 <__libc_init_array+0x40>)
 80440aa:	4c0c      	ldr	r4, [pc, #48]	; (80440dc <__libc_init_array+0x44>)
 80440ac:	f000 ffae 	bl	804500c <_init>
 80440b0:	1b64      	subs	r4, r4, r5
 80440b2:	10a4      	asrs	r4, r4, #2
 80440b4:	2600      	movs	r6, #0
 80440b6:	42a6      	cmp	r6, r4
 80440b8:	d105      	bne.n	80440c6 <__libc_init_array+0x2e>
 80440ba:	bd70      	pop	{r4, r5, r6, pc}
 80440bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80440c0:	4798      	blx	r3
 80440c2:	3601      	adds	r6, #1
 80440c4:	e7ee      	b.n	80440a4 <__libc_init_array+0xc>
 80440c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80440ca:	4798      	blx	r3
 80440cc:	3601      	adds	r6, #1
 80440ce:	e7f2      	b.n	80440b6 <__libc_init_array+0x1e>
 80440d0:	080450f4 	.word	0x080450f4
 80440d4:	080450f4 	.word	0x080450f4
 80440d8:	080450f4 	.word	0x080450f4
 80440dc:	080450f8 	.word	0x080450f8

080440e0 <memset>:
 80440e0:	4402      	add	r2, r0
 80440e2:	4603      	mov	r3, r0
 80440e4:	4293      	cmp	r3, r2
 80440e6:	d100      	bne.n	80440ea <memset+0xa>
 80440e8:	4770      	bx	lr
 80440ea:	f803 1b01 	strb.w	r1, [r3], #1
 80440ee:	e7f9      	b.n	80440e4 <memset+0x4>

080440f0 <iprintf>:
 80440f0:	b40f      	push	{r0, r1, r2, r3}
 80440f2:	4b0a      	ldr	r3, [pc, #40]	; (804411c <iprintf+0x2c>)
 80440f4:	b513      	push	{r0, r1, r4, lr}
 80440f6:	681c      	ldr	r4, [r3, #0]
 80440f8:	b124      	cbz	r4, 8044104 <iprintf+0x14>
 80440fa:	69a3      	ldr	r3, [r4, #24]
 80440fc:	b913      	cbnz	r3, 8044104 <iprintf+0x14>
 80440fe:	4620      	mov	r0, r4
 8044100:	f000 f866 	bl	80441d0 <__sinit>
 8044104:	ab05      	add	r3, sp, #20
 8044106:	9a04      	ldr	r2, [sp, #16]
 8044108:	68a1      	ldr	r1, [r4, #8]
 804410a:	9301      	str	r3, [sp, #4]
 804410c:	4620      	mov	r0, r4
 804410e:	f000 f9bd 	bl	804448c <_vfiprintf_r>
 8044112:	b002      	add	sp, #8
 8044114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8044118:	b004      	add	sp, #16
 804411a:	4770      	bx	lr
 804411c:	20000020 	.word	0x20000020

08044120 <std>:
 8044120:	2300      	movs	r3, #0
 8044122:	b510      	push	{r4, lr}
 8044124:	4604      	mov	r4, r0
 8044126:	e9c0 3300 	strd	r3, r3, [r0]
 804412a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804412e:	6083      	str	r3, [r0, #8]
 8044130:	8181      	strh	r1, [r0, #12]
 8044132:	6643      	str	r3, [r0, #100]	; 0x64
 8044134:	81c2      	strh	r2, [r0, #14]
 8044136:	6183      	str	r3, [r0, #24]
 8044138:	4619      	mov	r1, r3
 804413a:	2208      	movs	r2, #8
 804413c:	305c      	adds	r0, #92	; 0x5c
 804413e:	f7ff ffcf 	bl	80440e0 <memset>
 8044142:	4b05      	ldr	r3, [pc, #20]	; (8044158 <std+0x38>)
 8044144:	6263      	str	r3, [r4, #36]	; 0x24
 8044146:	4b05      	ldr	r3, [pc, #20]	; (804415c <std+0x3c>)
 8044148:	62a3      	str	r3, [r4, #40]	; 0x28
 804414a:	4b05      	ldr	r3, [pc, #20]	; (8044160 <std+0x40>)
 804414c:	62e3      	str	r3, [r4, #44]	; 0x2c
 804414e:	4b05      	ldr	r3, [pc, #20]	; (8044164 <std+0x44>)
 8044150:	6224      	str	r4, [r4, #32]
 8044152:	6323      	str	r3, [r4, #48]	; 0x30
 8044154:	bd10      	pop	{r4, pc}
 8044156:	bf00      	nop
 8044158:	08044a35 	.word	0x08044a35
 804415c:	08044a57 	.word	0x08044a57
 8044160:	08044a8f 	.word	0x08044a8f
 8044164:	08044ab3 	.word	0x08044ab3

08044168 <_cleanup_r>:
 8044168:	4901      	ldr	r1, [pc, #4]	; (8044170 <_cleanup_r+0x8>)
 804416a:	f000 b8af 	b.w	80442cc <_fwalk_reent>
 804416e:	bf00      	nop
 8044170:	08044d8d 	.word	0x08044d8d

08044174 <__sfmoreglue>:
 8044174:	b570      	push	{r4, r5, r6, lr}
 8044176:	2268      	movs	r2, #104	; 0x68
 8044178:	1e4d      	subs	r5, r1, #1
 804417a:	4355      	muls	r5, r2
 804417c:	460e      	mov	r6, r1
 804417e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8044182:	f000 f8e5 	bl	8044350 <_malloc_r>
 8044186:	4604      	mov	r4, r0
 8044188:	b140      	cbz	r0, 804419c <__sfmoreglue+0x28>
 804418a:	2100      	movs	r1, #0
 804418c:	e9c0 1600 	strd	r1, r6, [r0]
 8044190:	300c      	adds	r0, #12
 8044192:	60a0      	str	r0, [r4, #8]
 8044194:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8044198:	f7ff ffa2 	bl	80440e0 <memset>
 804419c:	4620      	mov	r0, r4
 804419e:	bd70      	pop	{r4, r5, r6, pc}

080441a0 <__sfp_lock_acquire>:
 80441a0:	4801      	ldr	r0, [pc, #4]	; (80441a8 <__sfp_lock_acquire+0x8>)
 80441a2:	f000 b8b3 	b.w	804430c <__retarget_lock_acquire_recursive>
 80441a6:	bf00      	nop
 80441a8:	200001ad 	.word	0x200001ad

080441ac <__sfp_lock_release>:
 80441ac:	4801      	ldr	r0, [pc, #4]	; (80441b4 <__sfp_lock_release+0x8>)
 80441ae:	f000 b8ae 	b.w	804430e <__retarget_lock_release_recursive>
 80441b2:	bf00      	nop
 80441b4:	200001ad 	.word	0x200001ad

080441b8 <__sinit_lock_acquire>:
 80441b8:	4801      	ldr	r0, [pc, #4]	; (80441c0 <__sinit_lock_acquire+0x8>)
 80441ba:	f000 b8a7 	b.w	804430c <__retarget_lock_acquire_recursive>
 80441be:	bf00      	nop
 80441c0:	200001ae 	.word	0x200001ae

080441c4 <__sinit_lock_release>:
 80441c4:	4801      	ldr	r0, [pc, #4]	; (80441cc <__sinit_lock_release+0x8>)
 80441c6:	f000 b8a2 	b.w	804430e <__retarget_lock_release_recursive>
 80441ca:	bf00      	nop
 80441cc:	200001ae 	.word	0x200001ae

080441d0 <__sinit>:
 80441d0:	b510      	push	{r4, lr}
 80441d2:	4604      	mov	r4, r0
 80441d4:	f7ff fff0 	bl	80441b8 <__sinit_lock_acquire>
 80441d8:	69a3      	ldr	r3, [r4, #24]
 80441da:	b11b      	cbz	r3, 80441e4 <__sinit+0x14>
 80441dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80441e0:	f7ff bff0 	b.w	80441c4 <__sinit_lock_release>
 80441e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80441e8:	6523      	str	r3, [r4, #80]	; 0x50
 80441ea:	4b13      	ldr	r3, [pc, #76]	; (8044238 <__sinit+0x68>)
 80441ec:	4a13      	ldr	r2, [pc, #76]	; (804423c <__sinit+0x6c>)
 80441ee:	681b      	ldr	r3, [r3, #0]
 80441f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80441f2:	42a3      	cmp	r3, r4
 80441f4:	bf04      	itt	eq
 80441f6:	2301      	moveq	r3, #1
 80441f8:	61a3      	streq	r3, [r4, #24]
 80441fa:	4620      	mov	r0, r4
 80441fc:	f000 f820 	bl	8044240 <__sfp>
 8044200:	6060      	str	r0, [r4, #4]
 8044202:	4620      	mov	r0, r4
 8044204:	f000 f81c 	bl	8044240 <__sfp>
 8044208:	60a0      	str	r0, [r4, #8]
 804420a:	4620      	mov	r0, r4
 804420c:	f000 f818 	bl	8044240 <__sfp>
 8044210:	2200      	movs	r2, #0
 8044212:	60e0      	str	r0, [r4, #12]
 8044214:	2104      	movs	r1, #4
 8044216:	6860      	ldr	r0, [r4, #4]
 8044218:	f7ff ff82 	bl	8044120 <std>
 804421c:	68a0      	ldr	r0, [r4, #8]
 804421e:	2201      	movs	r2, #1
 8044220:	2109      	movs	r1, #9
 8044222:	f7ff ff7d 	bl	8044120 <std>
 8044226:	68e0      	ldr	r0, [r4, #12]
 8044228:	2202      	movs	r2, #2
 804422a:	2112      	movs	r1, #18
 804422c:	f7ff ff78 	bl	8044120 <std>
 8044230:	2301      	movs	r3, #1
 8044232:	61a3      	str	r3, [r4, #24]
 8044234:	e7d2      	b.n	80441dc <__sinit+0xc>
 8044236:	bf00      	nop
 8044238:	08045054 	.word	0x08045054
 804423c:	08044169 	.word	0x08044169

08044240 <__sfp>:
 8044240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8044242:	4607      	mov	r7, r0
 8044244:	f7ff ffac 	bl	80441a0 <__sfp_lock_acquire>
 8044248:	4b1e      	ldr	r3, [pc, #120]	; (80442c4 <__sfp+0x84>)
 804424a:	681e      	ldr	r6, [r3, #0]
 804424c:	69b3      	ldr	r3, [r6, #24]
 804424e:	b913      	cbnz	r3, 8044256 <__sfp+0x16>
 8044250:	4630      	mov	r0, r6
 8044252:	f7ff ffbd 	bl	80441d0 <__sinit>
 8044256:	3648      	adds	r6, #72	; 0x48
 8044258:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 804425c:	3b01      	subs	r3, #1
 804425e:	d503      	bpl.n	8044268 <__sfp+0x28>
 8044260:	6833      	ldr	r3, [r6, #0]
 8044262:	b30b      	cbz	r3, 80442a8 <__sfp+0x68>
 8044264:	6836      	ldr	r6, [r6, #0]
 8044266:	e7f7      	b.n	8044258 <__sfp+0x18>
 8044268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 804426c:	b9d5      	cbnz	r5, 80442a4 <__sfp+0x64>
 804426e:	4b16      	ldr	r3, [pc, #88]	; (80442c8 <__sfp+0x88>)
 8044270:	60e3      	str	r3, [r4, #12]
 8044272:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8044276:	6665      	str	r5, [r4, #100]	; 0x64
 8044278:	f000 f847 	bl	804430a <__retarget_lock_init_recursive>
 804427c:	f7ff ff96 	bl	80441ac <__sfp_lock_release>
 8044280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8044284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8044288:	6025      	str	r5, [r4, #0]
 804428a:	61a5      	str	r5, [r4, #24]
 804428c:	2208      	movs	r2, #8
 804428e:	4629      	mov	r1, r5
 8044290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8044294:	f7ff ff24 	bl	80440e0 <memset>
 8044298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 804429c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80442a0:	4620      	mov	r0, r4
 80442a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80442a4:	3468      	adds	r4, #104	; 0x68
 80442a6:	e7d9      	b.n	804425c <__sfp+0x1c>
 80442a8:	2104      	movs	r1, #4
 80442aa:	4638      	mov	r0, r7
 80442ac:	f7ff ff62 	bl	8044174 <__sfmoreglue>
 80442b0:	4604      	mov	r4, r0
 80442b2:	6030      	str	r0, [r6, #0]
 80442b4:	2800      	cmp	r0, #0
 80442b6:	d1d5      	bne.n	8044264 <__sfp+0x24>
 80442b8:	f7ff ff78 	bl	80441ac <__sfp_lock_release>
 80442bc:	230c      	movs	r3, #12
 80442be:	603b      	str	r3, [r7, #0]
 80442c0:	e7ee      	b.n	80442a0 <__sfp+0x60>
 80442c2:	bf00      	nop
 80442c4:	08045054 	.word	0x08045054
 80442c8:	ffff0001 	.word	0xffff0001

080442cc <_fwalk_reent>:
 80442cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80442d0:	4606      	mov	r6, r0
 80442d2:	4688      	mov	r8, r1
 80442d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80442d8:	2700      	movs	r7, #0
 80442da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80442de:	f1b9 0901 	subs.w	r9, r9, #1
 80442e2:	d505      	bpl.n	80442f0 <_fwalk_reent+0x24>
 80442e4:	6824      	ldr	r4, [r4, #0]
 80442e6:	2c00      	cmp	r4, #0
 80442e8:	d1f7      	bne.n	80442da <_fwalk_reent+0xe>
 80442ea:	4638      	mov	r0, r7
 80442ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80442f0:	89ab      	ldrh	r3, [r5, #12]
 80442f2:	2b01      	cmp	r3, #1
 80442f4:	d907      	bls.n	8044306 <_fwalk_reent+0x3a>
 80442f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80442fa:	3301      	adds	r3, #1
 80442fc:	d003      	beq.n	8044306 <_fwalk_reent+0x3a>
 80442fe:	4629      	mov	r1, r5
 8044300:	4630      	mov	r0, r6
 8044302:	47c0      	blx	r8
 8044304:	4307      	orrs	r7, r0
 8044306:	3568      	adds	r5, #104	; 0x68
 8044308:	e7e9      	b.n	80442de <_fwalk_reent+0x12>

0804430a <__retarget_lock_init_recursive>:
 804430a:	4770      	bx	lr

0804430c <__retarget_lock_acquire_recursive>:
 804430c:	4770      	bx	lr

0804430e <__retarget_lock_release_recursive>:
 804430e:	4770      	bx	lr

08044310 <sbrk_aligned>:
 8044310:	b570      	push	{r4, r5, r6, lr}
 8044312:	4e0e      	ldr	r6, [pc, #56]	; (804434c <sbrk_aligned+0x3c>)
 8044314:	460c      	mov	r4, r1
 8044316:	6831      	ldr	r1, [r6, #0]
 8044318:	4605      	mov	r5, r0
 804431a:	b911      	cbnz	r1, 8044322 <sbrk_aligned+0x12>
 804431c:	f000 fb7a 	bl	8044a14 <_sbrk_r>
 8044320:	6030      	str	r0, [r6, #0]
 8044322:	4621      	mov	r1, r4
 8044324:	4628      	mov	r0, r5
 8044326:	f000 fb75 	bl	8044a14 <_sbrk_r>
 804432a:	1c43      	adds	r3, r0, #1
 804432c:	d00a      	beq.n	8044344 <sbrk_aligned+0x34>
 804432e:	1cc4      	adds	r4, r0, #3
 8044330:	f024 0403 	bic.w	r4, r4, #3
 8044334:	42a0      	cmp	r0, r4
 8044336:	d007      	beq.n	8044348 <sbrk_aligned+0x38>
 8044338:	1a21      	subs	r1, r4, r0
 804433a:	4628      	mov	r0, r5
 804433c:	f000 fb6a 	bl	8044a14 <_sbrk_r>
 8044340:	3001      	adds	r0, #1
 8044342:	d101      	bne.n	8044348 <sbrk_aligned+0x38>
 8044344:	f04f 34ff 	mov.w	r4, #4294967295
 8044348:	4620      	mov	r0, r4
 804434a:	bd70      	pop	{r4, r5, r6, pc}
 804434c:	200001b4 	.word	0x200001b4

08044350 <_malloc_r>:
 8044350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8044354:	1ccd      	adds	r5, r1, #3
 8044356:	f025 0503 	bic.w	r5, r5, #3
 804435a:	3508      	adds	r5, #8
 804435c:	2d0c      	cmp	r5, #12
 804435e:	bf38      	it	cc
 8044360:	250c      	movcc	r5, #12
 8044362:	2d00      	cmp	r5, #0
 8044364:	4607      	mov	r7, r0
 8044366:	db01      	blt.n	804436c <_malloc_r+0x1c>
 8044368:	42a9      	cmp	r1, r5
 804436a:	d905      	bls.n	8044378 <_malloc_r+0x28>
 804436c:	230c      	movs	r3, #12
 804436e:	603b      	str	r3, [r7, #0]
 8044370:	2600      	movs	r6, #0
 8044372:	4630      	mov	r0, r6
 8044374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8044378:	4e2e      	ldr	r6, [pc, #184]	; (8044434 <_malloc_r+0xe4>)
 804437a:	f000 fdbb 	bl	8044ef4 <__malloc_lock>
 804437e:	6833      	ldr	r3, [r6, #0]
 8044380:	461c      	mov	r4, r3
 8044382:	bb34      	cbnz	r4, 80443d2 <_malloc_r+0x82>
 8044384:	4629      	mov	r1, r5
 8044386:	4638      	mov	r0, r7
 8044388:	f7ff ffc2 	bl	8044310 <sbrk_aligned>
 804438c:	1c43      	adds	r3, r0, #1
 804438e:	4604      	mov	r4, r0
 8044390:	d14d      	bne.n	804442e <_malloc_r+0xde>
 8044392:	6834      	ldr	r4, [r6, #0]
 8044394:	4626      	mov	r6, r4
 8044396:	2e00      	cmp	r6, #0
 8044398:	d140      	bne.n	804441c <_malloc_r+0xcc>
 804439a:	6823      	ldr	r3, [r4, #0]
 804439c:	4631      	mov	r1, r6
 804439e:	4638      	mov	r0, r7
 80443a0:	eb04 0803 	add.w	r8, r4, r3
 80443a4:	f000 fb36 	bl	8044a14 <_sbrk_r>
 80443a8:	4580      	cmp	r8, r0
 80443aa:	d13a      	bne.n	8044422 <_malloc_r+0xd2>
 80443ac:	6821      	ldr	r1, [r4, #0]
 80443ae:	3503      	adds	r5, #3
 80443b0:	1a6d      	subs	r5, r5, r1
 80443b2:	f025 0503 	bic.w	r5, r5, #3
 80443b6:	3508      	adds	r5, #8
 80443b8:	2d0c      	cmp	r5, #12
 80443ba:	bf38      	it	cc
 80443bc:	250c      	movcc	r5, #12
 80443be:	4629      	mov	r1, r5
 80443c0:	4638      	mov	r0, r7
 80443c2:	f7ff ffa5 	bl	8044310 <sbrk_aligned>
 80443c6:	3001      	adds	r0, #1
 80443c8:	d02b      	beq.n	8044422 <_malloc_r+0xd2>
 80443ca:	6823      	ldr	r3, [r4, #0]
 80443cc:	442b      	add	r3, r5
 80443ce:	6023      	str	r3, [r4, #0]
 80443d0:	e00e      	b.n	80443f0 <_malloc_r+0xa0>
 80443d2:	6822      	ldr	r2, [r4, #0]
 80443d4:	1b52      	subs	r2, r2, r5
 80443d6:	d41e      	bmi.n	8044416 <_malloc_r+0xc6>
 80443d8:	2a0b      	cmp	r2, #11
 80443da:	d916      	bls.n	804440a <_malloc_r+0xba>
 80443dc:	1961      	adds	r1, r4, r5
 80443de:	42a3      	cmp	r3, r4
 80443e0:	6025      	str	r5, [r4, #0]
 80443e2:	bf18      	it	ne
 80443e4:	6059      	strne	r1, [r3, #4]
 80443e6:	6863      	ldr	r3, [r4, #4]
 80443e8:	bf08      	it	eq
 80443ea:	6031      	streq	r1, [r6, #0]
 80443ec:	5162      	str	r2, [r4, r5]
 80443ee:	604b      	str	r3, [r1, #4]
 80443f0:	4638      	mov	r0, r7
 80443f2:	f104 060b 	add.w	r6, r4, #11
 80443f6:	f000 fd83 	bl	8044f00 <__malloc_unlock>
 80443fa:	f026 0607 	bic.w	r6, r6, #7
 80443fe:	1d23      	adds	r3, r4, #4
 8044400:	1af2      	subs	r2, r6, r3
 8044402:	d0b6      	beq.n	8044372 <_malloc_r+0x22>
 8044404:	1b9b      	subs	r3, r3, r6
 8044406:	50a3      	str	r3, [r4, r2]
 8044408:	e7b3      	b.n	8044372 <_malloc_r+0x22>
 804440a:	6862      	ldr	r2, [r4, #4]
 804440c:	42a3      	cmp	r3, r4
 804440e:	bf0c      	ite	eq
 8044410:	6032      	streq	r2, [r6, #0]
 8044412:	605a      	strne	r2, [r3, #4]
 8044414:	e7ec      	b.n	80443f0 <_malloc_r+0xa0>
 8044416:	4623      	mov	r3, r4
 8044418:	6864      	ldr	r4, [r4, #4]
 804441a:	e7b2      	b.n	8044382 <_malloc_r+0x32>
 804441c:	4634      	mov	r4, r6
 804441e:	6876      	ldr	r6, [r6, #4]
 8044420:	e7b9      	b.n	8044396 <_malloc_r+0x46>
 8044422:	230c      	movs	r3, #12
 8044424:	603b      	str	r3, [r7, #0]
 8044426:	4638      	mov	r0, r7
 8044428:	f000 fd6a 	bl	8044f00 <__malloc_unlock>
 804442c:	e7a1      	b.n	8044372 <_malloc_r+0x22>
 804442e:	6025      	str	r5, [r4, #0]
 8044430:	e7de      	b.n	80443f0 <_malloc_r+0xa0>
 8044432:	bf00      	nop
 8044434:	200001b0 	.word	0x200001b0

08044438 <__sfputc_r>:
 8044438:	6893      	ldr	r3, [r2, #8]
 804443a:	3b01      	subs	r3, #1
 804443c:	2b00      	cmp	r3, #0
 804443e:	b410      	push	{r4}
 8044440:	6093      	str	r3, [r2, #8]
 8044442:	da08      	bge.n	8044456 <__sfputc_r+0x1e>
 8044444:	6994      	ldr	r4, [r2, #24]
 8044446:	42a3      	cmp	r3, r4
 8044448:	db01      	blt.n	804444e <__sfputc_r+0x16>
 804444a:	290a      	cmp	r1, #10
 804444c:	d103      	bne.n	8044456 <__sfputc_r+0x1e>
 804444e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8044452:	f000 bb33 	b.w	8044abc <__swbuf_r>
 8044456:	6813      	ldr	r3, [r2, #0]
 8044458:	1c58      	adds	r0, r3, #1
 804445a:	6010      	str	r0, [r2, #0]
 804445c:	7019      	strb	r1, [r3, #0]
 804445e:	4608      	mov	r0, r1
 8044460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8044464:	4770      	bx	lr

08044466 <__sfputs_r>:
 8044466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8044468:	4606      	mov	r6, r0
 804446a:	460f      	mov	r7, r1
 804446c:	4614      	mov	r4, r2
 804446e:	18d5      	adds	r5, r2, r3
 8044470:	42ac      	cmp	r4, r5
 8044472:	d101      	bne.n	8044478 <__sfputs_r+0x12>
 8044474:	2000      	movs	r0, #0
 8044476:	e007      	b.n	8044488 <__sfputs_r+0x22>
 8044478:	f814 1b01 	ldrb.w	r1, [r4], #1
 804447c:	463a      	mov	r2, r7
 804447e:	4630      	mov	r0, r6
 8044480:	f7ff ffda 	bl	8044438 <__sfputc_r>
 8044484:	1c43      	adds	r3, r0, #1
 8044486:	d1f3      	bne.n	8044470 <__sfputs_r+0xa>
 8044488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804448c <_vfiprintf_r>:
 804448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8044490:	460d      	mov	r5, r1
 8044492:	b09d      	sub	sp, #116	; 0x74
 8044494:	4614      	mov	r4, r2
 8044496:	4698      	mov	r8, r3
 8044498:	4606      	mov	r6, r0
 804449a:	b118      	cbz	r0, 80444a4 <_vfiprintf_r+0x18>
 804449c:	6983      	ldr	r3, [r0, #24]
 804449e:	b90b      	cbnz	r3, 80444a4 <_vfiprintf_r+0x18>
 80444a0:	f7ff fe96 	bl	80441d0 <__sinit>
 80444a4:	4b89      	ldr	r3, [pc, #548]	; (80446cc <_vfiprintf_r+0x240>)
 80444a6:	429d      	cmp	r5, r3
 80444a8:	d11b      	bne.n	80444e2 <_vfiprintf_r+0x56>
 80444aa:	6875      	ldr	r5, [r6, #4]
 80444ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80444ae:	07d9      	lsls	r1, r3, #31
 80444b0:	d405      	bmi.n	80444be <_vfiprintf_r+0x32>
 80444b2:	89ab      	ldrh	r3, [r5, #12]
 80444b4:	059a      	lsls	r2, r3, #22
 80444b6:	d402      	bmi.n	80444be <_vfiprintf_r+0x32>
 80444b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80444ba:	f7ff ff27 	bl	804430c <__retarget_lock_acquire_recursive>
 80444be:	89ab      	ldrh	r3, [r5, #12]
 80444c0:	071b      	lsls	r3, r3, #28
 80444c2:	d501      	bpl.n	80444c8 <_vfiprintf_r+0x3c>
 80444c4:	692b      	ldr	r3, [r5, #16]
 80444c6:	b9eb      	cbnz	r3, 8044504 <_vfiprintf_r+0x78>
 80444c8:	4629      	mov	r1, r5
 80444ca:	4630      	mov	r0, r6
 80444cc:	f000 fb5a 	bl	8044b84 <__swsetup_r>
 80444d0:	b1c0      	cbz	r0, 8044504 <_vfiprintf_r+0x78>
 80444d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80444d4:	07dc      	lsls	r4, r3, #31
 80444d6:	d50e      	bpl.n	80444f6 <_vfiprintf_r+0x6a>
 80444d8:	f04f 30ff 	mov.w	r0, #4294967295
 80444dc:	b01d      	add	sp, #116	; 0x74
 80444de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80444e2:	4b7b      	ldr	r3, [pc, #492]	; (80446d0 <_vfiprintf_r+0x244>)
 80444e4:	429d      	cmp	r5, r3
 80444e6:	d101      	bne.n	80444ec <_vfiprintf_r+0x60>
 80444e8:	68b5      	ldr	r5, [r6, #8]
 80444ea:	e7df      	b.n	80444ac <_vfiprintf_r+0x20>
 80444ec:	4b79      	ldr	r3, [pc, #484]	; (80446d4 <_vfiprintf_r+0x248>)
 80444ee:	429d      	cmp	r5, r3
 80444f0:	bf08      	it	eq
 80444f2:	68f5      	ldreq	r5, [r6, #12]
 80444f4:	e7da      	b.n	80444ac <_vfiprintf_r+0x20>
 80444f6:	89ab      	ldrh	r3, [r5, #12]
 80444f8:	0598      	lsls	r0, r3, #22
 80444fa:	d4ed      	bmi.n	80444d8 <_vfiprintf_r+0x4c>
 80444fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80444fe:	f7ff ff06 	bl	804430e <__retarget_lock_release_recursive>
 8044502:	e7e9      	b.n	80444d8 <_vfiprintf_r+0x4c>
 8044504:	2300      	movs	r3, #0
 8044506:	9309      	str	r3, [sp, #36]	; 0x24
 8044508:	2320      	movs	r3, #32
 804450a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804450e:	f8cd 800c 	str.w	r8, [sp, #12]
 8044512:	2330      	movs	r3, #48	; 0x30
 8044514:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80446d8 <_vfiprintf_r+0x24c>
 8044518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804451c:	f04f 0901 	mov.w	r9, #1
 8044520:	4623      	mov	r3, r4
 8044522:	469a      	mov	sl, r3
 8044524:	f813 2b01 	ldrb.w	r2, [r3], #1
 8044528:	b10a      	cbz	r2, 804452e <_vfiprintf_r+0xa2>
 804452a:	2a25      	cmp	r2, #37	; 0x25
 804452c:	d1f9      	bne.n	8044522 <_vfiprintf_r+0x96>
 804452e:	ebba 0b04 	subs.w	fp, sl, r4
 8044532:	d00b      	beq.n	804454c <_vfiprintf_r+0xc0>
 8044534:	465b      	mov	r3, fp
 8044536:	4622      	mov	r2, r4
 8044538:	4629      	mov	r1, r5
 804453a:	4630      	mov	r0, r6
 804453c:	f7ff ff93 	bl	8044466 <__sfputs_r>
 8044540:	3001      	adds	r0, #1
 8044542:	f000 80aa 	beq.w	804469a <_vfiprintf_r+0x20e>
 8044546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8044548:	445a      	add	r2, fp
 804454a:	9209      	str	r2, [sp, #36]	; 0x24
 804454c:	f89a 3000 	ldrb.w	r3, [sl]
 8044550:	2b00      	cmp	r3, #0
 8044552:	f000 80a2 	beq.w	804469a <_vfiprintf_r+0x20e>
 8044556:	2300      	movs	r3, #0
 8044558:	f04f 32ff 	mov.w	r2, #4294967295
 804455c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8044560:	f10a 0a01 	add.w	sl, sl, #1
 8044564:	9304      	str	r3, [sp, #16]
 8044566:	9307      	str	r3, [sp, #28]
 8044568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804456c:	931a      	str	r3, [sp, #104]	; 0x68
 804456e:	4654      	mov	r4, sl
 8044570:	2205      	movs	r2, #5
 8044572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8044576:	4858      	ldr	r0, [pc, #352]	; (80446d8 <_vfiprintf_r+0x24c>)
 8044578:	f7fb fe62 	bl	8040240 <memchr>
 804457c:	9a04      	ldr	r2, [sp, #16]
 804457e:	b9d8      	cbnz	r0, 80445b8 <_vfiprintf_r+0x12c>
 8044580:	06d1      	lsls	r1, r2, #27
 8044582:	bf44      	itt	mi
 8044584:	2320      	movmi	r3, #32
 8044586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804458a:	0713      	lsls	r3, r2, #28
 804458c:	bf44      	itt	mi
 804458e:	232b      	movmi	r3, #43	; 0x2b
 8044590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8044594:	f89a 3000 	ldrb.w	r3, [sl]
 8044598:	2b2a      	cmp	r3, #42	; 0x2a
 804459a:	d015      	beq.n	80445c8 <_vfiprintf_r+0x13c>
 804459c:	9a07      	ldr	r2, [sp, #28]
 804459e:	4654      	mov	r4, sl
 80445a0:	2000      	movs	r0, #0
 80445a2:	f04f 0c0a 	mov.w	ip, #10
 80445a6:	4621      	mov	r1, r4
 80445a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80445ac:	3b30      	subs	r3, #48	; 0x30
 80445ae:	2b09      	cmp	r3, #9
 80445b0:	d94e      	bls.n	8044650 <_vfiprintf_r+0x1c4>
 80445b2:	b1b0      	cbz	r0, 80445e2 <_vfiprintf_r+0x156>
 80445b4:	9207      	str	r2, [sp, #28]
 80445b6:	e014      	b.n	80445e2 <_vfiprintf_r+0x156>
 80445b8:	eba0 0308 	sub.w	r3, r0, r8
 80445bc:	fa09 f303 	lsl.w	r3, r9, r3
 80445c0:	4313      	orrs	r3, r2
 80445c2:	9304      	str	r3, [sp, #16]
 80445c4:	46a2      	mov	sl, r4
 80445c6:	e7d2      	b.n	804456e <_vfiprintf_r+0xe2>
 80445c8:	9b03      	ldr	r3, [sp, #12]
 80445ca:	1d19      	adds	r1, r3, #4
 80445cc:	681b      	ldr	r3, [r3, #0]
 80445ce:	9103      	str	r1, [sp, #12]
 80445d0:	2b00      	cmp	r3, #0
 80445d2:	bfbb      	ittet	lt
 80445d4:	425b      	neglt	r3, r3
 80445d6:	f042 0202 	orrlt.w	r2, r2, #2
 80445da:	9307      	strge	r3, [sp, #28]
 80445dc:	9307      	strlt	r3, [sp, #28]
 80445de:	bfb8      	it	lt
 80445e0:	9204      	strlt	r2, [sp, #16]
 80445e2:	7823      	ldrb	r3, [r4, #0]
 80445e4:	2b2e      	cmp	r3, #46	; 0x2e
 80445e6:	d10c      	bne.n	8044602 <_vfiprintf_r+0x176>
 80445e8:	7863      	ldrb	r3, [r4, #1]
 80445ea:	2b2a      	cmp	r3, #42	; 0x2a
 80445ec:	d135      	bne.n	804465a <_vfiprintf_r+0x1ce>
 80445ee:	9b03      	ldr	r3, [sp, #12]
 80445f0:	1d1a      	adds	r2, r3, #4
 80445f2:	681b      	ldr	r3, [r3, #0]
 80445f4:	9203      	str	r2, [sp, #12]
 80445f6:	2b00      	cmp	r3, #0
 80445f8:	bfb8      	it	lt
 80445fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80445fe:	3402      	adds	r4, #2
 8044600:	9305      	str	r3, [sp, #20]
 8044602:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80446e8 <_vfiprintf_r+0x25c>
 8044606:	7821      	ldrb	r1, [r4, #0]
 8044608:	2203      	movs	r2, #3
 804460a:	4650      	mov	r0, sl
 804460c:	f7fb fe18 	bl	8040240 <memchr>
 8044610:	b140      	cbz	r0, 8044624 <_vfiprintf_r+0x198>
 8044612:	2340      	movs	r3, #64	; 0x40
 8044614:	eba0 000a 	sub.w	r0, r0, sl
 8044618:	fa03 f000 	lsl.w	r0, r3, r0
 804461c:	9b04      	ldr	r3, [sp, #16]
 804461e:	4303      	orrs	r3, r0
 8044620:	3401      	adds	r4, #1
 8044622:	9304      	str	r3, [sp, #16]
 8044624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8044628:	482c      	ldr	r0, [pc, #176]	; (80446dc <_vfiprintf_r+0x250>)
 804462a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804462e:	2206      	movs	r2, #6
 8044630:	f7fb fe06 	bl	8040240 <memchr>
 8044634:	2800      	cmp	r0, #0
 8044636:	d03f      	beq.n	80446b8 <_vfiprintf_r+0x22c>
 8044638:	4b29      	ldr	r3, [pc, #164]	; (80446e0 <_vfiprintf_r+0x254>)
 804463a:	bb1b      	cbnz	r3, 8044684 <_vfiprintf_r+0x1f8>
 804463c:	9b03      	ldr	r3, [sp, #12]
 804463e:	3307      	adds	r3, #7
 8044640:	f023 0307 	bic.w	r3, r3, #7
 8044644:	3308      	adds	r3, #8
 8044646:	9303      	str	r3, [sp, #12]
 8044648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804464a:	443b      	add	r3, r7
 804464c:	9309      	str	r3, [sp, #36]	; 0x24
 804464e:	e767      	b.n	8044520 <_vfiprintf_r+0x94>
 8044650:	fb0c 3202 	mla	r2, ip, r2, r3
 8044654:	460c      	mov	r4, r1
 8044656:	2001      	movs	r0, #1
 8044658:	e7a5      	b.n	80445a6 <_vfiprintf_r+0x11a>
 804465a:	2300      	movs	r3, #0
 804465c:	3401      	adds	r4, #1
 804465e:	9305      	str	r3, [sp, #20]
 8044660:	4619      	mov	r1, r3
 8044662:	f04f 0c0a 	mov.w	ip, #10
 8044666:	4620      	mov	r0, r4
 8044668:	f810 2b01 	ldrb.w	r2, [r0], #1
 804466c:	3a30      	subs	r2, #48	; 0x30
 804466e:	2a09      	cmp	r2, #9
 8044670:	d903      	bls.n	804467a <_vfiprintf_r+0x1ee>
 8044672:	2b00      	cmp	r3, #0
 8044674:	d0c5      	beq.n	8044602 <_vfiprintf_r+0x176>
 8044676:	9105      	str	r1, [sp, #20]
 8044678:	e7c3      	b.n	8044602 <_vfiprintf_r+0x176>
 804467a:	fb0c 2101 	mla	r1, ip, r1, r2
 804467e:	4604      	mov	r4, r0
 8044680:	2301      	movs	r3, #1
 8044682:	e7f0      	b.n	8044666 <_vfiprintf_r+0x1da>
 8044684:	ab03      	add	r3, sp, #12
 8044686:	9300      	str	r3, [sp, #0]
 8044688:	462a      	mov	r2, r5
 804468a:	4b16      	ldr	r3, [pc, #88]	; (80446e4 <_vfiprintf_r+0x258>)
 804468c:	a904      	add	r1, sp, #16
 804468e:	4630      	mov	r0, r6
 8044690:	f3af 8000 	nop.w
 8044694:	4607      	mov	r7, r0
 8044696:	1c78      	adds	r0, r7, #1
 8044698:	d1d6      	bne.n	8044648 <_vfiprintf_r+0x1bc>
 804469a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804469c:	07d9      	lsls	r1, r3, #31
 804469e:	d405      	bmi.n	80446ac <_vfiprintf_r+0x220>
 80446a0:	89ab      	ldrh	r3, [r5, #12]
 80446a2:	059a      	lsls	r2, r3, #22
 80446a4:	d402      	bmi.n	80446ac <_vfiprintf_r+0x220>
 80446a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80446a8:	f7ff fe31 	bl	804430e <__retarget_lock_release_recursive>
 80446ac:	89ab      	ldrh	r3, [r5, #12]
 80446ae:	065b      	lsls	r3, r3, #25
 80446b0:	f53f af12 	bmi.w	80444d8 <_vfiprintf_r+0x4c>
 80446b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80446b6:	e711      	b.n	80444dc <_vfiprintf_r+0x50>
 80446b8:	ab03      	add	r3, sp, #12
 80446ba:	9300      	str	r3, [sp, #0]
 80446bc:	462a      	mov	r2, r5
 80446be:	4b09      	ldr	r3, [pc, #36]	; (80446e4 <_vfiprintf_r+0x258>)
 80446c0:	a904      	add	r1, sp, #16
 80446c2:	4630      	mov	r0, r6
 80446c4:	f000 f880 	bl	80447c8 <_printf_i>
 80446c8:	e7e4      	b.n	8044694 <_vfiprintf_r+0x208>
 80446ca:	bf00      	nop
 80446cc:	08045078 	.word	0x08045078
 80446d0:	08045098 	.word	0x08045098
 80446d4:	08045058 	.word	0x08045058
 80446d8:	080450b8 	.word	0x080450b8
 80446dc:	080450c2 	.word	0x080450c2
 80446e0:	00000000 	.word	0x00000000
 80446e4:	08044467 	.word	0x08044467
 80446e8:	080450be 	.word	0x080450be

080446ec <_printf_common>:
 80446ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80446f0:	4616      	mov	r6, r2
 80446f2:	4699      	mov	r9, r3
 80446f4:	688a      	ldr	r2, [r1, #8]
 80446f6:	690b      	ldr	r3, [r1, #16]
 80446f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80446fc:	4293      	cmp	r3, r2
 80446fe:	bfb8      	it	lt
 8044700:	4613      	movlt	r3, r2
 8044702:	6033      	str	r3, [r6, #0]
 8044704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8044708:	4607      	mov	r7, r0
 804470a:	460c      	mov	r4, r1
 804470c:	b10a      	cbz	r2, 8044712 <_printf_common+0x26>
 804470e:	3301      	adds	r3, #1
 8044710:	6033      	str	r3, [r6, #0]
 8044712:	6823      	ldr	r3, [r4, #0]
 8044714:	0699      	lsls	r1, r3, #26
 8044716:	bf42      	ittt	mi
 8044718:	6833      	ldrmi	r3, [r6, #0]
 804471a:	3302      	addmi	r3, #2
 804471c:	6033      	strmi	r3, [r6, #0]
 804471e:	6825      	ldr	r5, [r4, #0]
 8044720:	f015 0506 	ands.w	r5, r5, #6
 8044724:	d106      	bne.n	8044734 <_printf_common+0x48>
 8044726:	f104 0a19 	add.w	sl, r4, #25
 804472a:	68e3      	ldr	r3, [r4, #12]
 804472c:	6832      	ldr	r2, [r6, #0]
 804472e:	1a9b      	subs	r3, r3, r2
 8044730:	42ab      	cmp	r3, r5
 8044732:	dc26      	bgt.n	8044782 <_printf_common+0x96>
 8044734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8044738:	1e13      	subs	r3, r2, #0
 804473a:	6822      	ldr	r2, [r4, #0]
 804473c:	bf18      	it	ne
 804473e:	2301      	movne	r3, #1
 8044740:	0692      	lsls	r2, r2, #26
 8044742:	d42b      	bmi.n	804479c <_printf_common+0xb0>
 8044744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8044748:	4649      	mov	r1, r9
 804474a:	4638      	mov	r0, r7
 804474c:	47c0      	blx	r8
 804474e:	3001      	adds	r0, #1
 8044750:	d01e      	beq.n	8044790 <_printf_common+0xa4>
 8044752:	6823      	ldr	r3, [r4, #0]
 8044754:	68e5      	ldr	r5, [r4, #12]
 8044756:	6832      	ldr	r2, [r6, #0]
 8044758:	f003 0306 	and.w	r3, r3, #6
 804475c:	2b04      	cmp	r3, #4
 804475e:	bf08      	it	eq
 8044760:	1aad      	subeq	r5, r5, r2
 8044762:	68a3      	ldr	r3, [r4, #8]
 8044764:	6922      	ldr	r2, [r4, #16]
 8044766:	bf0c      	ite	eq
 8044768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804476c:	2500      	movne	r5, #0
 804476e:	4293      	cmp	r3, r2
 8044770:	bfc4      	itt	gt
 8044772:	1a9b      	subgt	r3, r3, r2
 8044774:	18ed      	addgt	r5, r5, r3
 8044776:	2600      	movs	r6, #0
 8044778:	341a      	adds	r4, #26
 804477a:	42b5      	cmp	r5, r6
 804477c:	d11a      	bne.n	80447b4 <_printf_common+0xc8>
 804477e:	2000      	movs	r0, #0
 8044780:	e008      	b.n	8044794 <_printf_common+0xa8>
 8044782:	2301      	movs	r3, #1
 8044784:	4652      	mov	r2, sl
 8044786:	4649      	mov	r1, r9
 8044788:	4638      	mov	r0, r7
 804478a:	47c0      	blx	r8
 804478c:	3001      	adds	r0, #1
 804478e:	d103      	bne.n	8044798 <_printf_common+0xac>
 8044790:	f04f 30ff 	mov.w	r0, #4294967295
 8044794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8044798:	3501      	adds	r5, #1
 804479a:	e7c6      	b.n	804472a <_printf_common+0x3e>
 804479c:	18e1      	adds	r1, r4, r3
 804479e:	1c5a      	adds	r2, r3, #1
 80447a0:	2030      	movs	r0, #48	; 0x30
 80447a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80447a6:	4422      	add	r2, r4
 80447a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80447ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80447b0:	3302      	adds	r3, #2
 80447b2:	e7c7      	b.n	8044744 <_printf_common+0x58>
 80447b4:	2301      	movs	r3, #1
 80447b6:	4622      	mov	r2, r4
 80447b8:	4649      	mov	r1, r9
 80447ba:	4638      	mov	r0, r7
 80447bc:	47c0      	blx	r8
 80447be:	3001      	adds	r0, #1
 80447c0:	d0e6      	beq.n	8044790 <_printf_common+0xa4>
 80447c2:	3601      	adds	r6, #1
 80447c4:	e7d9      	b.n	804477a <_printf_common+0x8e>
	...

080447c8 <_printf_i>:
 80447c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80447cc:	7e0f      	ldrb	r7, [r1, #24]
 80447ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80447d0:	2f78      	cmp	r7, #120	; 0x78
 80447d2:	4691      	mov	r9, r2
 80447d4:	4680      	mov	r8, r0
 80447d6:	460c      	mov	r4, r1
 80447d8:	469a      	mov	sl, r3
 80447da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80447de:	d807      	bhi.n	80447f0 <_printf_i+0x28>
 80447e0:	2f62      	cmp	r7, #98	; 0x62
 80447e2:	d80a      	bhi.n	80447fa <_printf_i+0x32>
 80447e4:	2f00      	cmp	r7, #0
 80447e6:	f000 80d8 	beq.w	804499a <_printf_i+0x1d2>
 80447ea:	2f58      	cmp	r7, #88	; 0x58
 80447ec:	f000 80a3 	beq.w	8044936 <_printf_i+0x16e>
 80447f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80447f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80447f8:	e03a      	b.n	8044870 <_printf_i+0xa8>
 80447fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80447fe:	2b15      	cmp	r3, #21
 8044800:	d8f6      	bhi.n	80447f0 <_printf_i+0x28>
 8044802:	a101      	add	r1, pc, #4	; (adr r1, 8044808 <_printf_i+0x40>)
 8044804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8044808:	08044861 	.word	0x08044861
 804480c:	08044875 	.word	0x08044875
 8044810:	080447f1 	.word	0x080447f1
 8044814:	080447f1 	.word	0x080447f1
 8044818:	080447f1 	.word	0x080447f1
 804481c:	080447f1 	.word	0x080447f1
 8044820:	08044875 	.word	0x08044875
 8044824:	080447f1 	.word	0x080447f1
 8044828:	080447f1 	.word	0x080447f1
 804482c:	080447f1 	.word	0x080447f1
 8044830:	080447f1 	.word	0x080447f1
 8044834:	08044981 	.word	0x08044981
 8044838:	080448a5 	.word	0x080448a5
 804483c:	08044963 	.word	0x08044963
 8044840:	080447f1 	.word	0x080447f1
 8044844:	080447f1 	.word	0x080447f1
 8044848:	080449a3 	.word	0x080449a3
 804484c:	080447f1 	.word	0x080447f1
 8044850:	080448a5 	.word	0x080448a5
 8044854:	080447f1 	.word	0x080447f1
 8044858:	080447f1 	.word	0x080447f1
 804485c:	0804496b 	.word	0x0804496b
 8044860:	682b      	ldr	r3, [r5, #0]
 8044862:	1d1a      	adds	r2, r3, #4
 8044864:	681b      	ldr	r3, [r3, #0]
 8044866:	602a      	str	r2, [r5, #0]
 8044868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804486c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8044870:	2301      	movs	r3, #1
 8044872:	e0a3      	b.n	80449bc <_printf_i+0x1f4>
 8044874:	6820      	ldr	r0, [r4, #0]
 8044876:	6829      	ldr	r1, [r5, #0]
 8044878:	0606      	lsls	r6, r0, #24
 804487a:	f101 0304 	add.w	r3, r1, #4
 804487e:	d50a      	bpl.n	8044896 <_printf_i+0xce>
 8044880:	680e      	ldr	r6, [r1, #0]
 8044882:	602b      	str	r3, [r5, #0]
 8044884:	2e00      	cmp	r6, #0
 8044886:	da03      	bge.n	8044890 <_printf_i+0xc8>
 8044888:	232d      	movs	r3, #45	; 0x2d
 804488a:	4276      	negs	r6, r6
 804488c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8044890:	485e      	ldr	r0, [pc, #376]	; (8044a0c <_printf_i+0x244>)
 8044892:	230a      	movs	r3, #10
 8044894:	e019      	b.n	80448ca <_printf_i+0x102>
 8044896:	680e      	ldr	r6, [r1, #0]
 8044898:	602b      	str	r3, [r5, #0]
 804489a:	f010 0f40 	tst.w	r0, #64	; 0x40
 804489e:	bf18      	it	ne
 80448a0:	b236      	sxthne	r6, r6
 80448a2:	e7ef      	b.n	8044884 <_printf_i+0xbc>
 80448a4:	682b      	ldr	r3, [r5, #0]
 80448a6:	6820      	ldr	r0, [r4, #0]
 80448a8:	1d19      	adds	r1, r3, #4
 80448aa:	6029      	str	r1, [r5, #0]
 80448ac:	0601      	lsls	r1, r0, #24
 80448ae:	d501      	bpl.n	80448b4 <_printf_i+0xec>
 80448b0:	681e      	ldr	r6, [r3, #0]
 80448b2:	e002      	b.n	80448ba <_printf_i+0xf2>
 80448b4:	0646      	lsls	r6, r0, #25
 80448b6:	d5fb      	bpl.n	80448b0 <_printf_i+0xe8>
 80448b8:	881e      	ldrh	r6, [r3, #0]
 80448ba:	4854      	ldr	r0, [pc, #336]	; (8044a0c <_printf_i+0x244>)
 80448bc:	2f6f      	cmp	r7, #111	; 0x6f
 80448be:	bf0c      	ite	eq
 80448c0:	2308      	moveq	r3, #8
 80448c2:	230a      	movne	r3, #10
 80448c4:	2100      	movs	r1, #0
 80448c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80448ca:	6865      	ldr	r5, [r4, #4]
 80448cc:	60a5      	str	r5, [r4, #8]
 80448ce:	2d00      	cmp	r5, #0
 80448d0:	bfa2      	ittt	ge
 80448d2:	6821      	ldrge	r1, [r4, #0]
 80448d4:	f021 0104 	bicge.w	r1, r1, #4
 80448d8:	6021      	strge	r1, [r4, #0]
 80448da:	b90e      	cbnz	r6, 80448e0 <_printf_i+0x118>
 80448dc:	2d00      	cmp	r5, #0
 80448de:	d04d      	beq.n	804497c <_printf_i+0x1b4>
 80448e0:	4615      	mov	r5, r2
 80448e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80448e6:	fb03 6711 	mls	r7, r3, r1, r6
 80448ea:	5dc7      	ldrb	r7, [r0, r7]
 80448ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80448f0:	4637      	mov	r7, r6
 80448f2:	42bb      	cmp	r3, r7
 80448f4:	460e      	mov	r6, r1
 80448f6:	d9f4      	bls.n	80448e2 <_printf_i+0x11a>
 80448f8:	2b08      	cmp	r3, #8
 80448fa:	d10b      	bne.n	8044914 <_printf_i+0x14c>
 80448fc:	6823      	ldr	r3, [r4, #0]
 80448fe:	07de      	lsls	r6, r3, #31
 8044900:	d508      	bpl.n	8044914 <_printf_i+0x14c>
 8044902:	6923      	ldr	r3, [r4, #16]
 8044904:	6861      	ldr	r1, [r4, #4]
 8044906:	4299      	cmp	r1, r3
 8044908:	bfde      	ittt	le
 804490a:	2330      	movle	r3, #48	; 0x30
 804490c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8044910:	f105 35ff 	addle.w	r5, r5, #4294967295
 8044914:	1b52      	subs	r2, r2, r5
 8044916:	6122      	str	r2, [r4, #16]
 8044918:	f8cd a000 	str.w	sl, [sp]
 804491c:	464b      	mov	r3, r9
 804491e:	aa03      	add	r2, sp, #12
 8044920:	4621      	mov	r1, r4
 8044922:	4640      	mov	r0, r8
 8044924:	f7ff fee2 	bl	80446ec <_printf_common>
 8044928:	3001      	adds	r0, #1
 804492a:	d14c      	bne.n	80449c6 <_printf_i+0x1fe>
 804492c:	f04f 30ff 	mov.w	r0, #4294967295
 8044930:	b004      	add	sp, #16
 8044932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8044936:	4835      	ldr	r0, [pc, #212]	; (8044a0c <_printf_i+0x244>)
 8044938:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 804493c:	6829      	ldr	r1, [r5, #0]
 804493e:	6823      	ldr	r3, [r4, #0]
 8044940:	f851 6b04 	ldr.w	r6, [r1], #4
 8044944:	6029      	str	r1, [r5, #0]
 8044946:	061d      	lsls	r5, r3, #24
 8044948:	d514      	bpl.n	8044974 <_printf_i+0x1ac>
 804494a:	07df      	lsls	r7, r3, #31
 804494c:	bf44      	itt	mi
 804494e:	f043 0320 	orrmi.w	r3, r3, #32
 8044952:	6023      	strmi	r3, [r4, #0]
 8044954:	b91e      	cbnz	r6, 804495e <_printf_i+0x196>
 8044956:	6823      	ldr	r3, [r4, #0]
 8044958:	f023 0320 	bic.w	r3, r3, #32
 804495c:	6023      	str	r3, [r4, #0]
 804495e:	2310      	movs	r3, #16
 8044960:	e7b0      	b.n	80448c4 <_printf_i+0xfc>
 8044962:	6823      	ldr	r3, [r4, #0]
 8044964:	f043 0320 	orr.w	r3, r3, #32
 8044968:	6023      	str	r3, [r4, #0]
 804496a:	2378      	movs	r3, #120	; 0x78
 804496c:	4828      	ldr	r0, [pc, #160]	; (8044a10 <_printf_i+0x248>)
 804496e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8044972:	e7e3      	b.n	804493c <_printf_i+0x174>
 8044974:	0659      	lsls	r1, r3, #25
 8044976:	bf48      	it	mi
 8044978:	b2b6      	uxthmi	r6, r6
 804497a:	e7e6      	b.n	804494a <_printf_i+0x182>
 804497c:	4615      	mov	r5, r2
 804497e:	e7bb      	b.n	80448f8 <_printf_i+0x130>
 8044980:	682b      	ldr	r3, [r5, #0]
 8044982:	6826      	ldr	r6, [r4, #0]
 8044984:	6961      	ldr	r1, [r4, #20]
 8044986:	1d18      	adds	r0, r3, #4
 8044988:	6028      	str	r0, [r5, #0]
 804498a:	0635      	lsls	r5, r6, #24
 804498c:	681b      	ldr	r3, [r3, #0]
 804498e:	d501      	bpl.n	8044994 <_printf_i+0x1cc>
 8044990:	6019      	str	r1, [r3, #0]
 8044992:	e002      	b.n	804499a <_printf_i+0x1d2>
 8044994:	0670      	lsls	r0, r6, #25
 8044996:	d5fb      	bpl.n	8044990 <_printf_i+0x1c8>
 8044998:	8019      	strh	r1, [r3, #0]
 804499a:	2300      	movs	r3, #0
 804499c:	6123      	str	r3, [r4, #16]
 804499e:	4615      	mov	r5, r2
 80449a0:	e7ba      	b.n	8044918 <_printf_i+0x150>
 80449a2:	682b      	ldr	r3, [r5, #0]
 80449a4:	1d1a      	adds	r2, r3, #4
 80449a6:	602a      	str	r2, [r5, #0]
 80449a8:	681d      	ldr	r5, [r3, #0]
 80449aa:	6862      	ldr	r2, [r4, #4]
 80449ac:	2100      	movs	r1, #0
 80449ae:	4628      	mov	r0, r5
 80449b0:	f7fb fc46 	bl	8040240 <memchr>
 80449b4:	b108      	cbz	r0, 80449ba <_printf_i+0x1f2>
 80449b6:	1b40      	subs	r0, r0, r5
 80449b8:	6060      	str	r0, [r4, #4]
 80449ba:	6863      	ldr	r3, [r4, #4]
 80449bc:	6123      	str	r3, [r4, #16]
 80449be:	2300      	movs	r3, #0
 80449c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80449c4:	e7a8      	b.n	8044918 <_printf_i+0x150>
 80449c6:	6923      	ldr	r3, [r4, #16]
 80449c8:	462a      	mov	r2, r5
 80449ca:	4649      	mov	r1, r9
 80449cc:	4640      	mov	r0, r8
 80449ce:	47d0      	blx	sl
 80449d0:	3001      	adds	r0, #1
 80449d2:	d0ab      	beq.n	804492c <_printf_i+0x164>
 80449d4:	6823      	ldr	r3, [r4, #0]
 80449d6:	079b      	lsls	r3, r3, #30
 80449d8:	d413      	bmi.n	8044a02 <_printf_i+0x23a>
 80449da:	68e0      	ldr	r0, [r4, #12]
 80449dc:	9b03      	ldr	r3, [sp, #12]
 80449de:	4298      	cmp	r0, r3
 80449e0:	bfb8      	it	lt
 80449e2:	4618      	movlt	r0, r3
 80449e4:	e7a4      	b.n	8044930 <_printf_i+0x168>
 80449e6:	2301      	movs	r3, #1
 80449e8:	4632      	mov	r2, r6
 80449ea:	4649      	mov	r1, r9
 80449ec:	4640      	mov	r0, r8
 80449ee:	47d0      	blx	sl
 80449f0:	3001      	adds	r0, #1
 80449f2:	d09b      	beq.n	804492c <_printf_i+0x164>
 80449f4:	3501      	adds	r5, #1
 80449f6:	68e3      	ldr	r3, [r4, #12]
 80449f8:	9903      	ldr	r1, [sp, #12]
 80449fa:	1a5b      	subs	r3, r3, r1
 80449fc:	42ab      	cmp	r3, r5
 80449fe:	dcf2      	bgt.n	80449e6 <_printf_i+0x21e>
 8044a00:	e7eb      	b.n	80449da <_printf_i+0x212>
 8044a02:	2500      	movs	r5, #0
 8044a04:	f104 0619 	add.w	r6, r4, #25
 8044a08:	e7f5      	b.n	80449f6 <_printf_i+0x22e>
 8044a0a:	bf00      	nop
 8044a0c:	080450c9 	.word	0x080450c9
 8044a10:	080450da 	.word	0x080450da

08044a14 <_sbrk_r>:
 8044a14:	b538      	push	{r3, r4, r5, lr}
 8044a16:	4d06      	ldr	r5, [pc, #24]	; (8044a30 <_sbrk_r+0x1c>)
 8044a18:	2300      	movs	r3, #0
 8044a1a:	4604      	mov	r4, r0
 8044a1c:	4608      	mov	r0, r1
 8044a1e:	602b      	str	r3, [r5, #0]
 8044a20:	f7fc fb40 	bl	80410a4 <_sbrk>
 8044a24:	1c43      	adds	r3, r0, #1
 8044a26:	d102      	bne.n	8044a2e <_sbrk_r+0x1a>
 8044a28:	682b      	ldr	r3, [r5, #0]
 8044a2a:	b103      	cbz	r3, 8044a2e <_sbrk_r+0x1a>
 8044a2c:	6023      	str	r3, [r4, #0]
 8044a2e:	bd38      	pop	{r3, r4, r5, pc}
 8044a30:	200001b8 	.word	0x200001b8

08044a34 <__sread>:
 8044a34:	b510      	push	{r4, lr}
 8044a36:	460c      	mov	r4, r1
 8044a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8044a3c:	f000 fab2 	bl	8044fa4 <_read_r>
 8044a40:	2800      	cmp	r0, #0
 8044a42:	bfab      	itete	ge
 8044a44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8044a46:	89a3      	ldrhlt	r3, [r4, #12]
 8044a48:	181b      	addge	r3, r3, r0
 8044a4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8044a4e:	bfac      	ite	ge
 8044a50:	6563      	strge	r3, [r4, #84]	; 0x54
 8044a52:	81a3      	strhlt	r3, [r4, #12]
 8044a54:	bd10      	pop	{r4, pc}

08044a56 <__swrite>:
 8044a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8044a5a:	461f      	mov	r7, r3
 8044a5c:	898b      	ldrh	r3, [r1, #12]
 8044a5e:	05db      	lsls	r3, r3, #23
 8044a60:	4605      	mov	r5, r0
 8044a62:	460c      	mov	r4, r1
 8044a64:	4616      	mov	r6, r2
 8044a66:	d505      	bpl.n	8044a74 <__swrite+0x1e>
 8044a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8044a6c:	2302      	movs	r3, #2
 8044a6e:	2200      	movs	r2, #0
 8044a70:	f000 f9c8 	bl	8044e04 <_lseek_r>
 8044a74:	89a3      	ldrh	r3, [r4, #12]
 8044a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8044a7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8044a7e:	81a3      	strh	r3, [r4, #12]
 8044a80:	4632      	mov	r2, r6
 8044a82:	463b      	mov	r3, r7
 8044a84:	4628      	mov	r0, r5
 8044a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8044a8a:	f000 b869 	b.w	8044b60 <_write_r>

08044a8e <__sseek>:
 8044a8e:	b510      	push	{r4, lr}
 8044a90:	460c      	mov	r4, r1
 8044a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8044a96:	f000 f9b5 	bl	8044e04 <_lseek_r>
 8044a9a:	1c43      	adds	r3, r0, #1
 8044a9c:	89a3      	ldrh	r3, [r4, #12]
 8044a9e:	bf15      	itete	ne
 8044aa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8044aa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8044aa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8044aaa:	81a3      	strheq	r3, [r4, #12]
 8044aac:	bf18      	it	ne
 8044aae:	81a3      	strhne	r3, [r4, #12]
 8044ab0:	bd10      	pop	{r4, pc}

08044ab2 <__sclose>:
 8044ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8044ab6:	f000 b8d3 	b.w	8044c60 <_close_r>
	...

08044abc <__swbuf_r>:
 8044abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8044abe:	460e      	mov	r6, r1
 8044ac0:	4614      	mov	r4, r2
 8044ac2:	4605      	mov	r5, r0
 8044ac4:	b118      	cbz	r0, 8044ace <__swbuf_r+0x12>
 8044ac6:	6983      	ldr	r3, [r0, #24]
 8044ac8:	b90b      	cbnz	r3, 8044ace <__swbuf_r+0x12>
 8044aca:	f7ff fb81 	bl	80441d0 <__sinit>
 8044ace:	4b21      	ldr	r3, [pc, #132]	; (8044b54 <__swbuf_r+0x98>)
 8044ad0:	429c      	cmp	r4, r3
 8044ad2:	d12b      	bne.n	8044b2c <__swbuf_r+0x70>
 8044ad4:	686c      	ldr	r4, [r5, #4]
 8044ad6:	69a3      	ldr	r3, [r4, #24]
 8044ad8:	60a3      	str	r3, [r4, #8]
 8044ada:	89a3      	ldrh	r3, [r4, #12]
 8044adc:	071a      	lsls	r2, r3, #28
 8044ade:	d52f      	bpl.n	8044b40 <__swbuf_r+0x84>
 8044ae0:	6923      	ldr	r3, [r4, #16]
 8044ae2:	b36b      	cbz	r3, 8044b40 <__swbuf_r+0x84>
 8044ae4:	6923      	ldr	r3, [r4, #16]
 8044ae6:	6820      	ldr	r0, [r4, #0]
 8044ae8:	1ac0      	subs	r0, r0, r3
 8044aea:	6963      	ldr	r3, [r4, #20]
 8044aec:	b2f6      	uxtb	r6, r6
 8044aee:	4283      	cmp	r3, r0
 8044af0:	4637      	mov	r7, r6
 8044af2:	dc04      	bgt.n	8044afe <__swbuf_r+0x42>
 8044af4:	4621      	mov	r1, r4
 8044af6:	4628      	mov	r0, r5
 8044af8:	f000 f948 	bl	8044d8c <_fflush_r>
 8044afc:	bb30      	cbnz	r0, 8044b4c <__swbuf_r+0x90>
 8044afe:	68a3      	ldr	r3, [r4, #8]
 8044b00:	3b01      	subs	r3, #1
 8044b02:	60a3      	str	r3, [r4, #8]
 8044b04:	6823      	ldr	r3, [r4, #0]
 8044b06:	1c5a      	adds	r2, r3, #1
 8044b08:	6022      	str	r2, [r4, #0]
 8044b0a:	701e      	strb	r6, [r3, #0]
 8044b0c:	6963      	ldr	r3, [r4, #20]
 8044b0e:	3001      	adds	r0, #1
 8044b10:	4283      	cmp	r3, r0
 8044b12:	d004      	beq.n	8044b1e <__swbuf_r+0x62>
 8044b14:	89a3      	ldrh	r3, [r4, #12]
 8044b16:	07db      	lsls	r3, r3, #31
 8044b18:	d506      	bpl.n	8044b28 <__swbuf_r+0x6c>
 8044b1a:	2e0a      	cmp	r6, #10
 8044b1c:	d104      	bne.n	8044b28 <__swbuf_r+0x6c>
 8044b1e:	4621      	mov	r1, r4
 8044b20:	4628      	mov	r0, r5
 8044b22:	f000 f933 	bl	8044d8c <_fflush_r>
 8044b26:	b988      	cbnz	r0, 8044b4c <__swbuf_r+0x90>
 8044b28:	4638      	mov	r0, r7
 8044b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8044b2c:	4b0a      	ldr	r3, [pc, #40]	; (8044b58 <__swbuf_r+0x9c>)
 8044b2e:	429c      	cmp	r4, r3
 8044b30:	d101      	bne.n	8044b36 <__swbuf_r+0x7a>
 8044b32:	68ac      	ldr	r4, [r5, #8]
 8044b34:	e7cf      	b.n	8044ad6 <__swbuf_r+0x1a>
 8044b36:	4b09      	ldr	r3, [pc, #36]	; (8044b5c <__swbuf_r+0xa0>)
 8044b38:	429c      	cmp	r4, r3
 8044b3a:	bf08      	it	eq
 8044b3c:	68ec      	ldreq	r4, [r5, #12]
 8044b3e:	e7ca      	b.n	8044ad6 <__swbuf_r+0x1a>
 8044b40:	4621      	mov	r1, r4
 8044b42:	4628      	mov	r0, r5
 8044b44:	f000 f81e 	bl	8044b84 <__swsetup_r>
 8044b48:	2800      	cmp	r0, #0
 8044b4a:	d0cb      	beq.n	8044ae4 <__swbuf_r+0x28>
 8044b4c:	f04f 37ff 	mov.w	r7, #4294967295
 8044b50:	e7ea      	b.n	8044b28 <__swbuf_r+0x6c>
 8044b52:	bf00      	nop
 8044b54:	08045078 	.word	0x08045078
 8044b58:	08045098 	.word	0x08045098
 8044b5c:	08045058 	.word	0x08045058

08044b60 <_write_r>:
 8044b60:	b538      	push	{r3, r4, r5, lr}
 8044b62:	4d07      	ldr	r5, [pc, #28]	; (8044b80 <_write_r+0x20>)
 8044b64:	4604      	mov	r4, r0
 8044b66:	4608      	mov	r0, r1
 8044b68:	4611      	mov	r1, r2
 8044b6a:	2200      	movs	r2, #0
 8044b6c:	602a      	str	r2, [r5, #0]
 8044b6e:	461a      	mov	r2, r3
 8044b70:	f7fc fa47 	bl	8041002 <_write>
 8044b74:	1c43      	adds	r3, r0, #1
 8044b76:	d102      	bne.n	8044b7e <_write_r+0x1e>
 8044b78:	682b      	ldr	r3, [r5, #0]
 8044b7a:	b103      	cbz	r3, 8044b7e <_write_r+0x1e>
 8044b7c:	6023      	str	r3, [r4, #0]
 8044b7e:	bd38      	pop	{r3, r4, r5, pc}
 8044b80:	200001b8 	.word	0x200001b8

08044b84 <__swsetup_r>:
 8044b84:	4b32      	ldr	r3, [pc, #200]	; (8044c50 <__swsetup_r+0xcc>)
 8044b86:	b570      	push	{r4, r5, r6, lr}
 8044b88:	681d      	ldr	r5, [r3, #0]
 8044b8a:	4606      	mov	r6, r0
 8044b8c:	460c      	mov	r4, r1
 8044b8e:	b125      	cbz	r5, 8044b9a <__swsetup_r+0x16>
 8044b90:	69ab      	ldr	r3, [r5, #24]
 8044b92:	b913      	cbnz	r3, 8044b9a <__swsetup_r+0x16>
 8044b94:	4628      	mov	r0, r5
 8044b96:	f7ff fb1b 	bl	80441d0 <__sinit>
 8044b9a:	4b2e      	ldr	r3, [pc, #184]	; (8044c54 <__swsetup_r+0xd0>)
 8044b9c:	429c      	cmp	r4, r3
 8044b9e:	d10f      	bne.n	8044bc0 <__swsetup_r+0x3c>
 8044ba0:	686c      	ldr	r4, [r5, #4]
 8044ba2:	89a3      	ldrh	r3, [r4, #12]
 8044ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8044ba8:	0719      	lsls	r1, r3, #28
 8044baa:	d42c      	bmi.n	8044c06 <__swsetup_r+0x82>
 8044bac:	06dd      	lsls	r5, r3, #27
 8044bae:	d411      	bmi.n	8044bd4 <__swsetup_r+0x50>
 8044bb0:	2309      	movs	r3, #9
 8044bb2:	6033      	str	r3, [r6, #0]
 8044bb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8044bb8:	81a3      	strh	r3, [r4, #12]
 8044bba:	f04f 30ff 	mov.w	r0, #4294967295
 8044bbe:	e03e      	b.n	8044c3e <__swsetup_r+0xba>
 8044bc0:	4b25      	ldr	r3, [pc, #148]	; (8044c58 <__swsetup_r+0xd4>)
 8044bc2:	429c      	cmp	r4, r3
 8044bc4:	d101      	bne.n	8044bca <__swsetup_r+0x46>
 8044bc6:	68ac      	ldr	r4, [r5, #8]
 8044bc8:	e7eb      	b.n	8044ba2 <__swsetup_r+0x1e>
 8044bca:	4b24      	ldr	r3, [pc, #144]	; (8044c5c <__swsetup_r+0xd8>)
 8044bcc:	429c      	cmp	r4, r3
 8044bce:	bf08      	it	eq
 8044bd0:	68ec      	ldreq	r4, [r5, #12]
 8044bd2:	e7e6      	b.n	8044ba2 <__swsetup_r+0x1e>
 8044bd4:	0758      	lsls	r0, r3, #29
 8044bd6:	d512      	bpl.n	8044bfe <__swsetup_r+0x7a>
 8044bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8044bda:	b141      	cbz	r1, 8044bee <__swsetup_r+0x6a>
 8044bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8044be0:	4299      	cmp	r1, r3
 8044be2:	d002      	beq.n	8044bea <__swsetup_r+0x66>
 8044be4:	4630      	mov	r0, r6
 8044be6:	f000 f991 	bl	8044f0c <_free_r>
 8044bea:	2300      	movs	r3, #0
 8044bec:	6363      	str	r3, [r4, #52]	; 0x34
 8044bee:	89a3      	ldrh	r3, [r4, #12]
 8044bf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8044bf4:	81a3      	strh	r3, [r4, #12]
 8044bf6:	2300      	movs	r3, #0
 8044bf8:	6063      	str	r3, [r4, #4]
 8044bfa:	6923      	ldr	r3, [r4, #16]
 8044bfc:	6023      	str	r3, [r4, #0]
 8044bfe:	89a3      	ldrh	r3, [r4, #12]
 8044c00:	f043 0308 	orr.w	r3, r3, #8
 8044c04:	81a3      	strh	r3, [r4, #12]
 8044c06:	6923      	ldr	r3, [r4, #16]
 8044c08:	b94b      	cbnz	r3, 8044c1e <__swsetup_r+0x9a>
 8044c0a:	89a3      	ldrh	r3, [r4, #12]
 8044c0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8044c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8044c14:	d003      	beq.n	8044c1e <__swsetup_r+0x9a>
 8044c16:	4621      	mov	r1, r4
 8044c18:	4630      	mov	r0, r6
 8044c1a:	f000 f92b 	bl	8044e74 <__smakebuf_r>
 8044c1e:	89a0      	ldrh	r0, [r4, #12]
 8044c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8044c24:	f010 0301 	ands.w	r3, r0, #1
 8044c28:	d00a      	beq.n	8044c40 <__swsetup_r+0xbc>
 8044c2a:	2300      	movs	r3, #0
 8044c2c:	60a3      	str	r3, [r4, #8]
 8044c2e:	6963      	ldr	r3, [r4, #20]
 8044c30:	425b      	negs	r3, r3
 8044c32:	61a3      	str	r3, [r4, #24]
 8044c34:	6923      	ldr	r3, [r4, #16]
 8044c36:	b943      	cbnz	r3, 8044c4a <__swsetup_r+0xc6>
 8044c38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8044c3c:	d1ba      	bne.n	8044bb4 <__swsetup_r+0x30>
 8044c3e:	bd70      	pop	{r4, r5, r6, pc}
 8044c40:	0781      	lsls	r1, r0, #30
 8044c42:	bf58      	it	pl
 8044c44:	6963      	ldrpl	r3, [r4, #20]
 8044c46:	60a3      	str	r3, [r4, #8]
 8044c48:	e7f4      	b.n	8044c34 <__swsetup_r+0xb0>
 8044c4a:	2000      	movs	r0, #0
 8044c4c:	e7f7      	b.n	8044c3e <__swsetup_r+0xba>
 8044c4e:	bf00      	nop
 8044c50:	20000020 	.word	0x20000020
 8044c54:	08045078 	.word	0x08045078
 8044c58:	08045098 	.word	0x08045098
 8044c5c:	08045058 	.word	0x08045058

08044c60 <_close_r>:
 8044c60:	b538      	push	{r3, r4, r5, lr}
 8044c62:	4d06      	ldr	r5, [pc, #24]	; (8044c7c <_close_r+0x1c>)
 8044c64:	2300      	movs	r3, #0
 8044c66:	4604      	mov	r4, r0
 8044c68:	4608      	mov	r0, r1
 8044c6a:	602b      	str	r3, [r5, #0]
 8044c6c:	f7fc f9e5 	bl	804103a <_close>
 8044c70:	1c43      	adds	r3, r0, #1
 8044c72:	d102      	bne.n	8044c7a <_close_r+0x1a>
 8044c74:	682b      	ldr	r3, [r5, #0]
 8044c76:	b103      	cbz	r3, 8044c7a <_close_r+0x1a>
 8044c78:	6023      	str	r3, [r4, #0]
 8044c7a:	bd38      	pop	{r3, r4, r5, pc}
 8044c7c:	200001b8 	.word	0x200001b8

08044c80 <__sflush_r>:
 8044c80:	898a      	ldrh	r2, [r1, #12]
 8044c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8044c86:	4605      	mov	r5, r0
 8044c88:	0710      	lsls	r0, r2, #28
 8044c8a:	460c      	mov	r4, r1
 8044c8c:	d458      	bmi.n	8044d40 <__sflush_r+0xc0>
 8044c8e:	684b      	ldr	r3, [r1, #4]
 8044c90:	2b00      	cmp	r3, #0
 8044c92:	dc05      	bgt.n	8044ca0 <__sflush_r+0x20>
 8044c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8044c96:	2b00      	cmp	r3, #0
 8044c98:	dc02      	bgt.n	8044ca0 <__sflush_r+0x20>
 8044c9a:	2000      	movs	r0, #0
 8044c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8044ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8044ca2:	2e00      	cmp	r6, #0
 8044ca4:	d0f9      	beq.n	8044c9a <__sflush_r+0x1a>
 8044ca6:	2300      	movs	r3, #0
 8044ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8044cac:	682f      	ldr	r7, [r5, #0]
 8044cae:	602b      	str	r3, [r5, #0]
 8044cb0:	d032      	beq.n	8044d18 <__sflush_r+0x98>
 8044cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8044cb4:	89a3      	ldrh	r3, [r4, #12]
 8044cb6:	075a      	lsls	r2, r3, #29
 8044cb8:	d505      	bpl.n	8044cc6 <__sflush_r+0x46>
 8044cba:	6863      	ldr	r3, [r4, #4]
 8044cbc:	1ac0      	subs	r0, r0, r3
 8044cbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8044cc0:	b10b      	cbz	r3, 8044cc6 <__sflush_r+0x46>
 8044cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8044cc4:	1ac0      	subs	r0, r0, r3
 8044cc6:	2300      	movs	r3, #0
 8044cc8:	4602      	mov	r2, r0
 8044cca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8044ccc:	6a21      	ldr	r1, [r4, #32]
 8044cce:	4628      	mov	r0, r5
 8044cd0:	47b0      	blx	r6
 8044cd2:	1c43      	adds	r3, r0, #1
 8044cd4:	89a3      	ldrh	r3, [r4, #12]
 8044cd6:	d106      	bne.n	8044ce6 <__sflush_r+0x66>
 8044cd8:	6829      	ldr	r1, [r5, #0]
 8044cda:	291d      	cmp	r1, #29
 8044cdc:	d82c      	bhi.n	8044d38 <__sflush_r+0xb8>
 8044cde:	4a2a      	ldr	r2, [pc, #168]	; (8044d88 <__sflush_r+0x108>)
 8044ce0:	40ca      	lsrs	r2, r1
 8044ce2:	07d6      	lsls	r6, r2, #31
 8044ce4:	d528      	bpl.n	8044d38 <__sflush_r+0xb8>
 8044ce6:	2200      	movs	r2, #0
 8044ce8:	6062      	str	r2, [r4, #4]
 8044cea:	04d9      	lsls	r1, r3, #19
 8044cec:	6922      	ldr	r2, [r4, #16]
 8044cee:	6022      	str	r2, [r4, #0]
 8044cf0:	d504      	bpl.n	8044cfc <__sflush_r+0x7c>
 8044cf2:	1c42      	adds	r2, r0, #1
 8044cf4:	d101      	bne.n	8044cfa <__sflush_r+0x7a>
 8044cf6:	682b      	ldr	r3, [r5, #0]
 8044cf8:	b903      	cbnz	r3, 8044cfc <__sflush_r+0x7c>
 8044cfa:	6560      	str	r0, [r4, #84]	; 0x54
 8044cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8044cfe:	602f      	str	r7, [r5, #0]
 8044d00:	2900      	cmp	r1, #0
 8044d02:	d0ca      	beq.n	8044c9a <__sflush_r+0x1a>
 8044d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8044d08:	4299      	cmp	r1, r3
 8044d0a:	d002      	beq.n	8044d12 <__sflush_r+0x92>
 8044d0c:	4628      	mov	r0, r5
 8044d0e:	f000 f8fd 	bl	8044f0c <_free_r>
 8044d12:	2000      	movs	r0, #0
 8044d14:	6360      	str	r0, [r4, #52]	; 0x34
 8044d16:	e7c1      	b.n	8044c9c <__sflush_r+0x1c>
 8044d18:	6a21      	ldr	r1, [r4, #32]
 8044d1a:	2301      	movs	r3, #1
 8044d1c:	4628      	mov	r0, r5
 8044d1e:	47b0      	blx	r6
 8044d20:	1c41      	adds	r1, r0, #1
 8044d22:	d1c7      	bne.n	8044cb4 <__sflush_r+0x34>
 8044d24:	682b      	ldr	r3, [r5, #0]
 8044d26:	2b00      	cmp	r3, #0
 8044d28:	d0c4      	beq.n	8044cb4 <__sflush_r+0x34>
 8044d2a:	2b1d      	cmp	r3, #29
 8044d2c:	d001      	beq.n	8044d32 <__sflush_r+0xb2>
 8044d2e:	2b16      	cmp	r3, #22
 8044d30:	d101      	bne.n	8044d36 <__sflush_r+0xb6>
 8044d32:	602f      	str	r7, [r5, #0]
 8044d34:	e7b1      	b.n	8044c9a <__sflush_r+0x1a>
 8044d36:	89a3      	ldrh	r3, [r4, #12]
 8044d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8044d3c:	81a3      	strh	r3, [r4, #12]
 8044d3e:	e7ad      	b.n	8044c9c <__sflush_r+0x1c>
 8044d40:	690f      	ldr	r7, [r1, #16]
 8044d42:	2f00      	cmp	r7, #0
 8044d44:	d0a9      	beq.n	8044c9a <__sflush_r+0x1a>
 8044d46:	0793      	lsls	r3, r2, #30
 8044d48:	680e      	ldr	r6, [r1, #0]
 8044d4a:	bf08      	it	eq
 8044d4c:	694b      	ldreq	r3, [r1, #20]
 8044d4e:	600f      	str	r7, [r1, #0]
 8044d50:	bf18      	it	ne
 8044d52:	2300      	movne	r3, #0
 8044d54:	eba6 0807 	sub.w	r8, r6, r7
 8044d58:	608b      	str	r3, [r1, #8]
 8044d5a:	f1b8 0f00 	cmp.w	r8, #0
 8044d5e:	dd9c      	ble.n	8044c9a <__sflush_r+0x1a>
 8044d60:	6a21      	ldr	r1, [r4, #32]
 8044d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8044d64:	4643      	mov	r3, r8
 8044d66:	463a      	mov	r2, r7
 8044d68:	4628      	mov	r0, r5
 8044d6a:	47b0      	blx	r6
 8044d6c:	2800      	cmp	r0, #0
 8044d6e:	dc06      	bgt.n	8044d7e <__sflush_r+0xfe>
 8044d70:	89a3      	ldrh	r3, [r4, #12]
 8044d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8044d76:	81a3      	strh	r3, [r4, #12]
 8044d78:	f04f 30ff 	mov.w	r0, #4294967295
 8044d7c:	e78e      	b.n	8044c9c <__sflush_r+0x1c>
 8044d7e:	4407      	add	r7, r0
 8044d80:	eba8 0800 	sub.w	r8, r8, r0
 8044d84:	e7e9      	b.n	8044d5a <__sflush_r+0xda>
 8044d86:	bf00      	nop
 8044d88:	20400001 	.word	0x20400001

08044d8c <_fflush_r>:
 8044d8c:	b538      	push	{r3, r4, r5, lr}
 8044d8e:	690b      	ldr	r3, [r1, #16]
 8044d90:	4605      	mov	r5, r0
 8044d92:	460c      	mov	r4, r1
 8044d94:	b913      	cbnz	r3, 8044d9c <_fflush_r+0x10>
 8044d96:	2500      	movs	r5, #0
 8044d98:	4628      	mov	r0, r5
 8044d9a:	bd38      	pop	{r3, r4, r5, pc}
 8044d9c:	b118      	cbz	r0, 8044da6 <_fflush_r+0x1a>
 8044d9e:	6983      	ldr	r3, [r0, #24]
 8044da0:	b90b      	cbnz	r3, 8044da6 <_fflush_r+0x1a>
 8044da2:	f7ff fa15 	bl	80441d0 <__sinit>
 8044da6:	4b14      	ldr	r3, [pc, #80]	; (8044df8 <_fflush_r+0x6c>)
 8044da8:	429c      	cmp	r4, r3
 8044daa:	d11b      	bne.n	8044de4 <_fflush_r+0x58>
 8044dac:	686c      	ldr	r4, [r5, #4]
 8044dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8044db2:	2b00      	cmp	r3, #0
 8044db4:	d0ef      	beq.n	8044d96 <_fflush_r+0xa>
 8044db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8044db8:	07d0      	lsls	r0, r2, #31
 8044dba:	d404      	bmi.n	8044dc6 <_fflush_r+0x3a>
 8044dbc:	0599      	lsls	r1, r3, #22
 8044dbe:	d402      	bmi.n	8044dc6 <_fflush_r+0x3a>
 8044dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8044dc2:	f7ff faa3 	bl	804430c <__retarget_lock_acquire_recursive>
 8044dc6:	4628      	mov	r0, r5
 8044dc8:	4621      	mov	r1, r4
 8044dca:	f7ff ff59 	bl	8044c80 <__sflush_r>
 8044dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8044dd0:	07da      	lsls	r2, r3, #31
 8044dd2:	4605      	mov	r5, r0
 8044dd4:	d4e0      	bmi.n	8044d98 <_fflush_r+0xc>
 8044dd6:	89a3      	ldrh	r3, [r4, #12]
 8044dd8:	059b      	lsls	r3, r3, #22
 8044dda:	d4dd      	bmi.n	8044d98 <_fflush_r+0xc>
 8044ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8044dde:	f7ff fa96 	bl	804430e <__retarget_lock_release_recursive>
 8044de2:	e7d9      	b.n	8044d98 <_fflush_r+0xc>
 8044de4:	4b05      	ldr	r3, [pc, #20]	; (8044dfc <_fflush_r+0x70>)
 8044de6:	429c      	cmp	r4, r3
 8044de8:	d101      	bne.n	8044dee <_fflush_r+0x62>
 8044dea:	68ac      	ldr	r4, [r5, #8]
 8044dec:	e7df      	b.n	8044dae <_fflush_r+0x22>
 8044dee:	4b04      	ldr	r3, [pc, #16]	; (8044e00 <_fflush_r+0x74>)
 8044df0:	429c      	cmp	r4, r3
 8044df2:	bf08      	it	eq
 8044df4:	68ec      	ldreq	r4, [r5, #12]
 8044df6:	e7da      	b.n	8044dae <_fflush_r+0x22>
 8044df8:	08045078 	.word	0x08045078
 8044dfc:	08045098 	.word	0x08045098
 8044e00:	08045058 	.word	0x08045058

08044e04 <_lseek_r>:
 8044e04:	b538      	push	{r3, r4, r5, lr}
 8044e06:	4d07      	ldr	r5, [pc, #28]	; (8044e24 <_lseek_r+0x20>)
 8044e08:	4604      	mov	r4, r0
 8044e0a:	4608      	mov	r0, r1
 8044e0c:	4611      	mov	r1, r2
 8044e0e:	2200      	movs	r2, #0
 8044e10:	602a      	str	r2, [r5, #0]
 8044e12:	461a      	mov	r2, r3
 8044e14:	f7fc f938 	bl	8041088 <_lseek>
 8044e18:	1c43      	adds	r3, r0, #1
 8044e1a:	d102      	bne.n	8044e22 <_lseek_r+0x1e>
 8044e1c:	682b      	ldr	r3, [r5, #0]
 8044e1e:	b103      	cbz	r3, 8044e22 <_lseek_r+0x1e>
 8044e20:	6023      	str	r3, [r4, #0]
 8044e22:	bd38      	pop	{r3, r4, r5, pc}
 8044e24:	200001b8 	.word	0x200001b8

08044e28 <__swhatbuf_r>:
 8044e28:	b570      	push	{r4, r5, r6, lr}
 8044e2a:	460e      	mov	r6, r1
 8044e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8044e30:	2900      	cmp	r1, #0
 8044e32:	b096      	sub	sp, #88	; 0x58
 8044e34:	4614      	mov	r4, r2
 8044e36:	461d      	mov	r5, r3
 8044e38:	da08      	bge.n	8044e4c <__swhatbuf_r+0x24>
 8044e3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8044e3e:	2200      	movs	r2, #0
 8044e40:	602a      	str	r2, [r5, #0]
 8044e42:	061a      	lsls	r2, r3, #24
 8044e44:	d410      	bmi.n	8044e68 <__swhatbuf_r+0x40>
 8044e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8044e4a:	e00e      	b.n	8044e6a <__swhatbuf_r+0x42>
 8044e4c:	466a      	mov	r2, sp
 8044e4e:	f000 f8bb 	bl	8044fc8 <_fstat_r>
 8044e52:	2800      	cmp	r0, #0
 8044e54:	dbf1      	blt.n	8044e3a <__swhatbuf_r+0x12>
 8044e56:	9a01      	ldr	r2, [sp, #4]
 8044e58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8044e5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8044e60:	425a      	negs	r2, r3
 8044e62:	415a      	adcs	r2, r3
 8044e64:	602a      	str	r2, [r5, #0]
 8044e66:	e7ee      	b.n	8044e46 <__swhatbuf_r+0x1e>
 8044e68:	2340      	movs	r3, #64	; 0x40
 8044e6a:	2000      	movs	r0, #0
 8044e6c:	6023      	str	r3, [r4, #0]
 8044e6e:	b016      	add	sp, #88	; 0x58
 8044e70:	bd70      	pop	{r4, r5, r6, pc}
	...

08044e74 <__smakebuf_r>:
 8044e74:	898b      	ldrh	r3, [r1, #12]
 8044e76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8044e78:	079d      	lsls	r5, r3, #30
 8044e7a:	4606      	mov	r6, r0
 8044e7c:	460c      	mov	r4, r1
 8044e7e:	d507      	bpl.n	8044e90 <__smakebuf_r+0x1c>
 8044e80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8044e84:	6023      	str	r3, [r4, #0]
 8044e86:	6123      	str	r3, [r4, #16]
 8044e88:	2301      	movs	r3, #1
 8044e8a:	6163      	str	r3, [r4, #20]
 8044e8c:	b002      	add	sp, #8
 8044e8e:	bd70      	pop	{r4, r5, r6, pc}
 8044e90:	ab01      	add	r3, sp, #4
 8044e92:	466a      	mov	r2, sp
 8044e94:	f7ff ffc8 	bl	8044e28 <__swhatbuf_r>
 8044e98:	9900      	ldr	r1, [sp, #0]
 8044e9a:	4605      	mov	r5, r0
 8044e9c:	4630      	mov	r0, r6
 8044e9e:	f7ff fa57 	bl	8044350 <_malloc_r>
 8044ea2:	b948      	cbnz	r0, 8044eb8 <__smakebuf_r+0x44>
 8044ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8044ea8:	059a      	lsls	r2, r3, #22
 8044eaa:	d4ef      	bmi.n	8044e8c <__smakebuf_r+0x18>
 8044eac:	f023 0303 	bic.w	r3, r3, #3
 8044eb0:	f043 0302 	orr.w	r3, r3, #2
 8044eb4:	81a3      	strh	r3, [r4, #12]
 8044eb6:	e7e3      	b.n	8044e80 <__smakebuf_r+0xc>
 8044eb8:	4b0d      	ldr	r3, [pc, #52]	; (8044ef0 <__smakebuf_r+0x7c>)
 8044eba:	62b3      	str	r3, [r6, #40]	; 0x28
 8044ebc:	89a3      	ldrh	r3, [r4, #12]
 8044ebe:	6020      	str	r0, [r4, #0]
 8044ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8044ec4:	81a3      	strh	r3, [r4, #12]
 8044ec6:	9b00      	ldr	r3, [sp, #0]
 8044ec8:	6163      	str	r3, [r4, #20]
 8044eca:	9b01      	ldr	r3, [sp, #4]
 8044ecc:	6120      	str	r0, [r4, #16]
 8044ece:	b15b      	cbz	r3, 8044ee8 <__smakebuf_r+0x74>
 8044ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8044ed4:	4630      	mov	r0, r6
 8044ed6:	f000 f889 	bl	8044fec <_isatty_r>
 8044eda:	b128      	cbz	r0, 8044ee8 <__smakebuf_r+0x74>
 8044edc:	89a3      	ldrh	r3, [r4, #12]
 8044ede:	f023 0303 	bic.w	r3, r3, #3
 8044ee2:	f043 0301 	orr.w	r3, r3, #1
 8044ee6:	81a3      	strh	r3, [r4, #12]
 8044ee8:	89a0      	ldrh	r0, [r4, #12]
 8044eea:	4305      	orrs	r5, r0
 8044eec:	81a5      	strh	r5, [r4, #12]
 8044eee:	e7cd      	b.n	8044e8c <__smakebuf_r+0x18>
 8044ef0:	08044169 	.word	0x08044169

08044ef4 <__malloc_lock>:
 8044ef4:	4801      	ldr	r0, [pc, #4]	; (8044efc <__malloc_lock+0x8>)
 8044ef6:	f7ff ba09 	b.w	804430c <__retarget_lock_acquire_recursive>
 8044efa:	bf00      	nop
 8044efc:	200001ac 	.word	0x200001ac

08044f00 <__malloc_unlock>:
 8044f00:	4801      	ldr	r0, [pc, #4]	; (8044f08 <__malloc_unlock+0x8>)
 8044f02:	f7ff ba04 	b.w	804430e <__retarget_lock_release_recursive>
 8044f06:	bf00      	nop
 8044f08:	200001ac 	.word	0x200001ac

08044f0c <_free_r>:
 8044f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8044f0e:	2900      	cmp	r1, #0
 8044f10:	d044      	beq.n	8044f9c <_free_r+0x90>
 8044f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8044f16:	9001      	str	r0, [sp, #4]
 8044f18:	2b00      	cmp	r3, #0
 8044f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8044f1e:	bfb8      	it	lt
 8044f20:	18e4      	addlt	r4, r4, r3
 8044f22:	f7ff ffe7 	bl	8044ef4 <__malloc_lock>
 8044f26:	4a1e      	ldr	r2, [pc, #120]	; (8044fa0 <_free_r+0x94>)
 8044f28:	9801      	ldr	r0, [sp, #4]
 8044f2a:	6813      	ldr	r3, [r2, #0]
 8044f2c:	b933      	cbnz	r3, 8044f3c <_free_r+0x30>
 8044f2e:	6063      	str	r3, [r4, #4]
 8044f30:	6014      	str	r4, [r2, #0]
 8044f32:	b003      	add	sp, #12
 8044f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8044f38:	f7ff bfe2 	b.w	8044f00 <__malloc_unlock>
 8044f3c:	42a3      	cmp	r3, r4
 8044f3e:	d908      	bls.n	8044f52 <_free_r+0x46>
 8044f40:	6825      	ldr	r5, [r4, #0]
 8044f42:	1961      	adds	r1, r4, r5
 8044f44:	428b      	cmp	r3, r1
 8044f46:	bf01      	itttt	eq
 8044f48:	6819      	ldreq	r1, [r3, #0]
 8044f4a:	685b      	ldreq	r3, [r3, #4]
 8044f4c:	1949      	addeq	r1, r1, r5
 8044f4e:	6021      	streq	r1, [r4, #0]
 8044f50:	e7ed      	b.n	8044f2e <_free_r+0x22>
 8044f52:	461a      	mov	r2, r3
 8044f54:	685b      	ldr	r3, [r3, #4]
 8044f56:	b10b      	cbz	r3, 8044f5c <_free_r+0x50>
 8044f58:	42a3      	cmp	r3, r4
 8044f5a:	d9fa      	bls.n	8044f52 <_free_r+0x46>
 8044f5c:	6811      	ldr	r1, [r2, #0]
 8044f5e:	1855      	adds	r5, r2, r1
 8044f60:	42a5      	cmp	r5, r4
 8044f62:	d10b      	bne.n	8044f7c <_free_r+0x70>
 8044f64:	6824      	ldr	r4, [r4, #0]
 8044f66:	4421      	add	r1, r4
 8044f68:	1854      	adds	r4, r2, r1
 8044f6a:	42a3      	cmp	r3, r4
 8044f6c:	6011      	str	r1, [r2, #0]
 8044f6e:	d1e0      	bne.n	8044f32 <_free_r+0x26>
 8044f70:	681c      	ldr	r4, [r3, #0]
 8044f72:	685b      	ldr	r3, [r3, #4]
 8044f74:	6053      	str	r3, [r2, #4]
 8044f76:	4421      	add	r1, r4
 8044f78:	6011      	str	r1, [r2, #0]
 8044f7a:	e7da      	b.n	8044f32 <_free_r+0x26>
 8044f7c:	d902      	bls.n	8044f84 <_free_r+0x78>
 8044f7e:	230c      	movs	r3, #12
 8044f80:	6003      	str	r3, [r0, #0]
 8044f82:	e7d6      	b.n	8044f32 <_free_r+0x26>
 8044f84:	6825      	ldr	r5, [r4, #0]
 8044f86:	1961      	adds	r1, r4, r5
 8044f88:	428b      	cmp	r3, r1
 8044f8a:	bf04      	itt	eq
 8044f8c:	6819      	ldreq	r1, [r3, #0]
 8044f8e:	685b      	ldreq	r3, [r3, #4]
 8044f90:	6063      	str	r3, [r4, #4]
 8044f92:	bf04      	itt	eq
 8044f94:	1949      	addeq	r1, r1, r5
 8044f96:	6021      	streq	r1, [r4, #0]
 8044f98:	6054      	str	r4, [r2, #4]
 8044f9a:	e7ca      	b.n	8044f32 <_free_r+0x26>
 8044f9c:	b003      	add	sp, #12
 8044f9e:	bd30      	pop	{r4, r5, pc}
 8044fa0:	200001b0 	.word	0x200001b0

08044fa4 <_read_r>:
 8044fa4:	b538      	push	{r3, r4, r5, lr}
 8044fa6:	4d07      	ldr	r5, [pc, #28]	; (8044fc4 <_read_r+0x20>)
 8044fa8:	4604      	mov	r4, r0
 8044faa:	4608      	mov	r0, r1
 8044fac:	4611      	mov	r1, r2
 8044fae:	2200      	movs	r2, #0
 8044fb0:	602a      	str	r2, [r5, #0]
 8044fb2:	461a      	mov	r2, r3
 8044fb4:	f7fc f808 	bl	8040fc8 <_read>
 8044fb8:	1c43      	adds	r3, r0, #1
 8044fba:	d102      	bne.n	8044fc2 <_read_r+0x1e>
 8044fbc:	682b      	ldr	r3, [r5, #0]
 8044fbe:	b103      	cbz	r3, 8044fc2 <_read_r+0x1e>
 8044fc0:	6023      	str	r3, [r4, #0]
 8044fc2:	bd38      	pop	{r3, r4, r5, pc}
 8044fc4:	200001b8 	.word	0x200001b8

08044fc8 <_fstat_r>:
 8044fc8:	b538      	push	{r3, r4, r5, lr}
 8044fca:	4d07      	ldr	r5, [pc, #28]	; (8044fe8 <_fstat_r+0x20>)
 8044fcc:	2300      	movs	r3, #0
 8044fce:	4604      	mov	r4, r0
 8044fd0:	4608      	mov	r0, r1
 8044fd2:	4611      	mov	r1, r2
 8044fd4:	602b      	str	r3, [r5, #0]
 8044fd6:	f7fc f83c 	bl	8041052 <_fstat>
 8044fda:	1c43      	adds	r3, r0, #1
 8044fdc:	d102      	bne.n	8044fe4 <_fstat_r+0x1c>
 8044fde:	682b      	ldr	r3, [r5, #0]
 8044fe0:	b103      	cbz	r3, 8044fe4 <_fstat_r+0x1c>
 8044fe2:	6023      	str	r3, [r4, #0]
 8044fe4:	bd38      	pop	{r3, r4, r5, pc}
 8044fe6:	bf00      	nop
 8044fe8:	200001b8 	.word	0x200001b8

08044fec <_isatty_r>:
 8044fec:	b538      	push	{r3, r4, r5, lr}
 8044fee:	4d06      	ldr	r5, [pc, #24]	; (8045008 <_isatty_r+0x1c>)
 8044ff0:	2300      	movs	r3, #0
 8044ff2:	4604      	mov	r4, r0
 8044ff4:	4608      	mov	r0, r1
 8044ff6:	602b      	str	r3, [r5, #0]
 8044ff8:	f7fc f83b 	bl	8041072 <_isatty>
 8044ffc:	1c43      	adds	r3, r0, #1
 8044ffe:	d102      	bne.n	8045006 <_isatty_r+0x1a>
 8045000:	682b      	ldr	r3, [r5, #0]
 8045002:	b103      	cbz	r3, 8045006 <_isatty_r+0x1a>
 8045004:	6023      	str	r3, [r4, #0]
 8045006:	bd38      	pop	{r3, r4, r5, pc}
 8045008:	200001b8 	.word	0x200001b8

0804500c <_init>:
 804500c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804500e:	bf00      	nop
 8045010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8045012:	bc08      	pop	{r3}
 8045014:	469e      	mov	lr, r3
 8045016:	4770      	bx	lr

08045018 <_fini>:
 8045018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804501a:	bf00      	nop
 804501c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804501e:	bc08      	pop	{r3}
 8045020:	469e      	mov	lr, r3
 8045022:	4770      	bx	lr
