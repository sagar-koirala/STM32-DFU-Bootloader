
FU_Bootloader_UART_F767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004148  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004348  08004348  00014348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043fc  080043fc  000280c8  2**0
                  CONTENTS
  4 .ARM          00000008  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004404  08004404  000280c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004408  08004408  00014408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800440c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000074  08004480  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08004480  000202fc  2**0
                  ALLOC
 11 .rxBuf        0001fb09  20000900  08004480  00020900  2**2
                  ALLOC
 12 .appData_Block 000000c8  08018000  08018000  00028000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  000280c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011802  00000000  00000000  000280f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a3d  00000000  00000000  000398f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a18  00000000  00000000  0003c338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000980  00000000  00000000  0003cd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000287eb  00000000  00000000  0003d6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012389  00000000  00000000  00065ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f30c3  00000000  00000000  00078244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0016b307  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001d5c  00000000  00000000  0016b358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000094f9  00000000  00000000  0016d0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08004330 	.word	0x08004330

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08004330 	.word	0x08004330

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <HAL_UARTEx_RxEventCallback>:
void handle_command_type_packet(uint8_t CMD);
void handle_metaData_type_packet();
void handle_response_type_packet();
void handle_fwDATA_type_packet();

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_UARTEx_RxEventCallback+0x2c>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d102      	bne.n	8000610 <HAL_UARTEx_RxEventCallback+0x1c>
		received_pckt_len = Size;
 800060a:	4a06      	ldr	r2, [pc, #24]	; (8000624 <HAL_UARTEx_RxEventCallback+0x30>)
 800060c:	887b      	ldrh	r3, [r7, #2]
 800060e:	8013      	strh	r3, [r2, #0]
	}
	HAL_GPIO_TogglePin(blueLED_GPIO_Port, blueLED_Pin);
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <HAL_UARTEx_RxEventCallback+0x34>)
 8000614:	f001 fcfb 	bl	800200e <HAL_GPIO_TogglePin>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40004400 	.word	0x40004400
 8000624:	20000090 	.word	0x20000090
 8000628:	40020400 	.word	0x40020400

0800062c <OTA_update>:

void OTA_update() {
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	memset(Rx_Buffer, 0, OTA_PCKT_MAX_SIZE);
 8000630:	f240 4209 	movw	r2, #1033	; 0x409
 8000634:	2100      	movs	r1, #0
 8000636:	481d      	ldr	r0, [pc, #116]	; (80006ac <OTA_update+0x80>)
 8000638:	f003 f9f0 	bl	8003a1c <memset>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx_Buffer, OTA_PCKT_MAX_SIZE); // ENABLE UART2 in DMA mode
 800063c:	f240 4209 	movw	r2, #1033	; 0x409
 8000640:	491a      	ldr	r1, [pc, #104]	; (80006ac <OTA_update+0x80>)
 8000642:	481b      	ldr	r0, [pc, #108]	; (80006b0 <OTA_update+0x84>)
 8000644:	f003 f998 	bl	8003978 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <OTA_update+0x88>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <OTA_update+0x88>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f022 0208 	bic.w	r2, r2, #8
 8000656:	601a      	str	r2, [r3, #0]
	while (FU_stat != FU_STAT_completed) {
 8000658:	e01c      	b.n	8000694 <OTA_update+0x68>
		// check if packet data is received
		if (received_pckt_len > 0) {
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <OTA_update+0x8c>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d018      	beq.n	8000694 <OTA_update+0x68>
			process_packet();
 8000662:	f000 f82f 	bl	80006c4 <process_packet>
			received_pckt_len = 0;
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <OTA_update+0x8c>)
 8000668:	2200      	movs	r2, #0
 800066a:	801a      	strh	r2, [r3, #0]
			memset(Rx_Buffer, 0, OTA_PCKT_MAX_SIZE);
 800066c:	f240 4209 	movw	r2, #1033	; 0x409
 8000670:	2100      	movs	r1, #0
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <OTA_update+0x80>)
 8000674:	f003 f9d2 	bl	8003a1c <memset>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx_Buffer, OTA_PCKT_MAX_SIZE); // ENABLE UART2 in DMA mode
 8000678:	f240 4209 	movw	r2, #1033	; 0x409
 800067c:	490b      	ldr	r1, [pc, #44]	; (80006ac <OTA_update+0x80>)
 800067e:	480c      	ldr	r0, [pc, #48]	; (80006b0 <OTA_update+0x84>)
 8000680:	f003 f97a 	bl	8003978 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <OTA_update+0x88>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <OTA_update+0x88>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f022 0208 	bic.w	r2, r2, #8
 8000692:	601a      	str	r2, [r3, #0]
	while (FU_stat != FU_STAT_completed) {
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <OTA_update+0x90>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b06      	cmp	r3, #6
 800069a:	d1de      	bne.n	800065a <OTA_update+0x2e>
		}
	}
	HAL_GPIO_WritePin(blueLED_GPIO_Port, blueLED_Pin, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	4807      	ldr	r0, [pc, #28]	; (80006c0 <OTA_update+0x94>)
 80006a2:	f001 fcae 	bl	8002002 <HAL_GPIO_WritePin>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20020000 	.word	0x20020000
 80006b0:	20000184 	.word	0x20000184
 80006b4:	200000c4 	.word	0x200000c4
 80006b8:	20000090 	.word	0x20000090
 80006bc:	2000009d 	.word	0x2000009d
 80006c0:	40020400 	.word	0x40020400

080006c4 <process_packet>:

static void process_packet() {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
	const bool isFirmwareUpdatePacket = Rx_Buffer[0] == OTA_PCKT_SOF
 80006ca:	4b36      	ldr	r3, [pc, #216]	; (80007a4 <process_packet+0xe0>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
			&& Rx_Buffer[received_pckt_len - 1] == OTA_PCKT_EOF;
 80006ce:	2baa      	cmp	r3, #170	; 0xaa
 80006d0:	d108      	bne.n	80006e4 <process_packet+0x20>
 80006d2:	4b35      	ldr	r3, [pc, #212]	; (80007a8 <process_packet+0xe4>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	4a32      	ldr	r2, [pc, #200]	; (80007a4 <process_packet+0xe0>)
 80006da:	5cd3      	ldrb	r3, [r2, r3]
 80006dc:	2bbb      	cmp	r3, #187	; 0xbb
 80006de:	d101      	bne.n	80006e4 <process_packet+0x20>
 80006e0:	2301      	movs	r3, #1
 80006e2:	e000      	b.n	80006e6 <process_packet+0x22>
 80006e4:	2300      	movs	r3, #0
	const bool isFirmwareUpdatePacket = Rx_Buffer[0] == OTA_PCKT_SOF
 80006e6:	73fb      	strb	r3, [r7, #15]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]
	firmwareUpdatePacketDataLength = ((uint16_t) Rx_Buffer[3] << 8)
 80006f0:	4b2c      	ldr	r3, [pc, #176]	; (80007a4 <process_packet+0xe0>)
 80006f2:	78db      	ldrb	r3, [r3, #3]
 80006f4:	021b      	lsls	r3, r3, #8
			| Rx_Buffer[2];
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <process_packet+0xe0>)
 80006fa:	789b      	ldrb	r3, [r3, #2]
 80006fc:	b21b      	sxth	r3, r3
 80006fe:	4313      	orrs	r3, r2
 8000700:	b21b      	sxth	r3, r3
 8000702:	b29a      	uxth	r2, r3
	firmwareUpdatePacketDataLength = ((uint16_t) Rx_Buffer[3] << 8)
 8000704:	4b29      	ldr	r3, [pc, #164]	; (80007ac <process_packet+0xe8>)
 8000706:	801a      	strh	r2, [r3, #0]
	const uint32_t firmwareUpdatePacketCRC =
			((uint32_t) Rx_Buffer[received_pckt_len - 2] << 24)
 8000708:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <process_packet+0xe4>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	3b02      	subs	r3, #2
 800070e:	4a25      	ldr	r2, [pc, #148]	; (80007a4 <process_packet+0xe0>)
 8000710:	5cd3      	ldrb	r3, [r2, r3]
 8000712:	061b      	lsls	r3, r3, #24
					| (Rx_Buffer[received_pckt_len - 3] << 16)
 8000714:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <process_packet+0xe4>)
 8000716:	8812      	ldrh	r2, [r2, #0]
 8000718:	3a03      	subs	r2, #3
 800071a:	4922      	ldr	r1, [pc, #136]	; (80007a4 <process_packet+0xe0>)
 800071c:	5c8a      	ldrb	r2, [r1, r2]
 800071e:	0412      	lsls	r2, r2, #16
 8000720:	4313      	orrs	r3, r2
					| (Rx_Buffer[received_pckt_len - 4] << 8)
 8000722:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <process_packet+0xe4>)
 8000724:	8812      	ldrh	r2, [r2, #0]
 8000726:	3a04      	subs	r2, #4
 8000728:	491e      	ldr	r1, [pc, #120]	; (80007a4 <process_packet+0xe0>)
 800072a:	5c8a      	ldrb	r2, [r1, r2]
 800072c:	0212      	lsls	r2, r2, #8
 800072e:	4313      	orrs	r3, r2
					| Rx_Buffer[received_pckt_len - 5];
 8000730:	4a1d      	ldr	r2, [pc, #116]	; (80007a8 <process_packet+0xe4>)
 8000732:	8812      	ldrh	r2, [r2, #0]
 8000734:	3a05      	subs	r2, #5
 8000736:	491b      	ldr	r1, [pc, #108]	; (80007a4 <process_packet+0xe0>)
 8000738:	5c8a      	ldrb	r2, [r1, r2]
	const uint32_t firmwareUpdatePacketCRC =
 800073a:	4313      	orrs	r3, r2
 800073c:	60bb      	str	r3, [r7, #8]
	const uint32_t calculatedCRC = HAL_CRC_Calculate(&hcrc,
			(uint32_t*) &Rx_Buffer[received_pckt_len
					- firmwareUpdatePacketDataLength - 5],
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <process_packet+0xe4>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	461a      	mov	r2, r3
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <process_packet+0xe8>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	3b05      	subs	r3, #5
			(uint32_t*) &Rx_Buffer[received_pckt_len
 800074c:	4a15      	ldr	r2, [pc, #84]	; (80007a4 <process_packet+0xe0>)
 800074e:	4413      	add	r3, r2
	const uint32_t calculatedCRC = HAL_CRC_Calculate(&hcrc,
 8000750:	4a16      	ldr	r2, [pc, #88]	; (80007ac <process_packet+0xe8>)
 8000752:	8812      	ldrh	r2, [r2, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	4816      	ldr	r0, [pc, #88]	; (80007b0 <process_packet+0xec>)
 8000758:	f000 fec4 	bl	80014e4 <HAL_CRC_Calculate>
 800075c:	6078      	str	r0, [r7, #4]
			firmwareUpdatePacketDataLength);
	const bool isCRCcorrect = firmwareUpdatePacketCRC == calculatedCRC;
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	429a      	cmp	r2, r3
 8000764:	bf0c      	ite	eq
 8000766:	2301      	moveq	r3, #1
 8000768:	2300      	movne	r3, #0
 800076a:	70fb      	strb	r3, [r7, #3]

	const uint8_t firmwareUpdatePacketType = Rx_Buffer[1];
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <process_packet+0xe0>)
 800076e:	785b      	ldrb	r3, [r3, #1]
 8000770:	70bb      	strb	r3, [r7, #2]

	if (!isFirmwareUpdatePacket || !isCRCcorrect) {
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	f083 0301 	eor.w	r3, r3, #1
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d105      	bne.n	800078a <process_packet+0xc6>
 800077e:	78fb      	ldrb	r3, [r7, #3]
 8000780:	f083 0301 	eor.w	r3, r3, #1
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d003      	beq.n	8000792 <process_packet+0xce>
		send_resp(OTA_PCKT_NACK);
 800078a:	2001      	movs	r0, #1
 800078c:	f000 f90a 	bl	80009a4 <send_resp>
 8000790:	e004      	b.n	800079c <process_packet+0xd8>
	} else {
		handle_packet_type(firmwareUpdatePacketType);
 8000792:	78bb      	ldrb	r3, [r7, #2]
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f80d 	bl	80007b4 <handle_packet_type>
	}
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20020000 	.word	0x20020000
 80007a8:	20000090 	.word	0x20000090
 80007ac:	2000009a 	.word	0x2000009a
 80007b0:	200000a0 	.word	0x200000a0

080007b4 <handle_packet_type>:

void handle_packet_type(uint8_t firmwareUpdatePacketType) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	switch (firmwareUpdatePacketType) {
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b03      	cmp	r3, #3
 80007c2:	d81a      	bhi.n	80007fa <handle_packet_type+0x46>
 80007c4:	a201      	add	r2, pc, #4	; (adr r2, 80007cc <handle_packet_type+0x18>)
 80007c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ca:	bf00      	nop
 80007cc:	080007dd 	.word	0x080007dd
 80007d0:	080007f5 	.word	0x080007f5
 80007d4:	080007e9 	.word	0x080007e9
 80007d8:	080007ef 	.word	0x080007ef
	case (OTA_PCKT_TYPE_CMD):
		handle_command_type_packet(Rx_Buffer[4]);
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <handle_packet_type+0x58>)
 80007de:	791b      	ldrb	r3, [r3, #4]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f815 	bl	8000810 <handle_command_type_packet>
		break;
 80007e6:	e00c      	b.n	8000802 <handle_packet_type+0x4e>
	case (OTA_PCKT_TYPE_mData):
		handle_metaData_type_packet();
 80007e8:	f000 f830 	bl	800084c <handle_metaData_type_packet>
		break;
 80007ec:	e009      	b.n	8000802 <handle_packet_type+0x4e>
	case (OTA_PCKT_TYPE_RESPONSE):
		handle_response_type_packet();
 80007ee:	f000 f849 	bl	8000884 <handle_response_type_packet>
		break;
 80007f2:	e006      	b.n	8000802 <handle_packet_type+0x4e>
	case (OTA_PCKT_TYPE_fwDATA):
		handle_fwDATA_type_packet();
 80007f4:	f000 f84e 	bl	8000894 <handle_fwDATA_type_packet>
		break;
 80007f8:	e003      	b.n	8000802 <handle_packet_type+0x4e>
	default:
		send_resp(OTA_PCKT_NACK);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f000 f8d2 	bl	80009a4 <send_resp>
		break;
 8000800:	bf00      	nop
	}
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20020000 	.word	0x20020000

08000810 <handle_command_type_packet>:

void handle_command_type_packet(uint8_t CMD) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	switch (CMD) {
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d002      	beq.n	8000826 <handle_command_type_packet+0x16>
 8000820:	2b01      	cmp	r3, #1
 8000822:	d00b      	beq.n	800083c <handle_command_type_packet+0x2c>
 8000824:	e006      	b.n	8000834 <handle_command_type_packet+0x24>
	case (OTA_CMD_START):
		FU_stat = FU_STAT_startCMD_received;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <handle_command_type_packet+0x38>)
 8000828:	2201      	movs	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
		send_resp(OTA_PCKT_ACK);
 800082c:	2000      	movs	r0, #0
 800082e:	f000 f8b9 	bl	80009a4 <send_resp>
		break;
 8000832:	e004      	b.n	800083e <handle_command_type_packet+0x2e>
	case (OTA_CMD_END):
		// handle end command here
		break;
	default:
		send_resp(OTA_PCKT_NACK);
 8000834:	2001      	movs	r0, #1
 8000836:	f000 f8b5 	bl	80009a4 <send_resp>
		break;
 800083a:	e000      	b.n	800083e <handle_command_type_packet+0x2e>
		break;
 800083c:	bf00      	nop
	}
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000009d 	.word	0x2000009d

0800084c <handle_metaData_type_packet>:

void handle_metaData_type_packet() {
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
	FU_stat = FU_STAT_mData_received;
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <handle_metaData_type_packet+0x30>)
 8000854:	2202      	movs	r2, #2
 8000856:	701a      	strb	r2, [r3, #0]
	FW_mData_t FW_mData_ph;
	memcpy(&FW_mData_ph, &Rx_Buffer[4], sizeof(FW_mData_t));
 8000858:	4a09      	ldr	r2, [pc, #36]	; (8000880 <handle_metaData_type_packet+0x34>)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	3204      	adds	r2, #4
 800085e:	6810      	ldr	r0, [r2, #0]
 8000860:	6851      	ldr	r1, [r2, #4]
 8000862:	c303      	stmia	r3!, {r0, r1}
 8000864:	8911      	ldrh	r1, [r2, #8]
 8000866:	7a92      	ldrb	r2, [r2, #10]
 8000868:	8019      	strh	r1, [r3, #0]
 800086a:	709a      	strb	r2, [r3, #2]
	send_resp(OTA_PCKT_ACK);
 800086c:	2000      	movs	r0, #0
 800086e:	f000 f899 	bl	80009a4 <send_resp>
}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000009d 	.word	0x2000009d
 8000880:	20020000 	.word	0x20020000

08000884 <handle_response_type_packet>:

void handle_response_type_packet() {
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
	// handle response type packet here
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <handle_fwDATA_type_packet>:

void handle_fwDATA_type_packet() {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
	FU_stat = FU_STAT_FWdownload_started;
 800089a:	4b3a      	ldr	r3, [pc, #232]	; (8000984 <handle_fwDATA_type_packet+0xf0>)
 800089c:	2203      	movs	r2, #3
 800089e:	701a      	strb	r2, [r3, #0]
//	bool bChunkMismatch = 0;
	if ((((uint16_t) Rx_Buffer[5] << 8) | Rx_Buffer[4])
 80008a0:	4b39      	ldr	r3, [pc, #228]	; (8000988 <handle_fwDATA_type_packet+0xf4>)
 80008a2:	795b      	ldrb	r3, [r3, #5]
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	4a38      	ldr	r2, [pc, #224]	; (8000988 <handle_fwDATA_type_packet+0xf4>)
 80008a8:	7912      	ldrb	r2, [r2, #4]
 80008aa:	431a      	orrs	r2, r3
			!= (nFW_received_chunk + 1)) {
 80008ac:	4b37      	ldr	r3, [pc, #220]	; (800098c <handle_fwDATA_type_packet+0xf8>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
	if ((((uint16_t) Rx_Buffer[5] << 8) | Rx_Buffer[4])
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d006      	beq.n	80008c4 <handle_fwDATA_type_packet+0x30>
		bChunkMismatch = 1;
 80008b6:	4b36      	ldr	r3, [pc, #216]	; (8000990 <handle_fwDATA_type_packet+0xfc>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
		send_resp(OTA_PCKT_NACK);
 80008bc:	2001      	movs	r0, #1
 80008be:	f000 f871 	bl	80009a4 <send_resp>
			send_resp(OTA_PCKT_NACK);
		} else {
			send_resp(OTA_PCKT_ACK);
		}
	}
}
 80008c2:	e05a      	b.n	800097a <handle_fwDATA_type_packet+0xe6>
		nFW_received_chunk = ((uint16_t) Rx_Buffer[5] << 8) | Rx_Buffer[4];
 80008c4:	4b30      	ldr	r3, [pc, #192]	; (8000988 <handle_fwDATA_type_packet+0xf4>)
 80008c6:	795b      	ldrb	r3, [r3, #5]
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <handle_fwDATA_type_packet+0xf4>)
 80008ce:	791b      	ldrb	r3, [r3, #4]
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4b2c      	ldr	r3, [pc, #176]	; (800098c <handle_fwDATA_type_packet+0xf8>)
 80008da:	801a      	strh	r2, [r3, #0]
			writeSuccess = unlock_flash();
 80008dc:	f000 f892 	bl	8000a04 <unlock_flash>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	bf14      	ite	ne
 80008e6:	2301      	movne	r3, #1
 80008e8:	2300      	moveq	r3, #0
 80008ea:	71fb      	strb	r3, [r7, #7]
			if (writeSuccess != HAL_OK)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d134      	bne.n	800095c <handle_fwDATA_type_packet+0xc8>
			if (nFW_received_bytes == 0) {
 80008f2:	4b28      	ldr	r3, [pc, #160]	; (8000994 <handle_fwDATA_type_packet+0x100>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d109      	bne.n	800090e <handle_fwDATA_type_packet+0x7a>
				writeSuccess = erase_flash_sectors(9U, 2);
 80008fa:	2102      	movs	r1, #2
 80008fc:	2009      	movs	r0, #9
 80008fe:	f000 f899 	bl	8000a34 <erase_flash_sectors>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	bf14      	ite	ne
 8000908:	2301      	movne	r3, #1
 800090a:	2300      	moveq	r3, #0
 800090c:	71fb      	strb	r3, [r7, #7]
			if (writeSuccess != HAL_OK)
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d125      	bne.n	8000960 <handle_fwDATA_type_packet+0xcc>
			writeSuccess = write_to_flash(
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <handle_fwDATA_type_packet+0x100>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <handle_fwDATA_type_packet+0x104>)
 800091a:	4413      	add	r3, r2
 800091c:	4a1f      	ldr	r2, [pc, #124]	; (800099c <handle_fwDATA_type_packet+0x108>)
 800091e:	8812      	ldrh	r2, [r2, #0]
 8000920:	491f      	ldr	r1, [pc, #124]	; (80009a0 <handle_fwDATA_type_packet+0x10c>)
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f8a7 	bl	8000a76 <write_to_flash>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	bf14      	ite	ne
 800092e:	2301      	movne	r3, #1
 8000930:	2300      	moveq	r3, #0
 8000932:	71fb      	strb	r3, [r7, #7]
			if (writeSuccess != HAL_OK)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d114      	bne.n	8000964 <handle_fwDATA_type_packet+0xd0>
				nFW_received_bytes += firmwareUpdatePacketDataLength;
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <handle_fwDATA_type_packet+0x108>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <handle_fwDATA_type_packet+0x100>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4413      	add	r3, r2
 8000946:	4a13      	ldr	r2, [pc, #76]	; (8000994 <handle_fwDATA_type_packet+0x100>)
 8000948:	6013      	str	r3, [r2, #0]
			writeSuccess = lock_flash();
 800094a:	f000 f867 	bl	8000a1c <lock_flash>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf14      	ite	ne
 8000954:	2301      	movne	r3, #1
 8000956:	2300      	moveq	r3, #0
 8000958:	71fb      	strb	r3, [r7, #7]
 800095a:	e004      	b.n	8000966 <handle_fwDATA_type_packet+0xd2>
				break;
 800095c:	bf00      	nop
 800095e:	e002      	b.n	8000966 <handle_fwDATA_type_packet+0xd2>
				break;
 8000960:	bf00      	nop
 8000962:	e000      	b.n	8000966 <handle_fwDATA_type_packet+0xd2>
				break;
 8000964:	bf00      	nop
		if (writeSuccess != HAL_OK) {
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d003      	beq.n	8000974 <handle_fwDATA_type_packet+0xe0>
			send_resp(OTA_PCKT_NACK);
 800096c:	2001      	movs	r0, #1
 800096e:	f000 f819 	bl	80009a4 <send_resp>
}
 8000972:	e002      	b.n	800097a <handle_fwDATA_type_packet+0xe6>
			send_resp(OTA_PCKT_ACK);
 8000974:	2000      	movs	r0, #0
 8000976:	f000 f815 	bl	80009a4 <send_resp>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000009d 	.word	0x2000009d
 8000988:	20020000 	.word	0x20020000
 800098c:	20000098 	.word	0x20000098
 8000990:	2000009c 	.word	0x2000009c
 8000994:	20000094 	.word	0x20000094
 8000998:	08140000 	.word	0x08140000
 800099c:	2000009a 	.word	0x2000009a
 80009a0:	20020006 	.word	0x20020006

080009a4 <send_resp>:

static void send_resp(uint8_t type) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
	OTA_RESP rsp = { .sof = OTA_PCKT_SOF, .packet_type = OTA_PCKT_TYPE_RESPONSE,
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	811a      	strh	r2, [r3, #8]
 80009ba:	23aa      	movs	r3, #170	; 0xaa
 80009bc:	733b      	strb	r3, [r7, #12]
 80009be:	2303      	movs	r3, #3
 80009c0:	737b      	strb	r3, [r7, #13]
 80009c2:	2301      	movs	r3, #1
 80009c4:	81fb      	strh	r3, [r7, #14]
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	743b      	strb	r3, [r7, #16]
 80009ca:	23bb      	movs	r3, #187	; 0xbb
 80009cc:	757b      	strb	r3, [r7, #21]
			.data_len = 1u, .status = type, .eof =
			OTA_PCKT_EOF };
	rsp.crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &rsp.status, 1);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	3304      	adds	r3, #4
 80009d4:	2201      	movs	r2, #1
 80009d6:	4619      	mov	r1, r3
 80009d8:	4808      	ldr	r0, [pc, #32]	; (80009fc <send_resp+0x58>)
 80009da:	f000 fd83 	bl	80014e4 <HAL_CRC_Calculate>
 80009de:	4603      	mov	r3, r0
 80009e0:	f8c7 3011 	str.w	r3, [r7, #17]
	//send response
	HAL_UART_Transmit(&huart2, (uint8_t*) &rsp, sizeof(OTA_RESP), 100);
 80009e4:	f107 010c 	add.w	r1, r7, #12
 80009e8:	2364      	movs	r3, #100	; 0x64
 80009ea:	220a      	movs	r2, #10
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <send_resp+0x5c>)
 80009ee:	f002 fea6 	bl	800373e <HAL_UART_Transmit>
}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000a0 	.word	0x200000a0
 8000a00:	20000184 	.word	0x20000184

08000a04 <unlock_flash>:
//	SysTick->CTRL = 0;
//	SysTick->LOAD = 0;
//	SysTick->VAL = 0;
//}

static HAL_StatusTypeDef unlock_flash() {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_FLASH_Unlock();
 8000a0a:	f001 f8c3 	bl	8001b94 <HAL_FLASH_Unlock>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	return ret;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <lock_flash>:

static HAL_StatusTypeDef lock_flash() {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_FLASH_Lock();
 8000a22:	f001 f8cf 	bl	8001bc4 <HAL_FLASH_Lock>
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	return ret;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <erase_flash_sectors>:

static HAL_StatusTypeDef erase_flash_sectors(uint32_t sector,
		uint32_t num_sectors) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret = HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Sector = sector;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbSectors = num_sectors;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000a50:	2302      	movs	r3, #2
 8000a52:	623b      	str	r3, [r7, #32]

	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000a54:	f107 020c 	add.w	r2, r7, #12
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 f980 	bl	8001d64 <HAL_FLASHEx_Erase>
 8000a64:	4603      	mov	r3, r0
 8000a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return ret;
 8000a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3728      	adds	r7, #40	; 0x28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <write_to_flash>:

// Write data to flash at a specified address
static HAL_StatusTypeDef write_to_flash(uint32_t flash_address, uint8_t *data,
		uint16_t data_len) {
 8000a76:	b5b0      	push	{r4, r5, r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	4613      	mov	r3, r2
 8000a82:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_OK;
 8000a84:	2300      	movs	r3, #0
 8000a86:	75fb      	strb	r3, [r7, #23]

	for (int i = 0; i < data_len; i++) {
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	e017      	b.n	8000abe <write_to_flash+0x48>
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_address + i,
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	18d1      	adds	r1, r2, r3
				data[i]);
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_address + i,
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	461c      	mov	r4, r3
 8000aa2:	4615      	mov	r5, r2
 8000aa4:	4622      	mov	r2, r4
 8000aa6:	462b      	mov	r3, r5
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 f8c7 	bl	8001c3c <HAL_FLASH_Program>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	75fb      	strb	r3, [r7, #23]
		if (ret != HAL_OK) {
 8000ab2:	7dfb      	ldrb	r3, [r7, #23]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d107      	bne.n	8000ac8 <write_to_flash+0x52>
	for (int i = 0; i < data_len; i++) {
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	3301      	adds	r3, #1
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	dbe3      	blt.n	8000a8e <write_to_flash+0x18>
 8000ac6:	e000      	b.n	8000aca <write_to_flash+0x54>
			break;
 8000ac8:	bf00      	nop
		}
	}

	return ret;
 8000aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bdb0      	pop	{r4, r5, r7, pc}

08000ad4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000ad4:	b510      	push	{r4, lr}
 8000ad6:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ad8:	2400      	movs	r4, #0
 8000ada:	9400      	str	r4, [sp, #0]
 8000adc:	9401      	str	r4, [sp, #4]
 8000ade:	9402      	str	r4, [sp, #8]
 8000ae0:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ae2:	f000 fc05 	bl	80012f0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	f88d 3000 	strb.w	r3, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000aec:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x20020000;
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <MPU_Config+0x54>)
 8000af2:	9201      	str	r2, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8000af4:	2209      	movs	r2, #9
 8000af6:	f88d 2008 	strb.w	r2, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000afa:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000afe:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b02:	2203      	movs	r2, #3
 8000b04:	f88d 200b 	strb.w	r2, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b08:	f88d 300c 	strb.w	r3, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b0c:	f88d 300d 	strb.w	r3, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b10:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b14:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b18:	4668      	mov	r0, sp
 8000b1a:	f000 fc07 	bl	800132c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b1e:	2004      	movs	r0, #4
 8000b20:	f000 fbf4 	bl	800130c <HAL_MPU_Enable>

}
 8000b24:	b004      	add	sp, #16
 8000b26:	bd10      	pop	{r4, pc}
 8000b28:	20020000 	.word	0x20020000

08000b2c <MX_GPIO_Init>:
{
 8000b2c:	b530      	push	{r4, r5, lr}
 8000b2e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	2400      	movs	r4, #0
 8000b32:	9403      	str	r4, [sp, #12]
 8000b34:	9404      	str	r4, [sp, #16]
 8000b36:	9405      	str	r4, [sp, #20]
 8000b38:	9406      	str	r4, [sp, #24]
 8000b3a:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <MX_GPIO_Init+0x80>)
 8000b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b40:	f042 0204 	orr.w	r2, r2, #4
 8000b44:	631a      	str	r2, [r3, #48]	; 0x30
 8000b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b48:	f002 0204 	and.w	r2, r2, #4
 8000b4c:	9200      	str	r2, [sp, #0]
 8000b4e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b52:	f042 0202 	orr.w	r2, r2, #2
 8000b56:	631a      	str	r2, [r3, #48]	; 0x30
 8000b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b5a:	f002 0202 	and.w	r2, r2, #2
 8000b5e:	9201      	str	r2, [sp, #4]
 8000b60:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b64:	f042 0208 	orr.w	r2, r2, #8
 8000b68:	631a      	str	r2, [r3, #48]	; 0x30
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	9302      	str	r3, [sp, #8]
 8000b72:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, greenLED_Pin|blueLED_Pin, GPIO_PIN_RESET);
 8000b74:	4d0e      	ldr	r5, [pc, #56]	; (8000bb0 <MX_GPIO_Init+0x84>)
 8000b76:	4622      	mov	r2, r4
 8000b78:	2181      	movs	r1, #129	; 0x81
 8000b7a:	4628      	mov	r0, r5
 8000b7c:	f001 fa41 	bl	8002002 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = usr_btn_Pin;
 8000b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b84:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(usr_btn_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	a903      	add	r1, sp, #12
 8000b8c:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <MX_GPIO_Init+0x88>)
 8000b8e:	f001 f935 	bl	8001dfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = greenLED_Pin|blueLED_Pin;
 8000b92:	2381      	movs	r3, #129	; 0x81
 8000b94:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	a903      	add	r1, sp, #12
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	f001 f92b 	bl	8001dfc <HAL_GPIO_Init>
}
 8000ba6:	b009      	add	sp, #36	; 0x24
 8000ba8:	bd30      	pop	{r4, r5, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020400 	.word	0x40020400
 8000bb4:	40020800 	.word	0x40020800

08000bb8 <MX_DMA_Init>:
{
 8000bb8:	b500      	push	{lr}
 8000bba:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_DMA_Init+0x40>)
 8000bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bc0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	200e      	movs	r0, #14
 8000bd6:	f000 fb33 	bl	8001240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000bda:	200e      	movs	r0, #14
 8000bdc:	f000 fb66 	bl	80012ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	4611      	mov	r1, r2
 8000be4:	2010      	movs	r0, #16
 8000be6:	f000 fb2b 	bl	8001240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000bea:	2010      	movs	r0, #16
 8000bec:	f000 fb5e 	bl	80012ac <HAL_NVIC_EnableIRQ>
}
 8000bf0:	b003      	add	sp, #12
 8000bf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <go2app>:
void go2app() {
 8000bfc:	b510      	push	{r4, lr}
			void)= (void*) (*(volatile uint32_t *)(APP2_FLASH_ADDR +4));
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <go2app+0x14>)
 8000c00:	685c      	ldr	r4, [r3, #4]
	HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2101      	movs	r1, #1
 8000c06:	4803      	ldr	r0, [pc, #12]	; (8000c14 <go2app+0x18>)
 8000c08:	f001 f9fb 	bl	8002002 <HAL_GPIO_WritePin>
	jumpToApp();	//call the application reset handler
 8000c0c:	47a0      	blx	r4
}
 8000c0e:	bd10      	pop	{r4, pc}
 8000c10:	08040000 	.word	0x08040000
 8000c14:	40020400 	.word	0x40020400

08000c18 <HAL_UART_TxCpltCallback>:
	if (huart->Instance == USART3) {
 8000c18:	6802      	ldr	r2, [r0, #0]
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <HAL_UART_TxCpltCallback+0x14>)
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d000      	beq.n	8000c22 <HAL_UART_TxCpltCallback+0xa>
}
 8000c20:	4770      	bx	lr
		printReady_flag = 1;
 8000c22:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <HAL_UART_TxCpltCallback+0x18>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
}
 8000c28:	e7fa      	b.n	8000c20 <HAL_UART_TxCpltCallback+0x8>
 8000c2a:	bf00      	nop
 8000c2c:	40004800 	.word	0x40004800
 8000c30:	20000000 	.word	0x20000000

08000c34 <myprintf>:
void myprintf(const char *str) {
 8000c34:	b510      	push	{r4, lr}
 8000c36:	4604      	mov	r4, r0
	while (!printReady_flag)
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <myprintf+0x24>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0fb      	beq.n	8000c38 <myprintf+0x4>
	HAL_UART_Transmit_IT(&huart3, (uint8_t*) str, strlen(str));
 8000c40:	4620      	mov	r0, r4
 8000c42:	f7ff fafd 	bl	8000240 <strlen>
 8000c46:	b282      	uxth	r2, r0
 8000c48:	4621      	mov	r1, r4
 8000c4a:	4804      	ldr	r0, [pc, #16]	; (8000c5c <myprintf+0x28>)
 8000c4c:	f002 f8c4 	bl	8002dd8 <HAL_UART_Transmit_IT>
	printReady_flag = 0;
 8000c50:	4b01      	ldr	r3, [pc, #4]	; (8000c58 <myprintf+0x24>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
}
 8000c56:	bd10      	pop	{r4, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	2000020c 	.word	0x2000020c

08000c60 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c62:	e7fe      	b.n	8000c62 <Error_Handler+0x2>

08000c64 <MX_USART3_UART_Init>:
{
 8000c64:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8000c66:	480b      	ldr	r0, [pc, #44]	; (8000c94 <MX_USART3_UART_Init+0x30>)
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_USART3_UART_Init+0x34>)
 8000c6a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000c6c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000c70:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	2300      	movs	r3, #0
 8000c74:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c76:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c78:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c82:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c84:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c86:	f002 fdf2 	bl	800386e <HAL_UART_Init>
 8000c8a:	b900      	cbnz	r0, 8000c8e <MX_USART3_UART_Init+0x2a>
}
 8000c8c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000c8e:	f7ff ffe7 	bl	8000c60 <Error_Handler>
 8000c92:	bf00      	nop
 8000c94:	2000020c 	.word	0x2000020c
 8000c98:	40004800 	.word	0x40004800

08000c9c <MX_USART2_UART_Init>:
{
 8000c9c:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8000c9e:	480b      	ldr	r0, [pc, #44]	; (8000ccc <MX_USART2_UART_Init+0x30>)
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USART2_UART_Init+0x34>)
 8000ca2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000ca4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000ca8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	2300      	movs	r3, #0
 8000cac:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cae:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cbc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cbe:	f002 fdd6 	bl	800386e <HAL_UART_Init>
 8000cc2:	b900      	cbnz	r0, 8000cc6 <MX_USART2_UART_Init+0x2a>
}
 8000cc4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cc6:	f7ff ffcb 	bl	8000c60 <Error_Handler>
 8000cca:	bf00      	nop
 8000ccc:	20000184 	.word	0x20000184
 8000cd0:	40004400 	.word	0x40004400

08000cd4 <MX_CRC_Init>:
{
 8000cd4:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8000cd6:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <MX_CRC_Init+0x24>)
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <MX_CRC_Init+0x28>)
 8000cda:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ce0:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000ce2:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ce4:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cea:	f000 fbbb 	bl	8001464 <HAL_CRC_Init>
 8000cee:	b900      	cbnz	r0, 8000cf2 <MX_CRC_Init+0x1e>
}
 8000cf0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cf2:	f7ff ffb5 	bl	8000c60 <Error_Handler>
 8000cf6:	bf00      	nop
 8000cf8:	200000a0 	.word	0x200000a0
 8000cfc:	40023000 	.word	0x40023000

08000d00 <SystemClock_Config>:
{
 8000d00:	b500      	push	{lr}
 8000d02:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d04:	2234      	movs	r2, #52	; 0x34
 8000d06:	2100      	movs	r1, #0
 8000d08:	a807      	add	r0, sp, #28
 8000d0a:	f002 fe87 	bl	8003a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0e:	2300      	movs	r3, #0
 8000d10:	9302      	str	r3, [sp, #8]
 8000d12:	9303      	str	r3, [sp, #12]
 8000d14:	9304      	str	r3, [sp, #16]
 8000d16:	9305      	str	r3, [sp, #20]
 8000d18:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4a19      	ldr	r2, [pc, #100]	; (8000d80 <SystemClock_Config+0x80>)
 8000d1c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000d1e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000d22:	6411      	str	r1, [r2, #64]	; 0x40
 8000d24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000d26:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000d2a:	9200      	str	r2, [sp, #0]
 8000d2c:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d2e:	4915      	ldr	r1, [pc, #84]	; (8000d84 <SystemClock_Config+0x84>)
 8000d30:	680a      	ldr	r2, [r1, #0]
 8000d32:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d3a:	600a      	str	r2, [r1, #0]
 8000d3c:	680a      	ldr	r2, [r1, #0]
 8000d3e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000d42:	9201      	str	r2, [sp, #4]
 8000d44:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d46:	2202      	movs	r2, #2
 8000d48:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d4e:	2210      	movs	r2, #16
 8000d50:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d52:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d54:	a807      	add	r0, sp, #28
 8000d56:	f001 f963 	bl	8002020 <HAL_RCC_OscConfig>
 8000d5a:	b968      	cbnz	r0, 8000d78 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d60:	2100      	movs	r1, #0
 8000d62:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d66:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d68:	9106      	str	r1, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d6a:	a802      	add	r0, sp, #8
 8000d6c:	f001 fbcc 	bl	8002508 <HAL_RCC_ClockConfig>
 8000d70:	b920      	cbnz	r0, 8000d7c <SystemClock_Config+0x7c>
}
 8000d72:	b015      	add	sp, #84	; 0x54
 8000d74:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000d78:	f7ff ff72 	bl	8000c60 <Error_Handler>
    Error_Handler();
 8000d7c:	f7ff ff70 	bl	8000c60 <Error_Handler>
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40007000 	.word	0x40007000

08000d88 <main>:
{
 8000d88:	b530      	push	{r4, r5, lr}
 8000d8a:	b083      	sub	sp, #12
  MPU_Config();
 8000d8c:	f7ff fea2 	bl	8000ad4 <MPU_Config>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d94:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d98:	4b39      	ldr	r3, [pc, #228]	; (8000e80 <main+0xf8>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000da0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000da4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000dae:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000db0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000db4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000db8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000dbc:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dc0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000dc4:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8000dc8:	e000      	b.n	8000dcc <main+0x44>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000dca:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000dcc:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dd0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000dd4:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8000dd8:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000ddc:	4928      	ldr	r1, [pc, #160]	; (8000e80 <main+0xf8>)
 8000dde:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000de2:	4613      	mov	r3, r2
 8000de4:	3a01      	subs	r2, #1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f2      	bne.n	8000dd0 <main+0x48>
    } while(sets-- != 0U);
 8000dea:	1e43      	subs	r3, r0, #1
 8000dec:	2800      	cmp	r0, #0
 8000dee:	d1ec      	bne.n	8000dca <main+0x42>
 8000df0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000df4:	694b      	ldr	r3, [r1, #20]
 8000df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfa:	614b      	str	r3, [r1, #20]
 8000dfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e00:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000e04:	f000 f9e6 	bl	80011d4 <HAL_Init>
  SystemClock_Config();
 8000e08:	f7ff ff7a 	bl	8000d00 <SystemClock_Config>
  MX_GPIO_Init();
 8000e0c:	f7ff fe8e 	bl	8000b2c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e10:	f7ff fed2 	bl	8000bb8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000e14:	f7ff ff26 	bl	8000c64 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000e18:	f7ff ff40 	bl	8000c9c <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000e1c:	f7ff ff5a 	bl	8000cd4 <MX_CRC_Init>
	snprintf((char*) printBuffer, sizeof(printBuffer),
 8000e20:	4d18      	ldr	r5, [pc, #96]	; (8000e84 <main+0xfc>)
 8000e22:	2401      	movs	r4, #1
 8000e24:	9400      	str	r4, [sp, #0]
 8000e26:	2300      	movs	r3, #0
 8000e28:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <main+0x100>)
 8000e2a:	2132      	movs	r1, #50	; 0x32
 8000e2c:	4628      	mov	r0, r5
 8000e2e:	f002 fdfd 	bl	8003a2c <sniprintf>
	myprintf((char*) printBuffer);
 8000e32:	4628      	mov	r0, r5
 8000e34:	f7ff fefe 	bl	8000c34 <myprintf>
	HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, 1); // Turn the BL indicator ON
 8000e38:	4622      	mov	r2, r4
 8000e3a:	4621      	mov	r1, r4
 8000e3c:	4813      	ldr	r0, [pc, #76]	; (8000e8c <main+0x104>)
 8000e3e:	f001 f8e0 	bl	8002002 <HAL_GPIO_WritePin>
	myprintf("Press user button for  OTA update mode..\n");
 8000e42:	4813      	ldr	r0, [pc, #76]	; (8000e90 <main+0x108>)
 8000e44:	f7ff fef6 	bl	8000c34 <myprintf>
	uint32_t waitTime_start = HAL_GetTick();
 8000e48:	f000 f9e2 	bl	8001210 <HAL_GetTick>
 8000e4c:	4605      	mov	r5, r0
		OTA_Pin_state = HAL_GPIO_ReadPin(usr_btn_GPIO_Port, usr_btn_Pin);
 8000e4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e52:	4810      	ldr	r0, [pc, #64]	; (8000e94 <main+0x10c>)
 8000e54:	f001 f8ce 	bl	8001ff4 <HAL_GPIO_ReadPin>
 8000e58:	4604      	mov	r4, r0
	} while (HAL_GetTick() - waitTime_start < 4000 && OTA_Pin_state == 0);
 8000e5a:	f000 f9d9 	bl	8001210 <HAL_GetTick>
 8000e5e:	1b40      	subs	r0, r0, r5
 8000e60:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 8000e64:	d201      	bcs.n	8000e6a <main+0xe2>
 8000e66:	2c00      	cmp	r4, #0
 8000e68:	d0f1      	beq.n	8000e4e <main+0xc6>
	if (OTA_Pin_state == 1) {
 8000e6a:	2c01      	cmp	r4, #1
 8000e6c:	d002      	beq.n	8000e74 <main+0xec>
	go2app();
 8000e6e:	f7ff fec5 	bl	8000bfc <go2app>
	while (1) {
 8000e72:	e7fe      	b.n	8000e72 <main+0xea>
		myprintf("Starting OTA Update!!\r\n");
 8000e74:	4808      	ldr	r0, [pc, #32]	; (8000e98 <main+0x110>)
 8000e76:	f7ff fedd 	bl	8000c34 <myprintf>
		OTA_update();
 8000e7a:	f7ff fbd7 	bl	800062c <OTA_update>
 8000e7e:	e7f6      	b.n	8000e6e <main+0xe6>
 8000e80:	e000ed00 	.word	0xe000ed00
 8000e84:	20000294 	.word	0x20000294
 8000e88:	08004348 	.word	0x08004348
 8000e8c:	40020400 	.word	0x40020400
 8000e90:	08004364 	.word	0x08004364
 8000e94:	40020800 	.word	0x40020800
 8000e98:	08004390 	.word	0x08004390

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_MspInit+0x2c>)
 8000ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ea6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eaa:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000eae:	9200      	str	r2, [sp, #0]
 8000eb0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000eb8:	645a      	str	r2, [r3, #68]	; 0x44
 8000eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec4:	b002      	add	sp, #8
 8000ec6:	4770      	bx	lr
 8000ec8:	40023800 	.word	0x40023800

08000ecc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000ecc:	6802      	ldr	r2, [r0, #0]
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_CRC_MspInit+0x28>)
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d000      	beq.n	8000ed6 <HAL_CRC_MspInit+0xa>
 8000ed4:	4770      	bx	lr
{
 8000ed6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ede:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000eee:	b002      	add	sp, #8
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40023000 	.word	0x40023000

08000ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef8:	b530      	push	{r4, r5, lr}
 8000efa:	b0af      	sub	sp, #188	; 0xbc
 8000efc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	2100      	movs	r1, #0
 8000f00:	9129      	str	r1, [sp, #164]	; 0xa4
 8000f02:	912a      	str	r1, [sp, #168]	; 0xa8
 8000f04:	912b      	str	r1, [sp, #172]	; 0xac
 8000f06:	912c      	str	r1, [sp, #176]	; 0xb0
 8000f08:	912d      	str	r1, [sp, #180]	; 0xb4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0a:	2290      	movs	r2, #144	; 0x90
 8000f0c:	a805      	add	r0, sp, #20
 8000f0e:	f002 fd85 	bl	8003a1c <memset>
  if(huart->Instance==USART2)
 8000f12:	6823      	ldr	r3, [r4, #0]
 8000f14:	4a52      	ldr	r2, [pc, #328]	; (8001060 <HAL_UART_MspInit+0x168>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d004      	beq.n	8000f24 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8000f1a:	4a52      	ldr	r2, [pc, #328]	; (8001064 <HAL_UART_MspInit+0x16c>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d04e      	beq.n	8000fbe <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f20:	b02f      	add	sp, #188	; 0xbc
 8000f22:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f28:	a805      	add	r0, sp, #20
 8000f2a:	f001 fbc9 	bl	80026c0 <HAL_RCCEx_PeriphCLKConfig>
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	d13f      	bne.n	8000fb2 <HAL_UART_MspInit+0xba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f32:	4b4d      	ldr	r3, [pc, #308]	; (8001068 <HAL_UART_MspInit+0x170>)
 8000f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f36:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f3a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f3e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000f42:	9201      	str	r2, [sp, #4]
 8000f44:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f48:	f042 0208 	orr.w	r2, r2, #8
 8000f4c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	f003 0308 	and.w	r3, r3, #8
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f58:	2360      	movs	r3, #96	; 0x60
 8000f5a:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2500      	movs	r5, #0
 8000f62:	952b      	str	r5, [sp, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	932c      	str	r3, [sp, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f68:	2307      	movs	r3, #7
 8000f6a:	932d      	str	r3, [sp, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f6c:	a929      	add	r1, sp, #164	; 0xa4
 8000f6e:	483f      	ldr	r0, [pc, #252]	; (800106c <HAL_UART_MspInit+0x174>)
 8000f70:	f000 ff44 	bl	8001dfc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000f74:	483e      	ldr	r0, [pc, #248]	; (8001070 <HAL_UART_MspInit+0x178>)
 8000f76:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <HAL_UART_MspInit+0x17c>)
 8000f78:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000f7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f7e:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f80:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f82:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f88:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f8a:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f8c:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000f8e:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f90:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f92:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f94:	f000 fb84 	bl	80016a0 <HAL_DMA_Init>
 8000f98:	b970      	cbnz	r0, 8000fb8 <HAL_UART_MspInit+0xc0>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f9a:	4b35      	ldr	r3, [pc, #212]	; (8001070 <HAL_UART_MspInit+0x178>)
 8000f9c:	6763      	str	r3, [r4, #116]	; 0x74
 8000f9e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	2026      	movs	r0, #38	; 0x26
 8000fa6:	f000 f94b 	bl	8001240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000faa:	2026      	movs	r0, #38	; 0x26
 8000fac:	f000 f97e 	bl	80012ac <HAL_NVIC_EnableIRQ>
 8000fb0:	e7b6      	b.n	8000f20 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8000fb2:	f7ff fe55 	bl	8000c60 <Error_Handler>
 8000fb6:	e7bc      	b.n	8000f32 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8000fb8:	f7ff fe52 	bl	8000c60 <Error_Handler>
 8000fbc:	e7ed      	b.n	8000f9a <HAL_UART_MspInit+0xa2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc2:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc4:	a805      	add	r0, sp, #20
 8000fc6:	f001 fb7b 	bl	80026c0 <HAL_RCCEx_PeriphCLKConfig>
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d141      	bne.n	8001052 <HAL_UART_MspInit+0x15a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <HAL_UART_MspInit+0x170>)
 8000fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000fd6:	641a      	str	r2, [r3, #64]	; 0x40
 8000fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fda:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000fde:	9203      	str	r2, [sp, #12]
 8000fe0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe4:	f042 0208 	orr.w	r2, r2, #8
 8000fe8:	631a      	str	r2, [r3, #48]	; 0x30
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	9304      	str	r3, [sp, #16]
 8000ff2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ff4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ff8:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2500      	movs	r5, #0
 8001000:	952b      	str	r5, [sp, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	932c      	str	r3, [sp, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001006:	2307      	movs	r3, #7
 8001008:	932d      	str	r3, [sp, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100a:	a929      	add	r1, sp, #164	; 0xa4
 800100c:	4817      	ldr	r0, [pc, #92]	; (800106c <HAL_UART_MspInit+0x174>)
 800100e:	f000 fef5 	bl	8001dfc <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001012:	4819      	ldr	r0, [pc, #100]	; (8001078 <HAL_UART_MspInit+0x180>)
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_UART_MspInit+0x184>)
 8001016:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001018:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800101c:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800101e:	2340      	movs	r3, #64	; 0x40
 8001020:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001022:	60c5      	str	r5, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001028:	6103      	str	r3, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800102a:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800102c:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800102e:	61c5      	str	r5, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001030:	6205      	str	r5, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001032:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001034:	f000 fb34 	bl	80016a0 <HAL_DMA_Init>
 8001038:	b970      	cbnz	r0, 8001058 <HAL_UART_MspInit+0x160>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_UART_MspInit+0x180>)
 800103c:	6723      	str	r3, [r4, #112]	; 0x70
 800103e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	4611      	mov	r1, r2
 8001044:	2027      	movs	r0, #39	; 0x27
 8001046:	f000 f8fb 	bl	8001240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800104a:	2027      	movs	r0, #39	; 0x27
 800104c:	f000 f92e 	bl	80012ac <HAL_NVIC_EnableIRQ>
}
 8001050:	e766      	b.n	8000f20 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8001052:	f7ff fe05 	bl	8000c60 <Error_Handler>
 8001056:	e7ba      	b.n	8000fce <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001058:	f7ff fe02 	bl	8000c60 <Error_Handler>
 800105c:	e7ed      	b.n	800103a <HAL_UART_MspInit+0x142>
 800105e:	bf00      	nop
 8001060:	40004400 	.word	0x40004400
 8001064:	40004800 	.word	0x40004800
 8001068:	40023800 	.word	0x40023800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	200000c4 	.word	0x200000c4
 8001074:	40026088 	.word	0x40026088
 8001078:	20000124 	.word	0x20000124
 800107c:	40026058 	.word	0x40026058

08001080 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler>

08001082 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <HardFault_Handler>

08001084 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler>

08001086 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <BusFault_Handler>

08001088 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler>

0800108a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108a:	4770      	bx	lr

0800108c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	4770      	bx	lr

08001090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001090:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001092:	f000 f8b1 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001096:	bd08      	pop	{r3, pc}

08001098 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001098:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800109a:	4802      	ldr	r0, [pc, #8]	; (80010a4 <DMA1_Stream3_IRQHandler+0xc>)
 800109c:	f000 fbfe 	bl	800189c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80010a0:	bd08      	pop	{r3, pc}
 80010a2:	bf00      	nop
 80010a4:	20000124 	.word	0x20000124

080010a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <DMA1_Stream5_IRQHandler+0xc>)
 80010ac:	f000 fbf6 	bl	800189c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010b0:	bd08      	pop	{r3, pc}
 80010b2:	bf00      	nop
 80010b4:	200000c4 	.word	0x200000c4

080010b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010ba:	4802      	ldr	r0, [pc, #8]	; (80010c4 <USART2_IRQHandler+0xc>)
 80010bc:	f001 ff60 	bl	8002f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010c0:	bd08      	pop	{r3, pc}
 80010c2:	bf00      	nop
 80010c4:	20000184 	.word	0x20000184

080010c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010ca:	4802      	ldr	r0, [pc, #8]	; (80010d4 <USART3_IRQHandler+0xc>)
 80010cc:	f001 ff58 	bl	8002f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010d0:	bd08      	pop	{r3, pc}
 80010d2:	bf00      	nop
 80010d4:	2000020c 	.word	0x2000020c

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b510      	push	{r4, lr}
 80010da:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010dc:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <_sbrk+0x38>)
 80010de:	490d      	ldr	r1, [pc, #52]	; (8001114 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <_sbrk+0x40>)
 80010e2:	6800      	ldr	r0, [r0, #0]
 80010e4:	b140      	cbz	r0, 80010f8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e6:	480c      	ldr	r0, [pc, #48]	; (8001118 <_sbrk+0x40>)
 80010e8:	6800      	ldr	r0, [r0, #0]
 80010ea:	4403      	add	r3, r0
 80010ec:	1a52      	subs	r2, r2, r1
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d806      	bhi.n	8001100 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80010f2:	4a09      	ldr	r2, [pc, #36]	; (8001118 <_sbrk+0x40>)
 80010f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80010f6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80010f8:	4807      	ldr	r0, [pc, #28]	; (8001118 <_sbrk+0x40>)
 80010fa:	4c08      	ldr	r4, [pc, #32]	; (800111c <_sbrk+0x44>)
 80010fc:	6004      	str	r4, [r0, #0]
 80010fe:	e7f2      	b.n	80010e6 <_sbrk+0xe>
    errno = ENOMEM;
 8001100:	f002 fc62 	bl	80039c8 <__errno>
 8001104:	230c      	movs	r3, #12
 8001106:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	e7f3      	b.n	80010f6 <_sbrk+0x1e>
 800110e:	bf00      	nop
 8001110:	20080000 	.word	0x20080000
 8001114:	00000400 	.word	0x00000400
 8001118:	200002c8 	.word	0x200002c8
 800111c:	20000300 	.word	0x20000300

08001120 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001120:	4a03      	ldr	r2, [pc, #12]	; (8001130 <SystemInit+0x10>)
 8001122:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001126:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800112a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800116c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800113a:	490e      	ldr	r1, [pc, #56]	; (8001174 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800113c:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001150:	4c0b      	ldr	r4, [pc, #44]	; (8001180 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800115e:	f7ff ffdf 	bl	8001120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001162:	f002 fc37 	bl	80039d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001166:	f7ff fe0f 	bl	8000d88 <main>
  bx  lr    
 800116a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800116c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001178:	0800440c 	.word	0x0800440c
  ldr r2, =_sbss
 800117c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001180:	200002fc 	.word	0x200002fc

08001184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC_IRQHandler>
	...

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b510      	push	{r4, lr}
 800118a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_InitTick+0x40>)
 800118e:	7818      	ldrb	r0, [r3, #0]
 8001190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001194:	fbb3 f3f0 	udiv	r3, r3, r0
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <HAL_InitTick+0x44>)
 800119a:	6810      	ldr	r0, [r2, #0]
 800119c:	fbb0 f0f3 	udiv	r0, r0, r3
 80011a0:	f000 f892 	bl	80012c8 <HAL_SYSTICK_Config>
 80011a4:	b968      	cbnz	r0, 80011c2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	2c0f      	cmp	r4, #15
 80011a8:	d901      	bls.n	80011ae <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80011aa:	2001      	movs	r0, #1
 80011ac:	e00a      	b.n	80011c4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ae:	2200      	movs	r2, #0
 80011b0:	4621      	mov	r1, r4
 80011b2:	f04f 30ff 	mov.w	r0, #4294967295
 80011b6:	f000 f843 	bl	8001240 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_InitTick+0x48>)
 80011bc:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2000      	movs	r0, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80011c2:	2001      	movs	r0, #1
}
 80011c4:	bd10      	pop	{r4, pc}
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004
 80011d0:	2000000c 	.word	0x2000000c

080011d4 <HAL_Init>:
{
 80011d4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d6:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <HAL_Init+0x20>)
 80011d8:	6813      	ldr	r3, [r2, #0]
 80011da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011de:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f81b 	bl	800121c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e6:	200f      	movs	r0, #15
 80011e8:	f7ff ffce 	bl	8001188 <HAL_InitTick>
  HAL_MspInit();
 80011ec:	f7ff fe56 	bl	8000e9c <HAL_MspInit>
}
 80011f0:	2000      	movs	r0, #0
 80011f2:	bd08      	pop	{r3, pc}
 80011f4:	40023c00 	.word	0x40023c00

080011f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011f8:	4a03      	ldr	r2, [pc, #12]	; (8001208 <HAL_IncTick+0x10>)
 80011fa:	6811      	ldr	r1, [r2, #0]
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_IncTick+0x14>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	440b      	add	r3, r1
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	200002cc 	.word	0x200002cc
 800120c:	20000008 	.word	0x20000008

08001210 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001210:	4b01      	ldr	r3, [pc, #4]	; (8001218 <HAL_GetTick+0x8>)
 8001212:	6818      	ldr	r0, [r3, #0]
}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	200002cc 	.word	0x200002cc

0800121c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800121c:	4906      	ldr	r1, [pc, #24]	; (8001238 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800121e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001220:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001224:	041b      	lsls	r3, r3, #16
 8001226:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001228:	0200      	lsls	r0, r0, #8
 800122a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800122e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001230:	4a02      	ldr	r2, [pc, #8]	; (800123c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001232:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001234:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00
 800123c:	05fa0000 	.word	0x05fa0000

08001240 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001240:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_NVIC_SetPriority+0x60>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124a:	f1c3 0c07 	rsb	ip, r3, #7
 800124e:	f1bc 0f04 	cmp.w	ip, #4
 8001252:	bf28      	it	cs
 8001254:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001258:	f103 0e04 	add.w	lr, r3, #4
 800125c:	f1be 0f06 	cmp.w	lr, #6
 8001260:	d914      	bls.n	800128c <HAL_NVIC_SetPriority+0x4c>
 8001262:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 3eff 	mov.w	lr, #4294967295
 8001268:	fa0e fc0c 	lsl.w	ip, lr, ip
 800126c:	ea21 010c 	bic.w	r1, r1, ip
 8001270:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001272:	fa0e f303 	lsl.w	r3, lr, r3
 8001276:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800127c:	2800      	cmp	r0, #0
 800127e:	db07      	blt.n	8001290 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	0109      	lsls	r1, r1, #4
 8001282:	b2c9      	uxtb	r1, r1
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <HAL_NVIC_SetPriority+0x64>)
 8001286:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001288:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128c:	2300      	movs	r3, #0
 800128e:	e7e9      	b.n	8001264 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	f000 000f 	and.w	r0, r0, #15
 8001294:	0109      	lsls	r1, r1, #4
 8001296:	b2c9      	uxtb	r1, r1
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <HAL_NVIC_SetPriority+0x68>)
 800129a:	5419      	strb	r1, [r3, r0]
 800129c:	e7f4      	b.n	8001288 <HAL_NVIC_SetPriority+0x48>
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00
 80012a4:	e000e400 	.word	0xe000e400
 80012a8:	e000ed14 	.word	0xe000ed14

080012ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80012ac:	2800      	cmp	r0, #0
 80012ae:	db07      	blt.n	80012c0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b0:	f000 021f 	and.w	r2, r0, #31
 80012b4:	0940      	lsrs	r0, r0, #5
 80012b6:	2301      	movs	r3, #1
 80012b8:	4093      	lsls	r3, r2
 80012ba:	4a02      	ldr	r2, [pc, #8]	; (80012c4 <HAL_NVIC_EnableIRQ+0x18>)
 80012bc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000e100 	.word	0xe000e100

080012c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	3801      	subs	r0, #1
 80012ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80012ce:	d20b      	bcs.n	80012e8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80012d4:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <HAL_SYSTICK_Config+0x24>)
 80012d8:	21f0      	movs	r1, #240	; 0xf0
 80012da:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012de:	2000      	movs	r0, #0
 80012e0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e2:	2207      	movs	r2, #7
 80012e4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012e8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012f0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <HAL_MPU_Disable+0x18>)
 80012f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012fe:	2200      	movs	r2, #0
 8001300:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800130c:	f040 0001 	orr.w	r0, r0, #1
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_MPU_Enable+0x1c>)
 8001312:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001318:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800131e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001322:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800132c:	7842      	ldrb	r2, [r0, #1]
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_MPU_ConfigRegion+0x5c>)
 8001330:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8001334:	7803      	ldrb	r3, [r0, #0]
 8001336:	b1fb      	cbz	r3, 8001378 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001338:	6843      	ldr	r3, [r0, #4]
 800133a:	4a13      	ldr	r2, [pc, #76]	; (8001388 <HAL_MPU_ConfigRegion+0x5c>)
 800133c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001340:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001342:	7ac3      	ldrb	r3, [r0, #11]
 8001344:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001346:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800134a:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800134c:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001350:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001352:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001356:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001358:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800135c:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800135e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001362:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001364:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001368:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800136a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800136e:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001370:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001372:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8001376:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_MPU_ConfigRegion+0x5c>)
 800137a:	2200      	movs	r2, #0
 800137c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8001380:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800138c:	b510      	push	{r4, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800138e:	f04f 0c00 	mov.w	ip, #0
 8001392:	e014      	b.n	80013be <CRC_Handle_8+0x32>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001394:	f811 402c 	ldrb.w	r4, [r1, ip, lsl #2]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001398:	eb01 0e8c 	add.w	lr, r1, ip, lsl #2
 800139c:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80013a0:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80013a2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80013a6:	f89e 4002 	ldrb.w	r4, [lr, #2]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80013aa:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80013ae:	f89e e003 	ldrb.w	lr, [lr, #3]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80013b2:	ea43 030e 	orr.w	r3, r3, lr
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80013b6:	6804      	ldr	r4, [r0, #0]
 80013b8:	6023      	str	r3, [r4, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80013ba:	f10c 0c01 	add.w	ip, ip, #1
 80013be:	ebbc 0f92 	cmp.w	ip, r2, lsr #2
 80013c2:	d3e7      	bcc.n	8001394 <CRC_Handle_8+0x8>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80013c4:	f012 0203 	ands.w	r2, r2, #3
 80013c8:	d005      	beq.n	80013d6 <CRC_Handle_8+0x4a>
  {
    if ((BufferLength % 4U) == 1U)
 80013ca:	2a01      	cmp	r2, #1
 80013cc:	d006      	beq.n	80013dc <CRC_Handle_8+0x50>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
    }
    if ((BufferLength % 4U) == 2U)
 80013ce:	2a02      	cmp	r2, #2
 80013d0:	d009      	beq.n	80013e6 <CRC_Handle_8+0x5a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;
    }
    if ((BufferLength % 4U) == 3U)
 80013d2:	2a03      	cmp	r2, #3
 80013d4:	d011      	beq.n	80013fa <CRC_Handle_8+0x6e>
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80013d6:	6803      	ldr	r3, [r0, #0]
 80013d8:	6818      	ldr	r0, [r3, #0]
}
 80013da:	bd10      	pop	{r4, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80013dc:	6803      	ldr	r3, [r0, #0]
 80013de:	f811 402c 	ldrb.w	r4, [r1, ip, lsl #2]
 80013e2:	701c      	strb	r4, [r3, #0]
 80013e4:	e7f3      	b.n	80013ce <CRC_Handle_8+0x42>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80013e6:	f811 402c 	ldrb.w	r4, [r1, ip, lsl #2]
 80013ea:	eb01 038c 	add.w	r3, r1, ip, lsl #2
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80013f4:	6804      	ldr	r4, [r0, #0]
      *pReg = data;
 80013f6:	8023      	strh	r3, [r4, #0]
 80013f8:	e7eb      	b.n	80013d2 <CRC_Handle_8+0x46>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80013fa:	f811 202c 	ldrb.w	r2, [r1, ip, lsl #2]
 80013fe:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8001402:	784b      	ldrb	r3, [r1, #1]
 8001404:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001408:	6802      	ldr	r2, [r0, #0]
      *pReg = data;
 800140a:	8013      	strh	r3, [r2, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800140c:	6803      	ldr	r3, [r0, #0]
 800140e:	788a      	ldrb	r2, [r1, #2]
 8001410:	701a      	strb	r2, [r3, #0]
 8001412:	e7e0      	b.n	80013d6 <CRC_Handle_8+0x4a>

08001414 <CRC_Handle_16>:
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001414:	2300      	movs	r3, #0
 8001416:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800141a:	d218      	bcs.n	800144e <CRC_Handle_16+0x3a>
{
 800141c:	b430      	push	{r4, r5}
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800141e:	f831 c023 	ldrh.w	ip, [r1, r3, lsl #2]
 8001422:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8001426:	8864      	ldrh	r4, [r4, #2]
 8001428:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800142c:	6805      	ldr	r5, [r0, #0]
 800142e:	602c      	str	r4, [r5, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001430:	3301      	adds	r3, #1
 8001432:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8001436:	d3f2      	bcc.n	800141e <CRC_Handle_16+0xa>
  }
  if ((BufferLength % 2U) != 0U)
 8001438:	f012 0f01 	tst.w	r2, #1
 800143c:	d003      	beq.n	8001446 <CRC_Handle_16+0x32>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800143e:	6802      	ldr	r2, [r0, #0]
    *pReg = pBuffer[2U * i];
 8001440:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8001444:	8013      	strh	r3, [r2, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001446:	6803      	ldr	r3, [r0, #0]
 8001448:	6818      	ldr	r0, [r3, #0]
}
 800144a:	bc30      	pop	{r4, r5}
 800144c:	4770      	bx	lr
  if ((BufferLength % 2U) != 0U)
 800144e:	f012 0f01 	tst.w	r2, #1
 8001452:	d003      	beq.n	800145c <CRC_Handle_16+0x48>
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001454:	6802      	ldr	r2, [r0, #0]
    *pReg = pBuffer[2U * i];
 8001456:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 800145a:	8013      	strh	r3, [r2, #0]
  return hcrc->Instance->DR;
 800145c:	6803      	ldr	r3, [r0, #0]
 800145e:	6818      	ldr	r0, [r3, #0]
}
 8001460:	4770      	bx	lr
	...

08001464 <HAL_CRC_Init>:
  if (hcrc == NULL)
 8001464:	2800      	cmp	r0, #0
 8001466:	d038      	beq.n	80014da <HAL_CRC_Init+0x76>
{
 8001468:	b510      	push	{r4, lr}
 800146a:	4604      	mov	r4, r0
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800146c:	7f43      	ldrb	r3, [r0, #29]
 800146e:	b31b      	cbz	r3, 80014b8 <HAL_CRC_Init+0x54>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001470:	2302      	movs	r3, #2
 8001472:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001474:	7923      	ldrb	r3, [r4, #4]
 8001476:	bb1b      	cbnz	r3, 80014c0 <HAL_CRC_Init+0x5c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <HAL_CRC_Init+0x7c>)
 800147c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800147e:	6822      	ldr	r2, [r4, #0]
 8001480:	6893      	ldr	r3, [r2, #8]
 8001482:	f023 0318 	bic.w	r3, r3, #24
 8001486:	6093      	str	r3, [r2, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001488:	7963      	ldrb	r3, [r4, #5]
 800148a:	bb13      	cbnz	r3, 80014d2 <HAL_CRC_Init+0x6e>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800148c:	6823      	ldr	r3, [r4, #0]
 800148e:	f04f 32ff 	mov.w	r2, #4294967295
 8001492:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001494:	6822      	ldr	r2, [r4, #0]
 8001496:	6893      	ldr	r3, [r2, #8]
 8001498:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800149c:	6961      	ldr	r1, [r4, #20]
 800149e:	430b      	orrs	r3, r1
 80014a0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80014a2:	6822      	ldr	r2, [r4, #0]
 80014a4:	6893      	ldr	r3, [r2, #8]
 80014a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014aa:	69a1      	ldr	r1, [r4, #24]
 80014ac:	430b      	orrs	r3, r1
 80014ae:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80014b0:	2301      	movs	r3, #1
 80014b2:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80014b4:	2000      	movs	r0, #0
}
 80014b6:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80014b8:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80014ba:	f7ff fd07 	bl	8000ecc <HAL_CRC_MspInit>
 80014be:	e7d7      	b.n	8001470 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80014c0:	68e2      	ldr	r2, [r4, #12]
 80014c2:	68a1      	ldr	r1, [r4, #8]
 80014c4:	4620      	mov	r0, r4
 80014c6:	f000 f835 	bl	8001534 <HAL_CRCEx_Polynomial_Set>
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d0dc      	beq.n	8001488 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 80014ce:	2001      	movs	r0, #1
 80014d0:	e7f1      	b.n	80014b6 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	6922      	ldr	r2, [r4, #16]
 80014d6:	611a      	str	r2, [r3, #16]
 80014d8:	e7dc      	b.n	8001494 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 80014da:	2001      	movs	r0, #1
}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	04c11db7 	.word	0x04c11db7

080014e4 <HAL_CRC_Calculate>:
{
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	4604      	mov	r4, r0
  hcrc->State = HAL_CRC_STATE_BUSY;
 80014e8:	2302      	movs	r3, #2
 80014ea:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80014ec:	6800      	ldr	r0, [r0, #0]
 80014ee:	6883      	ldr	r3, [r0, #8]
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 80014f6:	6a23      	ldr	r3, [r4, #32]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d017      	beq.n	800152c <HAL_CRC_Calculate+0x48>
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d00f      	beq.n	8001520 <HAL_CRC_Calculate+0x3c>
 8001500:	2b01      	cmp	r3, #1
 8001502:	d00f      	beq.n	8001524 <HAL_CRC_Calculate+0x40>
 8001504:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8001506:	2301      	movs	r3, #1
 8001508:	7763      	strb	r3, [r4, #29]
}
 800150a:	bd38      	pop	{r3, r4, r5, pc}
        hcrc->Instance->DR = pBuffer[index];
 800150c:	6820      	ldr	r0, [r4, #0]
 800150e:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8001512:	6005      	str	r5, [r0, #0]
      for (index = 0U; index < BufferLength; index++)
 8001514:	3301      	adds	r3, #1
 8001516:	4293      	cmp	r3, r2
 8001518:	d3f8      	bcc.n	800150c <HAL_CRC_Calculate+0x28>
      temp = hcrc->Instance->DR;
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	6818      	ldr	r0, [r3, #0]
      break;
 800151e:	e7f2      	b.n	8001506 <HAL_CRC_Calculate+0x22>
  switch (hcrc->InputDataFormat)
 8001520:	2300      	movs	r3, #0
 8001522:	e7f8      	b.n	8001516 <HAL_CRC_Calculate+0x32>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001524:	4620      	mov	r0, r4
 8001526:	f7ff ff31 	bl	800138c <CRC_Handle_8>
      break;
 800152a:	e7ec      	b.n	8001506 <HAL_CRC_Calculate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800152c:	4620      	mov	r0, r4
 800152e:	f7ff ff71 	bl	8001414 <CRC_Handle_16>
      break;
 8001532:	e7e8      	b.n	8001506 <HAL_CRC_Calculate+0x22>

08001534 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001534:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001536:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001538:	461c      	mov	r4, r3
 800153a:	3b01      	subs	r3, #1
 800153c:	b134      	cbz	r4, 800154c <HAL_CRCEx_Polynomial_Set+0x18>
 800153e:	f003 0c1f 	and.w	ip, r3, #31
 8001542:	fa21 fc0c 	lsr.w	ip, r1, ip
 8001546:	f01c 0f01 	tst.w	ip, #1
 800154a:	d0f5      	beq.n	8001538 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800154c:	2a18      	cmp	r2, #24
 800154e:	d822      	bhi.n	8001596 <HAL_CRCEx_Polynomial_Set+0x62>
 8001550:	e8df f002 	tbb	[pc, r2]
 8001554:	2121210f 	.word	0x2121210f
 8001558:	21212121 	.word	0x21212121
 800155c:	2121211d 	.word	0x2121211d
 8001560:	21212121 	.word	0x21212121
 8001564:	21212119 	.word	0x21212119
 8001568:	21212121 	.word	0x21212121
 800156c:	0d          	.byte	0x0d
 800156d:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800156e:	2b06      	cmp	r3, #6
 8001570:	d815      	bhi.n	800159e <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001572:	6803      	ldr	r3, [r0, #0]
 8001574:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001576:	6801      	ldr	r1, [r0, #0]
 8001578:	688b      	ldr	r3, [r1, #8]
 800157a:	f023 0318 	bic.w	r3, r3, #24
 800157e:	431a      	orrs	r2, r3
 8001580:	608a      	str	r2, [r1, #8]
 8001582:	2000      	movs	r0, #0
 8001584:	e008      	b.n	8001598 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 8001586:	2b07      	cmp	r3, #7
 8001588:	d9f3      	bls.n	8001572 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 800158a:	2001      	movs	r0, #1
 800158c:	e004      	b.n	8001598 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 800158e:	2b0f      	cmp	r3, #15
 8001590:	d9ef      	bls.n	8001572 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8001592:	2001      	movs	r0, #1
 8001594:	e000      	b.n	8001598 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 8001596:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 8001598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800159c:	4770      	bx	lr
        status =   HAL_ERROR;
 800159e:	2001      	movs	r0, #1
 80015a0:	e7fa      	b.n	8001598 <HAL_CRCEx_Polynomial_Set+0x64>

080015a2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015a2:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015a4:	6805      	ldr	r5, [r0, #0]
 80015a6:	682c      	ldr	r4, [r5, #0]
 80015a8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80015ac:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015ae:	6804      	ldr	r4, [r0, #0]
 80015b0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015b2:	6883      	ldr	r3, [r0, #8]
 80015b4:	2b40      	cmp	r3, #64	; 0x40
 80015b6:	d005      	beq.n	80015c4 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80015b8:	6803      	ldr	r3, [r0, #0]
 80015ba:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80015bc:	6803      	ldr	r3, [r0, #0]
 80015be:	60da      	str	r2, [r3, #12]
  }
}
 80015c0:	bc30      	pop	{r4, r5}
 80015c2:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80015c4:	6803      	ldr	r3, [r0, #0]
 80015c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80015c8:	6803      	ldr	r3, [r0, #0]
 80015ca:	60d9      	str	r1, [r3, #12]
 80015cc:	e7f8      	b.n	80015c0 <DMA_SetConfig+0x1e>
	...

080015d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015d0:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015d2:	6801      	ldr	r1, [r0, #0]
 80015d4:	b2ca      	uxtb	r2, r1
 80015d6:	3a10      	subs	r2, #16
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <DMA_CalcBaseAndBitshift+0x34>)
 80015da:	fba3 4302 	umull	r4, r3, r3, r2
 80015de:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015e0:	4c09      	ldr	r4, [pc, #36]	; (8001608 <DMA_CalcBaseAndBitshift+0x38>)
 80015e2:	5ce3      	ldrb	r3, [r4, r3]
 80015e4:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015e6:	2a5f      	cmp	r2, #95	; 0x5f
 80015e8:	d907      	bls.n	80015fa <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <DMA_CalcBaseAndBitshift+0x3c>)
 80015ec:	400b      	ands	r3, r1
 80015ee:	3304      	adds	r3, #4
 80015f0:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80015f2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80015f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015f8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <DMA_CalcBaseAndBitshift+0x3c>)
 80015fc:	400b      	ands	r3, r1
 80015fe:	6583      	str	r3, [r0, #88]	; 0x58
 8001600:	e7f7      	b.n	80015f2 <DMA_CalcBaseAndBitshift+0x22>
 8001602:	bf00      	nop
 8001604:	aaaaaaab 	.word	0xaaaaaaab
 8001608:	080043c0 	.word	0x080043c0
 800160c:	fffffc00 	.word	0xfffffc00

08001610 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001610:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001612:	6982      	ldr	r2, [r0, #24]
 8001614:	b992      	cbnz	r2, 800163c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001616:	2b01      	cmp	r3, #1
 8001618:	d00a      	beq.n	8001630 <DMA_CheckFifoParam+0x20>
 800161a:	2b02      	cmp	r3, #2
 800161c:	d002      	beq.n	8001624 <DMA_CheckFifoParam+0x14>
 800161e:	b10b      	cbz	r3, 8001624 <DMA_CheckFifoParam+0x14>
 8001620:	2000      	movs	r0, #0
 8001622:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001624:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001626:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800162a:	d128      	bne.n	800167e <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 800162c:	2000      	movs	r0, #0
 800162e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001630:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001632:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001636:	d024      	beq.n	8001682 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001638:	2000      	movs	r0, #0
 800163a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800163c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001640:	d009      	beq.n	8001656 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001642:	2b02      	cmp	r3, #2
 8001644:	d925      	bls.n	8001692 <DMA_CheckFifoParam+0x82>
 8001646:	2b03      	cmp	r3, #3
 8001648:	d125      	bne.n	8001696 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800164a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800164c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001650:	d123      	bne.n	800169a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001652:	2000      	movs	r0, #0
 8001654:	4770      	bx	lr
    switch (tmp)
 8001656:	2b03      	cmp	r3, #3
 8001658:	d803      	bhi.n	8001662 <DMA_CheckFifoParam+0x52>
 800165a:	e8df f003 	tbb	[pc, r3]
 800165e:	0414      	.short	0x0414
 8001660:	0a14      	.short	0x0a14
 8001662:	2000      	movs	r0, #0
 8001664:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001666:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001668:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800166c:	d10d      	bne.n	800168a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800166e:	2000      	movs	r0, #0
 8001670:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001672:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001674:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001678:	d009      	beq.n	800168e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800167a:	2000      	movs	r0, #0
 800167c:	4770      	bx	lr
        status = HAL_ERROR;
 800167e:	2001      	movs	r0, #1
 8001680:	4770      	bx	lr
        status = HAL_ERROR;
 8001682:	2001      	movs	r0, #1
 8001684:	4770      	bx	lr
      status = HAL_ERROR;
 8001686:	2001      	movs	r0, #1
 8001688:	4770      	bx	lr
        status = HAL_ERROR;
 800168a:	2001      	movs	r0, #1
 800168c:	4770      	bx	lr
        status = HAL_ERROR;
 800168e:	2001      	movs	r0, #1
 8001690:	4770      	bx	lr
      status = HAL_ERROR;
 8001692:	2001      	movs	r0, #1
 8001694:	4770      	bx	lr
    switch (tmp)
 8001696:	2000      	movs	r0, #0
 8001698:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800169a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 800169c:	4770      	bx	lr
	...

080016a0 <HAL_DMA_Init>:
{
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff fdb4 	bl	8001210 <HAL_GetTick>
  if(hdma == NULL)
 80016a8:	2c00      	cmp	r4, #0
 80016aa:	d05b      	beq.n	8001764 <HAL_DMA_Init+0xc4>
 80016ac:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80016ae:	2302      	movs	r3, #2
 80016b0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80016b4:	2300      	movs	r3, #0
 80016b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80016ba:	6822      	ldr	r2, [r4, #0]
 80016bc:	6813      	ldr	r3, [r2, #0]
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	f012 0f01 	tst.w	r2, #1
 80016cc:	d00a      	beq.n	80016e4 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ce:	f7ff fd9f 	bl	8001210 <HAL_GetTick>
 80016d2:	1b43      	subs	r3, r0, r5
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d9f5      	bls.n	80016c4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d8:	2320      	movs	r3, #32
 80016da:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016dc:	2003      	movs	r0, #3
 80016de:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80016e2:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80016e4:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016e6:	4820      	ldr	r0, [pc, #128]	; (8001768 <HAL_DMA_Init+0xc8>)
 80016e8:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ea:	6861      	ldr	r1, [r4, #4]
 80016ec:	68a2      	ldr	r2, [r4, #8]
 80016ee:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f0:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016f2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f4:	6921      	ldr	r1, [r4, #16]
 80016f6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f8:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fa:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016fc:	69a1      	ldr	r1, [r4, #24]
 80016fe:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001700:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001702:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001704:	6a21      	ldr	r1, [r4, #32]
 8001706:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001708:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800170a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800170c:	2904      	cmp	r1, #4
 800170e:	d01e      	beq.n	800174e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001710:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001712:	6826      	ldr	r6, [r4, #0]
 8001714:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001716:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800171a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800171c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800171e:	2b04      	cmp	r3, #4
 8001720:	d107      	bne.n	8001732 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001722:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001724:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001726:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001728:	b11b      	cbz	r3, 8001732 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800172a:	4620      	mov	r0, r4
 800172c:	f7ff ff70 	bl	8001610 <DMA_CheckFifoParam>
 8001730:	b990      	cbnz	r0, 8001758 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001732:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001734:	4620      	mov	r0, r4
 8001736:	f7ff ff4b 	bl	80015d0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800173a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800173c:	233f      	movs	r3, #63	; 0x3f
 800173e:	4093      	lsls	r3, r2
 8001740:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001742:	2000      	movs	r0, #0
 8001744:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001746:	2301      	movs	r3, #1
 8001748:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800174c:	e7c9      	b.n	80016e2 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800174e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001750:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001752:	4301      	orrs	r1, r0
 8001754:	430a      	orrs	r2, r1
 8001756:	e7db      	b.n	8001710 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001758:	2340      	movs	r3, #64	; 0x40
 800175a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800175c:	2001      	movs	r0, #1
 800175e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001762:	e7be      	b.n	80016e2 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001764:	2001      	movs	r0, #1
 8001766:	e7bc      	b.n	80016e2 <HAL_DMA_Init+0x42>
 8001768:	e010803f 	.word	0xe010803f

0800176c <HAL_DMA_Start_IT>:
{
 800176c:	b538      	push	{r3, r4, r5, lr}
 800176e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001770:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001772:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001776:	2801      	cmp	r0, #1
 8001778:	d030      	beq.n	80017dc <HAL_DMA_Start_IT+0x70>
 800177a:	2001      	movs	r0, #1
 800177c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001780:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001784:	b2c0      	uxtb	r0, r0
 8001786:	2801      	cmp	r0, #1
 8001788:	d004      	beq.n	8001794 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800178a:	2300      	movs	r3, #0
 800178c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8001790:	2002      	movs	r0, #2
}
 8001792:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001794:	2002      	movs	r0, #2
 8001796:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800179a:	2000      	movs	r0, #0
 800179c:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff feff 	bl	80015a2 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80017a6:	233f      	movs	r3, #63	; 0x3f
 80017a8:	4093      	lsls	r3, r2
 80017aa:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017ac:	6822      	ldr	r2, [r4, #0]
 80017ae:	6813      	ldr	r3, [r2, #0]
 80017b0:	f043 0316 	orr.w	r3, r3, #22
 80017b4:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80017b6:	6822      	ldr	r2, [r4, #0]
 80017b8:	6953      	ldr	r3, [r2, #20]
 80017ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017be:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80017c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017c2:	b123      	cbz	r3, 80017ce <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 80017c4:	6822      	ldr	r2, [r4, #0]
 80017c6:	6813      	ldr	r3, [r2, #0]
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80017ce:	6822      	ldr	r2, [r4, #0]
 80017d0:	6813      	ldr	r3, [r2, #0]
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017d8:	2000      	movs	r0, #0
 80017da:	e7da      	b.n	8001792 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 80017dc:	2002      	movs	r0, #2
 80017de:	e7d8      	b.n	8001792 <HAL_DMA_Start_IT+0x26>

080017e0 <HAL_DMA_Abort>:
{
 80017e0:	b570      	push	{r4, r5, r6, lr}
 80017e2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017e4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80017e6:	f7ff fd13 	bl	8001210 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ea:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d006      	beq.n	8001802 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80017f8:	2300      	movs	r3, #0
 80017fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80017fe:	2001      	movs	r0, #1
}
 8001800:	bd70      	pop	{r4, r5, r6, pc}
 8001802:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001804:	6822      	ldr	r2, [r4, #0]
 8001806:	6813      	ldr	r3, [r2, #0]
 8001808:	f023 0316 	bic.w	r3, r3, #22
 800180c:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800180e:	6822      	ldr	r2, [r4, #0]
 8001810:	6953      	ldr	r3, [r2, #20]
 8001812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001816:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001818:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800181a:	b1e3      	cbz	r3, 8001856 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800181c:	6822      	ldr	r2, [r4, #0]
 800181e:	6813      	ldr	r3, [r2, #0]
 8001820:	f023 0308 	bic.w	r3, r3, #8
 8001824:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001826:	6822      	ldr	r2, [r4, #0]
 8001828:	6813      	ldr	r3, [r2, #0]
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f013 0f01 	tst.w	r3, #1
 8001838:	d011      	beq.n	800185e <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800183a:	f7ff fce9 	bl	8001210 <HAL_GetTick>
 800183e:	1b43      	subs	r3, r0, r5
 8001840:	2b05      	cmp	r3, #5
 8001842:	d9f5      	bls.n	8001830 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001844:	2320      	movs	r3, #32
 8001846:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001848:	2003      	movs	r0, #3
 800184a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800184e:	2300      	movs	r3, #0
 8001850:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001854:	e7d4      	b.n	8001800 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001856:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1df      	bne.n	800181c <HAL_DMA_Abort+0x3c>
 800185c:	e7e3      	b.n	8001826 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800185e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001860:	233f      	movs	r3, #63	; 0x3f
 8001862:	4093      	lsls	r3, r2
 8001864:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001866:	2301      	movs	r3, #1
 8001868:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800186c:	2000      	movs	r0, #0
 800186e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8001872:	e7c5      	b.n	8001800 <HAL_DMA_Abort+0x20>

08001874 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001874:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d003      	beq.n	8001886 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001882:	2001      	movs	r0, #1
 8001884:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001886:	2305      	movs	r3, #5
 8001888:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800188c:	6802      	ldr	r2, [r0, #0]
 800188e:	6813      	ldr	r3, [r2, #0]
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001896:	2000      	movs	r0, #0
}
 8001898:	4770      	bx	lr
	...

0800189c <HAL_DMA_IRQHandler>:
{
 800189c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189e:	b083      	sub	sp, #12
 80018a0:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 80018a6:	4b72      	ldr	r3, [pc, #456]	; (8001a70 <HAL_DMA_IRQHandler+0x1d4>)
 80018a8:	681d      	ldr	r5, [r3, #0]
 80018aa:	4b72      	ldr	r3, [pc, #456]	; (8001a74 <HAL_DMA_IRQHandler+0x1d8>)
 80018ac:	fba3 3505 	umull	r3, r5, r3, r5
 80018b0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018b2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80018b4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018b6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80018b8:	2308      	movs	r3, #8
 80018ba:	4093      	lsls	r3, r2
 80018bc:	4233      	tst	r3, r6
 80018be:	d010      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018c0:	6803      	ldr	r3, [r0, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	f012 0f04 	tst.w	r2, #4
 80018c8:	d00b      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	f022 0204 	bic.w	r2, r2, #4
 80018d0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018d2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80018d4:	2308      	movs	r3, #8
 80018d6:	4093      	lsls	r3, r2
 80018d8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018da:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018e2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80018e4:	2301      	movs	r3, #1
 80018e6:	4093      	lsls	r3, r2
 80018e8:	4233      	tst	r3, r6
 80018ea:	d009      	beq.n	8001900 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018ec:	6822      	ldr	r2, [r4, #0]
 80018ee:	6952      	ldr	r2, [r2, #20]
 80018f0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80018f4:	d004      	beq.n	8001900 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018f6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018fa:	f043 0302 	orr.w	r3, r3, #2
 80018fe:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001900:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001902:	2304      	movs	r3, #4
 8001904:	4093      	lsls	r3, r2
 8001906:	4233      	tst	r3, r6
 8001908:	d009      	beq.n	800191e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800190a:	6822      	ldr	r2, [r4, #0]
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	f012 0f02 	tst.w	r2, #2
 8001912:	d004      	beq.n	800191e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001914:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001916:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800191e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001920:	2310      	movs	r3, #16
 8001922:	4093      	lsls	r3, r2
 8001924:	4233      	tst	r3, r6
 8001926:	d024      	beq.n	8001972 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001928:	6822      	ldr	r2, [r4, #0]
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	f012 0f08 	tst.w	r2, #8
 8001930:	d01f      	beq.n	8001972 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001932:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800193c:	d00d      	beq.n	800195a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001944:	d104      	bne.n	8001950 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001946:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001948:	b19b      	cbz	r3, 8001972 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800194a:	4620      	mov	r0, r4
 800194c:	4798      	blx	r3
 800194e:	e010      	b.n	8001972 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001950:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001952:	b173      	cbz	r3, 8001972 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001954:	4620      	mov	r0, r4
 8001956:	4798      	blx	r3
 8001958:	e00b      	b.n	8001972 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001960:	d103      	bne.n	800196a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	f022 0208 	bic.w	r2, r2, #8
 8001968:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800196a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800196c:	b10b      	cbz	r3, 8001972 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800196e:	4620      	mov	r0, r4
 8001970:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001972:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001974:	2320      	movs	r3, #32
 8001976:	4093      	lsls	r3, r2
 8001978:	4233      	tst	r3, r6
 800197a:	d055      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800197c:	6822      	ldr	r2, [r4, #0]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	f012 0f10 	tst.w	r2, #16
 8001984:	d050      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001986:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001988:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b05      	cmp	r3, #5
 8001990:	d00e      	beq.n	80019b0 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800199a:	d033      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80019a2:	d12a      	bne.n	80019fa <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80019a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d03e      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80019aa:	4620      	mov	r0, r4
 80019ac:	4798      	blx	r3
 80019ae:	e03b      	b.n	8001a28 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019b0:	6822      	ldr	r2, [r4, #0]
 80019b2:	6813      	ldr	r3, [r2, #0]
 80019b4:	f023 0316 	bic.w	r3, r3, #22
 80019b8:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ba:	6822      	ldr	r2, [r4, #0]
 80019bc:	6953      	ldr	r3, [r2, #20]
 80019be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019c2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019c6:	b1a3      	cbz	r3, 80019f2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019c8:	6822      	ldr	r2, [r4, #0]
 80019ca:	6813      	ldr	r3, [r2, #0]
 80019cc:	f023 0308 	bic.w	r3, r3, #8
 80019d0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80019d4:	233f      	movs	r3, #63	; 0x3f
 80019d6:	4093      	lsls	r3, r2
 80019d8:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80019da:	2301      	movs	r3, #1
 80019dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80019e0:	2300      	movs	r3, #0
 80019e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80019e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d03f      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80019ec:	4620      	mov	r0, r4
 80019ee:	4798      	blx	r3
        return;
 80019f0:	e03c      	b.n	8001a6c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1e7      	bne.n	80019c8 <HAL_DMA_IRQHandler+0x12c>
 80019f8:	e7eb      	b.n	80019d2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80019fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019fc:	b1a3      	cbz	r3, 8001a28 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80019fe:	4620      	mov	r0, r4
 8001a00:	4798      	blx	r3
 8001a02:	e011      	b.n	8001a28 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001a0a:	d109      	bne.n	8001a20 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	f022 0210 	bic.w	r2, r2, #16
 8001a12:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001a14:	2301      	movs	r3, #1
 8001a16:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8001a20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a22:	b10b      	cbz	r3, 8001a28 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001a24:	4620      	mov	r0, r4
 8001a26:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a2a:	b1fb      	cbz	r3, 8001a6c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a2e:	f013 0f01 	tst.w	r3, #1
 8001a32:	d017      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a34:	2305      	movs	r3, #5
 8001a36:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001a3a:	6822      	ldr	r2, [r4, #0]
 8001a3c:	6813      	ldr	r3, [r2, #0]
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001a44:	9b01      	ldr	r3, [sp, #4]
 8001a46:	3301      	adds	r3, #1
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	42ab      	cmp	r3, r5
 8001a4c:	d804      	bhi.n	8001a58 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f013 0f01 	tst.w	r3, #1
 8001a56:	d1f5      	bne.n	8001a44 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001a64:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001a66:	b10b      	cbz	r3, 8001a6c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4798      	blx	r3
}
 8001a6c:	b003      	add	sp, #12
 8001a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a70:	20000004 	.word	0x20000004
 8001a74:	1b4e81b5 	.word	0x1b4e81b5

08001a78 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001a78:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001a7a:	490b      	ldr	r1, [pc, #44]	; (8001aa8 <FLASH_Program_DoubleWord+0x30>)
 8001a7c:	690c      	ldr	r4, [r1, #16]
 8001a7e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8001a82:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001a84:	690c      	ldr	r4, [r1, #16]
 8001a86:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8001a8a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a8c:	690c      	ldr	r4, [r1, #16]
 8001a8e:	f044 0401 	orr.w	r4, r4, #1
 8001a92:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001a94:	6002      	str	r2, [r0, #0]
 8001a96:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001a9a:	6043      	str	r3, [r0, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a9c:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023c00 	.word	0x40023c00

08001aac <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <FLASH_Program_Word+0x24>)
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ab4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001abc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	f042 0201 	orr.w	r2, r2, #1
 8001ac4:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8001ac6:	6001      	str	r1, [r0, #0]
 8001ac8:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00

08001ad4 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <FLASH_Program_HalfWord+0x24>)
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001adc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ae4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	f042 0201 	orr.w	r2, r2, #1
 8001aec:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8001aee:	8001      	strh	r1, [r0, #0]
 8001af0:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40023c00 	.word	0x40023c00

08001afc <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <FLASH_Program_Byte+0x20>)
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001b04:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	f042 0201 	orr.w	r2, r2, #1
 8001b10:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8001b12:	7001      	strb	r1, [r0, #0]
 8001b14:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023c00 	.word	0x40023c00

08001b20 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <FLASH_SetErrorCode+0x6c>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f013 0f02 	tst.w	r3, #2
 8001b28:	d004      	beq.n	8001b34 <FLASH_SetErrorCode+0x14>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001b2a:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <FLASH_SetErrorCode+0x70>)
 8001b2c:	6993      	ldr	r3, [r2, #24]
 8001b2e:	f043 0320 	orr.w	r3, r3, #32
 8001b32:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <FLASH_SetErrorCode+0x6c>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f013 0f10 	tst.w	r3, #16
 8001b3c:	d004      	beq.n	8001b48 <FLASH_SetErrorCode+0x28>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001b3e:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <FLASH_SetErrorCode+0x70>)
 8001b40:	6993      	ldr	r3, [r2, #24]
 8001b42:	f043 0310 	orr.w	r3, r3, #16
 8001b46:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <FLASH_SetErrorCode+0x6c>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f013 0f20 	tst.w	r3, #32
 8001b50:	d004      	beq.n	8001b5c <FLASH_SetErrorCode+0x3c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001b52:	4a0f      	ldr	r2, [pc, #60]	; (8001b90 <FLASH_SetErrorCode+0x70>)
 8001b54:	6993      	ldr	r3, [r2, #24]
 8001b56:	f043 0308 	orr.w	r3, r3, #8
 8001b5a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <FLASH_SetErrorCode+0x6c>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001b64:	d004      	beq.n	8001b70 <FLASH_SetErrorCode+0x50>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <FLASH_SetErrorCode+0x70>)
 8001b68:	6993      	ldr	r3, [r2, #24]
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <FLASH_SetErrorCode+0x6c>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b78:	d004      	beq.n	8001b84 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <FLASH_SetErrorCode+0x70>)
 8001b7c:	6993      	ldr	r3, [r2, #24]
 8001b7e:	f043 0302 	orr.w	r3, r3, #2
 8001b82:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001b84:	4b01      	ldr	r3, [pc, #4]	; (8001b8c <FLASH_SetErrorCode+0x6c>)
 8001b86:	22f2      	movs	r2, #242	; 0xf2
 8001b88:	60da      	str	r2, [r3, #12]
}
 8001b8a:	4770      	bx	lr
 8001b8c:	40023c00 	.word	0x40023c00
 8001b90:	200002d0 	.word	0x200002d0

08001b94 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_FLASH_Unlock+0x28>)
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db01      	blt.n	8001ba0 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_FLASH_Unlock+0x28>)
 8001ba2:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <HAL_FLASH_Unlock+0x2c>)
 8001ba4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ba6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001baa:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	db01      	blt.n	8001bb6 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	4770      	bx	lr
      status = HAL_ERROR;
 8001bb6:	2001      	movs	r0, #1
}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023c00 	.word	0x40023c00
 8001bc0:	45670123 	.word	0x45670123

08001bc4 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8001bc4:	4a03      	ldr	r2, [pc, #12]	; (8001bd4 <HAL_FLASH_Lock+0x10>)
 8001bc6:	6913      	ldr	r3, [r2, #16]
 8001bc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bcc:	6113      	str	r3, [r2, #16]
}
 8001bce:	2000      	movs	r0, #0
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40023c00 	.word	0x40023c00

08001bd8 <FLASH_WaitForLastOperation>:
{ 
 8001bd8:	b538      	push	{r3, r4, r5, lr}
 8001bda:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <FLASH_WaitForLastOperation+0x5c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8001be2:	f7ff fb15 	bl	8001210 <HAL_GetTick>
 8001be6:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <FLASH_WaitForLastOperation+0x60>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001bf0:	d00a      	beq.n	8001c08 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8001bf2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001bf6:	d0f7      	beq.n	8001be8 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001bf8:	b124      	cbz	r4, 8001c04 <FLASH_WaitForLastOperation+0x2c>
 8001bfa:	f7ff fb09 	bl	8001210 <HAL_GetTick>
 8001bfe:	1b40      	subs	r0, r0, r5
 8001c00:	42a0      	cmp	r0, r4
 8001c02:	d9f1      	bls.n	8001be8 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8001c04:	2003      	movs	r0, #3
 8001c06:	e00d      	b.n	8001c24 <FLASH_WaitForLastOperation+0x4c>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <FLASH_WaitForLastOperation+0x60>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 8001c10:	d109      	bne.n	8001c26 <FLASH_WaitForLastOperation+0x4e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <FLASH_WaitForLastOperation+0x60>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f013 0f01 	tst.w	r3, #1
 8001c1a:	d008      	beq.n	8001c2e <FLASH_WaitForLastOperation+0x56>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <FLASH_WaitForLastOperation+0x60>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8001c22:	2000      	movs	r0, #0
}  
 8001c24:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8001c26:	f7ff ff7b 	bl	8001b20 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	e7fa      	b.n	8001c24 <FLASH_WaitForLastOperation+0x4c>
  return HAL_OK;
 8001c2e:	2000      	movs	r0, #0
 8001c30:	e7f8      	b.n	8001c24 <FLASH_WaitForLastOperation+0x4c>
 8001c32:	bf00      	nop
 8001c34:	200002d0 	.word	0x200002d0
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <HAL_FLASH_Program>:
{
 8001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c3e:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8001c40:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <HAL_FLASH_Program+0x74>)
 8001c42:	7d12      	ldrb	r2, [r2, #20]
 8001c44:	2a01      	cmp	r2, #1
 8001c46:	d031      	beq.n	8001cac <HAL_FLASH_Program+0x70>
 8001c48:	4604      	mov	r4, r0
 8001c4a:	460d      	mov	r5, r1
 8001c4c:	461f      	mov	r7, r3
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_FLASH_Program+0x74>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	751a      	strb	r2, [r3, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c58:	f7ff ffbe 	bl	8001bd8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001c5c:	b990      	cbnz	r0, 8001c84 <HAL_FLASH_Program+0x48>
    switch(TypeProgram)
 8001c5e:	2c03      	cmp	r4, #3
 8001c60:	d807      	bhi.n	8001c72 <HAL_FLASH_Program+0x36>
 8001c62:	e8df f004 	tbb	[pc, r4]
 8001c66:	1302      	.short	0x1302
 8001c68:	1d18      	.short	0x1d18
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8001c6a:	b2f1      	uxtb	r1, r6
 8001c6c:	4628      	mov	r0, r5
 8001c6e:	f7ff ff45 	bl	8001afc <FLASH_Program_Byte>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c72:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c76:	f7ff ffaf 	bl	8001bd8 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 8001c7a:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <HAL_FLASH_Program+0x78>)
 8001c7c:	6913      	ldr	r3, [r2, #16]
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_FLASH_Program+0x74>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	751a      	strb	r2, [r3, #20]
}
 8001c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001c8c:	b2b1      	uxth	r1, r6
 8001c8e:	4628      	mov	r0, r5
 8001c90:	f7ff ff20 	bl	8001ad4 <FLASH_Program_HalfWord>
        break;
 8001c94:	e7ed      	b.n	8001c72 <HAL_FLASH_Program+0x36>
        FLASH_Program_Word(Address, (uint32_t) Data);
 8001c96:	4631      	mov	r1, r6
 8001c98:	4628      	mov	r0, r5
 8001c9a:	f7ff ff07 	bl	8001aac <FLASH_Program_Word>
        break;
 8001c9e:	e7e8      	b.n	8001c72 <HAL_FLASH_Program+0x36>
        FLASH_Program_DoubleWord(Address, Data);
 8001ca0:	4632      	mov	r2, r6
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	f7ff fee7 	bl	8001a78 <FLASH_Program_DoubleWord>
        break;
 8001caa:	e7e2      	b.n	8001c72 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 8001cac:	2002      	movs	r0, #2
 8001cae:	e7ec      	b.n	8001c8a <HAL_FLASH_Program+0x4e>
 8001cb0:	200002d0 	.word	0x200002d0
 8001cb4:	40023c00 	.word	0x40023c00

08001cb8 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8001cb8:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <FLASH_MassErase+0x48>)
 8001cba:	6913      	ldr	r3, [r2, #16]
 8001cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cc0:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8001cc2:	2903      	cmp	r1, #3
 8001cc4:	d010      	beq.n	8001ce8 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
  }
  else if(Banks == FLASH_BANK_2)
 8001cc6:	2902      	cmp	r1, #2
 8001cc8:	d014      	beq.n	8001cf4 <FLASH_MassErase+0x3c>
    FLASH->CR |= FLASH_CR_MER2;
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8001cca:	4a0d      	ldr	r2, [pc, #52]	; (8001d00 <FLASH_MassErase+0x48>)
 8001ccc:	6913      	ldr	r3, [r2, #16]
 8001cce:	f043 0304 	orr.w	r3, r3, #4
 8001cd2:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <FLASH_MassErase+0x48>)
 8001cd6:	6913      	ldr	r3, [r2, #16]
 8001cd8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001cdc:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8001ce0:	6110      	str	r0, [r2, #16]
 8001ce2:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001ce6:	4770      	bx	lr
    FLASH->CR |= FLASH_MER_BIT;
 8001ce8:	6911      	ldr	r1, [r2, #16]
 8001cea:	f248 0304 	movw	r3, #32772	; 0x8004
 8001cee:	430b      	orrs	r3, r1
 8001cf0:	6113      	str	r3, [r2, #16]
 8001cf2:	e7ef      	b.n	8001cd4 <FLASH_MassErase+0x1c>
    FLASH->CR |= FLASH_CR_MER2;
 8001cf4:	4a02      	ldr	r2, [pc, #8]	; (8001d00 <FLASH_MassErase+0x48>)
 8001cf6:	6913      	ldr	r3, [r2, #16]
 8001cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfc:	6113      	str	r3, [r2, #16]
 8001cfe:	e7e9      	b.n	8001cd4 <FLASH_MassErase+0x1c>
 8001d00:	40023c00 	.word	0x40023c00

08001d04 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001d04:	b149      	cbz	r1, 8001d1a <FLASH_Erase_Sector+0x16>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001d06:	2901      	cmp	r1, #1
 8001d08:	d026      	beq.n	8001d58 <FLASH_Erase_Sector+0x54>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001d0a:	2902      	cmp	r1, #2
 8001d0c:	d002      	beq.n	8001d14 <FLASH_Erase_Sector+0x10>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001d0e:	f44f 7c40 	mov.w	ip, #768	; 0x300
 8001d12:	e004      	b.n	8001d1e <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 8001d14:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8001d18:	e001      	b.n	8001d1e <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 8001d1a:	f04f 0c00 	mov.w	ip, #0
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8001d1e:	280b      	cmp	r0, #11
 8001d20:	d900      	bls.n	8001d24 <FLASH_Erase_Sector+0x20>
  {
    Sector += 4;
 8001d22:	3004      	adds	r0, #4
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <FLASH_Erase_Sector+0x5c>)
 8001d26:	6919      	ldr	r1, [r3, #16]
 8001d28:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001d2c:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	ea42 020c 	orr.w	r2, r2, ip
 8001d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001d3c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8001d44:	f040 0002 	orr.w	r0, r0, #2
 8001d48:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d50:	611a      	str	r2, [r3, #16]
 8001d52:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001d56:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001d58:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8001d5c:	e7df      	b.n	8001d1e <FLASH_Erase_Sector+0x1a>
 8001d5e:	bf00      	nop
 8001d60:	40023c00 	.word	0x40023c00

08001d64 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <HAL_FLASHEx_Erase+0x8c>)
 8001d66:	7d1b      	ldrb	r3, [r3, #20]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d03d      	beq.n	8001de8 <HAL_FLASHEx_Erase+0x84>
{
 8001d6c:	b570      	push	{r4, r5, r6, lr}
 8001d6e:	4604      	mov	r4, r0
 8001d70:	460e      	mov	r6, r1
  __HAL_LOCK(&pFlash);
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <HAL_FLASHEx_Erase+0x8c>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	751a      	strb	r2, [r3, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d7c:	f7ff ff2c 	bl	8001bd8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001d80:	4601      	mov	r1, r0
 8001d82:	bb60      	cbnz	r0, 8001dde <HAL_FLASHEx_Erase+0x7a>
    *SectorError = 0xFFFFFFFFU;
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
 8001d88:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d016      	beq.n	8001dbe <HAL_FLASHEx_Erase+0x5a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d90:	68a5      	ldr	r5, [r4, #8]
 8001d92:	68e3      	ldr	r3, [r4, #12]
 8001d94:	68a2      	ldr	r2, [r4, #8]
 8001d96:	4413      	add	r3, r2
 8001d98:	42ab      	cmp	r3, r5
 8001d9a:	d920      	bls.n	8001dde <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001d9c:	7c21      	ldrb	r1, [r4, #16]
 8001d9e:	4628      	mov	r0, r5
 8001da0:	f7ff ffb0 	bl	8001d04 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001da4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001da8:	f7ff ff16 	bl	8001bd8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8001dac:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <HAL_FLASHEx_Erase+0x90>)
 8001dae:	6913      	ldr	r3, [r2, #16]
 8001db0:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001db4:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 8001db6:	4601      	mov	r1, r0
 8001db8:	b980      	cbnz	r0, 8001ddc <HAL_FLASHEx_Erase+0x78>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dba:	3501      	adds	r5, #1
 8001dbc:	e7e9      	b.n	8001d92 <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001dbe:	6861      	ldr	r1, [r4, #4]
 8001dc0:	7c20      	ldrb	r0, [r4, #16]
 8001dc2:	f7ff ff79 	bl	8001cb8 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dc6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dca:	f7ff ff05 	bl	8001bd8 <FLASH_WaitForLastOperation>
 8001dce:	4601      	mov	r1, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dd0:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <HAL_FLASHEx_Erase+0x90>)
 8001dd2:	6910      	ldr	r0, [r2, #16]
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_FLASHEx_Erase+0x94>)
 8001dd6:	4003      	ands	r3, r0
 8001dd8:	6113      	str	r3, [r2, #16]
 8001dda:	e000      	b.n	8001dde <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8001ddc:	6035      	str	r5, [r6, #0]
  __HAL_UNLOCK(&pFlash);
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <HAL_FLASHEx_Erase+0x8c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	751a      	strb	r2, [r3, #20]
}
 8001de4:	4608      	mov	r0, r1
 8001de6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8001de8:	2102      	movs	r1, #2
}
 8001dea:	4608      	mov	r0, r1
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	200002d0 	.word	0x200002d0
 8001df4:	40023c00 	.word	0x40023c00
 8001df8:	ffff7ffb 	.word	0xffff7ffb

08001dfc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	2b0f      	cmp	r3, #15
 8001e00:	f200 80ef 	bhi.w	8001fe2 <HAL_GPIO_Init+0x1e6>
{
 8001e04:	b570      	push	{r4, r5, r6, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	e061      	b.n	8001ece <HAL_GPIO_Init+0xd2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e0a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e0c:	005e      	lsls	r6, r3, #1
 8001e0e:	2403      	movs	r4, #3
 8001e10:	40b4      	lsls	r4, r6
 8001e12:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e16:	68cc      	ldr	r4, [r1, #12]
 8001e18:	40b4      	lsls	r4, r6
 8001e1a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001e1c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e20:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e24:	684c      	ldr	r4, [r1, #4]
 8001e26:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8001e2e:	6042      	str	r2, [r0, #4]
 8001e30:	e05b      	b.n	8001eea <HAL_GPIO_Init+0xee>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e32:	08dc      	lsrs	r4, r3, #3
 8001e34:	3408      	adds	r4, #8
 8001e36:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e3a:	f003 0207 	and.w	r2, r3, #7
 8001e3e:	0095      	lsls	r5, r2, #2
 8001e40:	220f      	movs	r2, #15
 8001e42:	40aa      	lsls	r2, r5
 8001e44:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e48:	690a      	ldr	r2, [r1, #16]
 8001e4a:	40aa      	lsls	r2, r5
 8001e4c:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8001e50:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001e54:	e05d      	b.n	8001f12 <HAL_GPIO_Init+0x116>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e56:	2209      	movs	r2, #9
 8001e58:	e000      	b.n	8001e5c <HAL_GPIO_Init+0x60>
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001e60:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e62:	3402      	adds	r4, #2
 8001e64:	4d5f      	ldr	r5, [pc, #380]	; (8001fe4 <HAL_GPIO_Init+0x1e8>)
 8001e66:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e6a:	4a5f      	ldr	r2, [pc, #380]	; (8001fe8 <HAL_GPIO_Init+0x1ec>)
 8001e6c:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	ea6f 020c 	mvn.w	r2, ip
 8001e72:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e76:	684e      	ldr	r6, [r1, #4]
 8001e78:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8001e7c:	d001      	beq.n	8001e82 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8001e7e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001e82:	4c59      	ldr	r4, [pc, #356]	; (8001fe8 <HAL_GPIO_Init+0x1ec>)
 8001e84:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001e86:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001e88:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e8c:	684e      	ldr	r6, [r1, #4]
 8001e8e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001e92:	d001      	beq.n	8001e98 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8001e94:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001e98:	4c53      	ldr	r4, [pc, #332]	; (8001fe8 <HAL_GPIO_Init+0x1ec>)
 8001e9a:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001e9c:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ea2:	684e      	ldr	r6, [r1, #4]
 8001ea4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001ea8:	d001      	beq.n	8001eae <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8001eaa:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001eae:	4c4e      	ldr	r4, [pc, #312]	; (8001fe8 <HAL_GPIO_Init+0x1ec>)
 8001eb0:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb2:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001eb4:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eb6:	684d      	ldr	r5, [r1, #4]
 8001eb8:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8001ebc:	d001      	beq.n	8001ec2 <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 8001ebe:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001ec2:	4c49      	ldr	r4, [pc, #292]	; (8001fe8 <HAL_GPIO_Init+0x1ec>)
 8001ec4:	6022      	str	r2, [r4, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	2b0f      	cmp	r3, #15
 8001eca:	f200 8088 	bhi.w	8001fde <HAL_GPIO_Init+0x1e2>
    ioposition = ((uint32_t)0x01) << position;
 8001ece:	2201      	movs	r2, #1
 8001ed0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed2:	680c      	ldr	r4, [r1, #0]
 8001ed4:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001ed8:	ea32 0404 	bics.w	r4, r2, r4
 8001edc:	d1f3      	bne.n	8001ec6 <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ede:	684c      	ldr	r4, [r1, #4]
 8001ee0:	f004 0403 	and.w	r4, r4, #3
 8001ee4:	3c01      	subs	r4, #1
 8001ee6:	2c01      	cmp	r4, #1
 8001ee8:	d98f      	bls.n	8001e0a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eea:	684a      	ldr	r2, [r1, #4]
 8001eec:	f002 0203 	and.w	r2, r2, #3
 8001ef0:	2a03      	cmp	r2, #3
 8001ef2:	d009      	beq.n	8001f08 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->PUPDR;
 8001ef4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ef6:	005d      	lsls	r5, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	40aa      	lsls	r2, r5
 8001efc:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f00:	688a      	ldr	r2, [r1, #8]
 8001f02:	40aa      	lsls	r2, r5
 8001f04:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001f06:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f08:	684a      	ldr	r2, [r1, #4]
 8001f0a:	f002 0203 	and.w	r2, r2, #3
 8001f0e:	2a02      	cmp	r2, #2
 8001f10:	d08f      	beq.n	8001e32 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8001f12:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f14:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f1e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f22:	684a      	ldr	r2, [r1, #4]
 8001f24:	f002 0203 	and.w	r2, r2, #3
 8001f28:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f2c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001f2e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f30:	684a      	ldr	r2, [r1, #4]
 8001f32:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8001f36:	d0c6      	beq.n	8001ec6 <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f38:	4a2c      	ldr	r2, [pc, #176]	; (8001fec <HAL_GPIO_Init+0x1f0>)
 8001f3a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001f3c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001f40:	6454      	str	r4, [r2, #68]	; 0x44
 8001f42:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f44:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f48:	9201      	str	r2, [sp, #4]
 8001f4a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001f4c:	089c      	lsrs	r4, r3, #2
 8001f4e:	1ca5      	adds	r5, r4, #2
 8001f50:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <HAL_GPIO_Init+0x1e8>)
 8001f52:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f56:	f003 0203 	and.w	r2, r3, #3
 8001f5a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8001f5e:	220f      	movs	r2, #15
 8001f60:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f64:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f68:	4a21      	ldr	r2, [pc, #132]	; (8001ff0 <HAL_GPIO_Init+0x1f4>)
 8001f6a:	4290      	cmp	r0, r2
 8001f6c:	f43f af75 	beq.w	8001e5a <HAL_GPIO_Init+0x5e>
 8001f70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f74:	4290      	cmp	r0, r2
 8001f76:	d022      	beq.n	8001fbe <HAL_GPIO_Init+0x1c2>
 8001f78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f7c:	4290      	cmp	r0, r2
 8001f7e:	d020      	beq.n	8001fc2 <HAL_GPIO_Init+0x1c6>
 8001f80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f84:	4290      	cmp	r0, r2
 8001f86:	d01e      	beq.n	8001fc6 <HAL_GPIO_Init+0x1ca>
 8001f88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f8c:	4290      	cmp	r0, r2
 8001f8e:	d01c      	beq.n	8001fca <HAL_GPIO_Init+0x1ce>
 8001f90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f94:	4290      	cmp	r0, r2
 8001f96:	d01a      	beq.n	8001fce <HAL_GPIO_Init+0x1d2>
 8001f98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f9c:	4290      	cmp	r0, r2
 8001f9e:	d018      	beq.n	8001fd2 <HAL_GPIO_Init+0x1d6>
 8001fa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fa4:	4290      	cmp	r0, r2
 8001fa6:	d016      	beq.n	8001fd6 <HAL_GPIO_Init+0x1da>
 8001fa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fac:	4290      	cmp	r0, r2
 8001fae:	d014      	beq.n	8001fda <HAL_GPIO_Init+0x1de>
 8001fb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fb4:	4290      	cmp	r0, r2
 8001fb6:	f43f af4e 	beq.w	8001e56 <HAL_GPIO_Init+0x5a>
 8001fba:	220a      	movs	r2, #10
 8001fbc:	e74e      	b.n	8001e5c <HAL_GPIO_Init+0x60>
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	e74c      	b.n	8001e5c <HAL_GPIO_Init+0x60>
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	e74a      	b.n	8001e5c <HAL_GPIO_Init+0x60>
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	e748      	b.n	8001e5c <HAL_GPIO_Init+0x60>
 8001fca:	2204      	movs	r2, #4
 8001fcc:	e746      	b.n	8001e5c <HAL_GPIO_Init+0x60>
 8001fce:	2205      	movs	r2, #5
 8001fd0:	e744      	b.n	8001e5c <HAL_GPIO_Init+0x60>
 8001fd2:	2206      	movs	r2, #6
 8001fd4:	e742      	b.n	8001e5c <HAL_GPIO_Init+0x60>
 8001fd6:	2207      	movs	r2, #7
 8001fd8:	e740      	b.n	8001e5c <HAL_GPIO_Init+0x60>
 8001fda:	2208      	movs	r2, #8
 8001fdc:	e73e      	b.n	8001e5c <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 8001fde:	b002      	add	sp, #8
 8001fe0:	bd70      	pop	{r4, r5, r6, pc}
 8001fe2:	4770      	bx	lr
 8001fe4:	40013800 	.word	0x40013800
 8001fe8:	40013c00 	.word	0x40013c00
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40020000 	.word	0x40020000

08001ff4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ff4:	6903      	ldr	r3, [r0, #16]
 8001ff6:	4219      	tst	r1, r3
 8001ff8:	d001      	beq.n	8001ffe <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ffe:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002000:	4770      	bx	lr

08002002 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002002:	b10a      	cbz	r2, 8002008 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002004:	6181      	str	r1, [r0, #24]
 8002006:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002008:	0409      	lsls	r1, r1, #16
 800200a:	6181      	str	r1, [r0, #24]
  }
}
 800200c:	4770      	bx	lr

0800200e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800200e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002010:	ea01 0203 	and.w	r2, r1, r3
 8002014:	ea21 0103 	bic.w	r1, r1, r3
 8002018:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800201c:	6181      	str	r1, [r0, #24]
}
 800201e:	4770      	bx	lr

08002020 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002020:	2800      	cmp	r0, #0
 8002022:	f000 8206 	beq.w	8002432 <HAL_RCC_OscConfig+0x412>
{
 8002026:	b570      	push	{r4, r5, r6, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202c:	6803      	ldr	r3, [r0, #0]
 800202e:	f013 0f01 	tst.w	r3, #1
 8002032:	d029      	beq.n	8002088 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002034:	4b95      	ldr	r3, [pc, #596]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b04      	cmp	r3, #4
 800203e:	d01a      	beq.n	8002076 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002040:	4b92      	ldr	r3, [pc, #584]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	d00f      	beq.n	800206c <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204c:	6863      	ldr	r3, [r4, #4]
 800204e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002052:	d040      	beq.n	80020d6 <HAL_RCC_OscConfig+0xb6>
 8002054:	2b00      	cmp	r3, #0
 8002056:	d154      	bne.n	8002102 <HAL_RCC_OscConfig+0xe2>
 8002058:	4b8c      	ldr	r3, [pc, #560]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e039      	b.n	80020e0 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206c:	4b87      	ldr	r3, [pc, #540]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002074:	d0ea      	beq.n	800204c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002076:	4b85      	ldr	r3, [pc, #532]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800207e:	d003      	beq.n	8002088 <HAL_RCC_OscConfig+0x68>
 8002080:	6863      	ldr	r3, [r4, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 81d7 	beq.w	8002436 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	f013 0f02 	tst.w	r3, #2
 800208e:	d074      	beq.n	800217a <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002090:	4b7e      	ldr	r3, [pc, #504]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f013 0f0c 	tst.w	r3, #12
 8002098:	d05e      	beq.n	8002158 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209a:	4b7c      	ldr	r3, [pc, #496]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d053      	beq.n	800214e <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020a6:	68e3      	ldr	r3, [r4, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8089 	beq.w	80021c0 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ae:	4a77      	ldr	r2, [pc, #476]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020b0:	6813      	ldr	r3, [r2, #0]
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff f8aa 	bl	8001210 <HAL_GetTick>
 80020bc:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b73      	ldr	r3, [pc, #460]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f013 0f02 	tst.w	r3, #2
 80020c6:	d172      	bne.n	80021ae <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c8:	f7ff f8a2 	bl	8001210 <HAL_GetTick>
 80020cc:	1b40      	subs	r0, r0, r5
 80020ce:	2802      	cmp	r0, #2
 80020d0:	d9f5      	bls.n	80020be <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80020d2:	2003      	movs	r0, #3
 80020d4:	e1b4      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d6:	4a6d      	ldr	r2, [pc, #436]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020d8:	6813      	ldr	r3, [r2, #0]
 80020da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020de:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e0:	6863      	ldr	r3, [r4, #4]
 80020e2:	b32b      	cbz	r3, 8002130 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80020e4:	f7ff f894 	bl	8001210 <HAL_GetTick>
 80020e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b68      	ldr	r3, [pc, #416]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020f2:	d1c9      	bne.n	8002088 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f4:	f7ff f88c 	bl	8001210 <HAL_GetTick>
 80020f8:	1b40      	subs	r0, r0, r5
 80020fa:	2864      	cmp	r0, #100	; 0x64
 80020fc:	d9f5      	bls.n	80020ea <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80020fe:	2003      	movs	r0, #3
 8002100:	e19e      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002102:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002106:	d009      	beq.n	800211c <HAL_RCC_OscConfig+0xfc>
 8002108:	4b60      	ldr	r3, [pc, #384]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e7e1      	b.n	80020e0 <HAL_RCC_OscConfig+0xc0>
 800211c:	4b5b      	ldr	r3, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e7d7      	b.n	80020e0 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8002130:	f7ff f86e 	bl	8001210 <HAL_GetTick>
 8002134:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	4b55      	ldr	r3, [pc, #340]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800213e:	d0a3      	beq.n	8002088 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002140:	f7ff f866 	bl	8001210 <HAL_GetTick>
 8002144:	1b40      	subs	r0, r0, r5
 8002146:	2864      	cmp	r0, #100	; 0x64
 8002148:	d9f5      	bls.n	8002136 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800214a:	2003      	movs	r0, #3
 800214c:	e178      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214e:	4b4f      	ldr	r3, [pc, #316]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002156:	d1a6      	bne.n	80020a6 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002158:	4b4c      	ldr	r3, [pc, #304]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f013 0f02 	tst.w	r3, #2
 8002160:	d003      	beq.n	800216a <HAL_RCC_OscConfig+0x14a>
 8002162:	68e3      	ldr	r3, [r4, #12]
 8002164:	2b01      	cmp	r3, #1
 8002166:	f040 8168 	bne.w	800243a <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216a:	4a48      	ldr	r2, [pc, #288]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800216c:	6813      	ldr	r3, [r2, #0]
 800216e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002172:	6921      	ldr	r1, [r4, #16]
 8002174:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002178:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	f013 0f08 	tst.w	r3, #8
 8002180:	d046      	beq.n	8002210 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002182:	6963      	ldr	r3, [r4, #20]
 8002184:	b383      	cbz	r3, 80021e8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002186:	4a41      	ldr	r2, [pc, #260]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002188:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7ff f83e 	bl	8001210 <HAL_GetTick>
 8002194:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002196:	4b3d      	ldr	r3, [pc, #244]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800219a:	f013 0f02 	tst.w	r3, #2
 800219e:	d137      	bne.n	8002210 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a0:	f7ff f836 	bl	8001210 <HAL_GetTick>
 80021a4:	1b40      	subs	r0, r0, r5
 80021a6:	2802      	cmp	r0, #2
 80021a8:	d9f5      	bls.n	8002196 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 80021aa:	2003      	movs	r0, #3
 80021ac:	e148      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	4a37      	ldr	r2, [pc, #220]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80021b0:	6813      	ldr	r3, [r2, #0]
 80021b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021b6:	6921      	ldr	r1, [r4, #16]
 80021b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e7dc      	b.n	800217a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 80021c0:	4a32      	ldr	r2, [pc, #200]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80021c2:	6813      	ldr	r3, [r2, #0]
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80021ca:	f7ff f821 	bl	8001210 <HAL_GetTick>
 80021ce:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d0:	4b2e      	ldr	r3, [pc, #184]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f013 0f02 	tst.w	r3, #2
 80021d8:	d0cf      	beq.n	800217a <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021da:	f7ff f819 	bl	8001210 <HAL_GetTick>
 80021de:	1b40      	subs	r0, r0, r5
 80021e0:	2802      	cmp	r0, #2
 80021e2:	d9f5      	bls.n	80021d0 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 80021e4:	2003      	movs	r0, #3
 80021e6:	e12b      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e8:	4a28      	ldr	r2, [pc, #160]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80021ea:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f2:	f7ff f80d 	bl	8001210 <HAL_GetTick>
 80021f6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80021fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fc:	f013 0f02 	tst.w	r3, #2
 8002200:	d006      	beq.n	8002210 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002202:	f7ff f805 	bl	8001210 <HAL_GetTick>
 8002206:	1b40      	subs	r0, r0, r5
 8002208:	2802      	cmp	r0, #2
 800220a:	d9f5      	bls.n	80021f8 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 800220c:	2003      	movs	r0, #3
 800220e:	e117      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	f013 0f04 	tst.w	r3, #4
 8002216:	d07d      	beq.n	8002314 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002218:	4b1c      	ldr	r3, [pc, #112]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002220:	d11e      	bne.n	8002260 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002226:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002236:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_RCC_OscConfig+0x270>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002240:	d010      	beq.n	8002264 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002242:	68a3      	ldr	r3, [r4, #8]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d025      	beq.n	8002294 <HAL_RCC_OscConfig+0x274>
 8002248:	2b00      	cmp	r3, #0
 800224a:	d13b      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2a4>
 800224c:	4b0f      	ldr	r3, [pc, #60]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800224e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002250:	f022 0201 	bic.w	r2, r2, #1
 8002254:	671a      	str	r2, [r3, #112]	; 0x70
 8002256:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002258:	f022 0204 	bic.w	r2, r2, #4
 800225c:	671a      	str	r2, [r3, #112]	; 0x70
 800225e:	e01e      	b.n	800229e <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 8002260:	2500      	movs	r5, #0
 8002262:	e7e9      	b.n	8002238 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8002264:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <HAL_RCC_OscConfig+0x270>)
 8002266:	6813      	ldr	r3, [r2, #0]
 8002268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800226e:	f7fe ffcf 	bl	8001210 <HAL_GetTick>
 8002272:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_OscConfig+0x270>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f413 7f80 	tst.w	r3, #256	; 0x100
 800227c:	d1e1      	bne.n	8002242 <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227e:	f7fe ffc7 	bl	8001210 <HAL_GetTick>
 8002282:	1b80      	subs	r0, r0, r6
 8002284:	2864      	cmp	r0, #100	; 0x64
 8002286:	d9f5      	bls.n	8002274 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8002288:	2003      	movs	r0, #3
 800228a:	e0d9      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
 800228c:	40023800 	.word	0x40023800
 8002290:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002294:	4a72      	ldr	r2, [pc, #456]	; (8002460 <HAL_RCC_OscConfig+0x440>)
 8002296:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800229e:	68a3      	ldr	r3, [r4, #8]
 80022a0:	b333      	cbz	r3, 80022f0 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a2:	f7fe ffb5 	bl	8001210 <HAL_GetTick>
 80022a6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a8:	4b6d      	ldr	r3, [pc, #436]	; (8002460 <HAL_RCC_OscConfig+0x440>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	f013 0f02 	tst.w	r3, #2
 80022b0:	d12f      	bne.n	8002312 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7fe ffad 	bl	8001210 <HAL_GetTick>
 80022b6:	1b80      	subs	r0, r0, r6
 80022b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80022bc:	4298      	cmp	r0, r3
 80022be:	d9f3      	bls.n	80022a8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80022c0:	2003      	movs	r0, #3
 80022c2:	e0bd      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c4:	2b05      	cmp	r3, #5
 80022c6:	d009      	beq.n	80022dc <HAL_RCC_OscConfig+0x2bc>
 80022c8:	4b65      	ldr	r3, [pc, #404]	; (8002460 <HAL_RCC_OscConfig+0x440>)
 80022ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	671a      	str	r2, [r3, #112]	; 0x70
 80022d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022d4:	f022 0204 	bic.w	r2, r2, #4
 80022d8:	671a      	str	r2, [r3, #112]	; 0x70
 80022da:	e7e0      	b.n	800229e <HAL_RCC_OscConfig+0x27e>
 80022dc:	4b60      	ldr	r3, [pc, #384]	; (8002460 <HAL_RCC_OscConfig+0x440>)
 80022de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022e0:	f042 0204 	orr.w	r2, r2, #4
 80022e4:	671a      	str	r2, [r3, #112]	; 0x70
 80022e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022e8:	f042 0201 	orr.w	r2, r2, #1
 80022ec:	671a      	str	r2, [r3, #112]	; 0x70
 80022ee:	e7d6      	b.n	800229e <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7fe ff8e 	bl	8001210 <HAL_GetTick>
 80022f4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f6:	4b5a      	ldr	r3, [pc, #360]	; (8002460 <HAL_RCC_OscConfig+0x440>)
 80022f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fa:	f013 0f02 	tst.w	r3, #2
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002300:	f7fe ff86 	bl	8001210 <HAL_GetTick>
 8002304:	1b80      	subs	r0, r0, r6
 8002306:	f241 3388 	movw	r3, #5000	; 0x1388
 800230a:	4298      	cmp	r0, r3
 800230c:	d9f3      	bls.n	80022f6 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800230e:	2003      	movs	r0, #3
 8002310:	e096      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002312:	b9fd      	cbnz	r5, 8002354 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002314:	69a3      	ldr	r3, [r4, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8091 	beq.w	800243e <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800231c:	4a50      	ldr	r2, [pc, #320]	; (8002460 <HAL_RCC_OscConfig+0x440>)
 800231e:	6892      	ldr	r2, [r2, #8]
 8002320:	f002 020c 	and.w	r2, r2, #12
 8002324:	2a08      	cmp	r2, #8
 8002326:	d059      	beq.n	80023dc <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002328:	2b02      	cmp	r3, #2
 800232a:	d019      	beq.n	8002360 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232c:	4a4c      	ldr	r2, [pc, #304]	; (8002460 <HAL_RCC_OscConfig+0x440>)
 800232e:	6813      	ldr	r3, [r2, #0]
 8002330:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7fe ff6b 	bl	8001210 <HAL_GetTick>
 800233a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233c:	4b48      	ldr	r3, [pc, #288]	; (8002460 <HAL_RCC_OscConfig+0x440>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002344:	d048      	beq.n	80023d8 <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002346:	f7fe ff63 	bl	8001210 <HAL_GetTick>
 800234a:	1b00      	subs	r0, r0, r4
 800234c:	2802      	cmp	r0, #2
 800234e:	d9f5      	bls.n	800233c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002350:	2003      	movs	r0, #3
 8002352:	e075      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002354:	4a42      	ldr	r2, [pc, #264]	; (8002460 <HAL_RCC_OscConfig+0x440>)
 8002356:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235c:	6413      	str	r3, [r2, #64]	; 0x40
 800235e:	e7d9      	b.n	8002314 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8002360:	4a3f      	ldr	r2, [pc, #252]	; (8002460 <HAL_RCC_OscConfig+0x440>)
 8002362:	6813      	ldr	r3, [r2, #0]
 8002364:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002368:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800236a:	f7fe ff51 	bl	8001210 <HAL_GetTick>
 800236e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002370:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_RCC_OscConfig+0x440>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002378:	d006      	beq.n	8002388 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237a:	f7fe ff49 	bl	8001210 <HAL_GetTick>
 800237e:	1b40      	subs	r0, r0, r5
 8002380:	2802      	cmp	r0, #2
 8002382:	d9f5      	bls.n	8002370 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8002384:	2003      	movs	r0, #3
 8002386:	e05b      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002388:	69e3      	ldr	r3, [r4, #28]
 800238a:	6a22      	ldr	r2, [r4, #32]
 800238c:	4313      	orrs	r3, r2
 800238e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002390:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002394:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002396:	0852      	lsrs	r2, r2, #1
 8002398:	3a01      	subs	r2, #1
 800239a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800239e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80023a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80023a6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80023aa:	4a2d      	ldr	r2, [pc, #180]	; (8002460 <HAL_RCC_OscConfig+0x440>)
 80023ac:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80023ae:	6813      	ldr	r3, [r2, #0]
 80023b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80023b6:	f7fe ff2b 	bl	8001210 <HAL_GetTick>
 80023ba:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023bc:	4b28      	ldr	r3, [pc, #160]	; (8002460 <HAL_RCC_OscConfig+0x440>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023c4:	d106      	bne.n	80023d4 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c6:	f7fe ff23 	bl	8001210 <HAL_GetTick>
 80023ca:	1b00      	subs	r0, r0, r4
 80023cc:	2802      	cmp	r0, #2
 80023ce:	d9f5      	bls.n	80023bc <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80023d0:	2003      	movs	r0, #3
 80023d2:	e035      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80023d4:	2000      	movs	r0, #0
 80023d6:	e033      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
 80023d8:	2000      	movs	r0, #0
 80023da:	e031      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 80023dc:	4a20      	ldr	r2, [pc, #128]	; (8002460 <HAL_RCC_OscConfig+0x440>)
 80023de:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d02f      	beq.n	8002444 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80023e8:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ea:	428b      	cmp	r3, r1
 80023ec:	d12c      	bne.n	8002448 <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ee:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80023f2:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f4:	428b      	cmp	r3, r1
 80023f6:	d129      	bne.n	800244c <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023fe:	4013      	ands	r3, r2
 8002400:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8002404:	d124      	bne.n	8002450 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002406:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800240a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002410:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002414:	d11e      	bne.n	8002454 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002416:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800241a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800241c:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8002420:	d11a      	bne.n	8002458 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002422:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002426:	6b23      	ldr	r3, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002428:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 800242c:	d116      	bne.n	800245c <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 800242e:	2000      	movs	r0, #0
 8002430:	e006      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 8002432:	2001      	movs	r0, #1
}
 8002434:	4770      	bx	lr
        return HAL_ERROR;
 8002436:	2001      	movs	r0, #1
 8002438:	e002      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 800243a:	2001      	movs	r0, #1
 800243c:	e000      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 800243e:	2000      	movs	r0, #0
}
 8002440:	b002      	add	sp, #8
 8002442:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002444:	2001      	movs	r0, #1
 8002446:	e7fb      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
 8002448:	2001      	movs	r0, #1
 800244a:	e7f9      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
 800244c:	2001      	movs	r0, #1
 800244e:	e7f7      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
 8002450:	2001      	movs	r0, #1
 8002452:	e7f5      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
 8002454:	2001      	movs	r0, #1
 8002456:	e7f3      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
 8002458:	2001      	movs	r0, #1
 800245a:	e7f1      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
 800245c:	2001      	movs	r0, #1
 800245e:	e7ef      	b.n	8002440 <HAL_RCC_OscConfig+0x420>
 8002460:	40023800 	.word	0x40023800

08002464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002466:	4b25      	ldr	r3, [pc, #148]	; (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b04      	cmp	r3, #4
 8002470:	d03f      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x8e>
 8002472:	2b08      	cmp	r3, #8
 8002474:	d13f      	bne.n	80024f6 <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002476:	4b21      	ldr	r3, [pc, #132]	; (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002484:	d012      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002488:	6859      	ldr	r1, [r3, #4]
 800248a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800248e:	481c      	ldr	r0, [pc, #112]	; (8002500 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002490:	2300      	movs	r3, #0
 8002492:	fba1 0100 	umull	r0, r1, r1, r0
 8002496:	f7fd ff2b 	bl	80002f0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800249a:	4b18      	ldr	r3, [pc, #96]	; (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80024a2:	3301      	adds	r3, #1
 80024a4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80024a6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80024aa:	e025      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80024b4:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80024b8:	ebb1 000c 	subs.w	r0, r1, ip
 80024bc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80024c0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80024c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024c8:	0181      	lsls	r1, r0, #6
 80024ca:	1a09      	subs	r1, r1, r0
 80024cc:	eb63 030e 	sbc.w	r3, r3, lr
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024d6:	00c9      	lsls	r1, r1, #3
 80024d8:	eb11 0c0c 	adds.w	ip, r1, ip
 80024dc:	f143 0300 	adc.w	r3, r3, #0
 80024e0:	0299      	lsls	r1, r3, #10
 80024e2:	2300      	movs	r3, #0
 80024e4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80024e8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80024ec:	f7fd ff00 	bl	80002f0 <__aeabi_uldivmod>
 80024f0:	e7d3      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80024f2:	4803      	ldr	r0, [pc, #12]	; (8002500 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024f4:	e000      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024f6:	4803      	ldr	r0, [pc, #12]	; (8002504 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80024f8:	bd08      	pop	{r3, pc}
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	017d7840 	.word	0x017d7840
 8002504:	00f42400 	.word	0x00f42400

08002508 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002508:	2800      	cmp	r0, #0
 800250a:	f000 80a0 	beq.w	800264e <HAL_RCC_ClockConfig+0x146>
{
 800250e:	b570      	push	{r4, r5, r6, lr}
 8002510:	460d      	mov	r5, r1
 8002512:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002514:	4b52      	ldr	r3, [pc, #328]	; (8002660 <HAL_RCC_ClockConfig+0x158>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	428b      	cmp	r3, r1
 800251e:	d20b      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002520:	4a4f      	ldr	r2, [pc, #316]	; (8002660 <HAL_RCC_ClockConfig+0x158>)
 8002522:	6813      	ldr	r3, [r2, #0]
 8002524:	f023 030f 	bic.w	r3, r3, #15
 8002528:	430b      	orrs	r3, r1
 800252a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252c:	6813      	ldr	r3, [r2, #0]
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	428b      	cmp	r3, r1
 8002534:	f040 808d 	bne.w	8002652 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	f013 0f02 	tst.w	r3, #2
 800253e:	d017      	beq.n	8002570 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	f013 0f04 	tst.w	r3, #4
 8002544:	d004      	beq.n	8002550 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002546:	4a47      	ldr	r2, [pc, #284]	; (8002664 <HAL_RCC_ClockConfig+0x15c>)
 8002548:	6893      	ldr	r3, [r2, #8]
 800254a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800254e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002550:	6823      	ldr	r3, [r4, #0]
 8002552:	f013 0f08 	tst.w	r3, #8
 8002556:	d004      	beq.n	8002562 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002558:	4a42      	ldr	r2, [pc, #264]	; (8002664 <HAL_RCC_ClockConfig+0x15c>)
 800255a:	6893      	ldr	r3, [r2, #8]
 800255c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002560:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002562:	4a40      	ldr	r2, [pc, #256]	; (8002664 <HAL_RCC_ClockConfig+0x15c>)
 8002564:	6893      	ldr	r3, [r2, #8]
 8002566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800256a:	68a1      	ldr	r1, [r4, #8]
 800256c:	430b      	orrs	r3, r1
 800256e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	f013 0f01 	tst.w	r3, #1
 8002576:	d031      	beq.n	80025dc <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002578:	6863      	ldr	r3, [r4, #4]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d020      	beq.n	80025c0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257e:	2b02      	cmp	r3, #2
 8002580:	d025      	beq.n	80025ce <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	4a38      	ldr	r2, [pc, #224]	; (8002664 <HAL_RCC_ClockConfig+0x15c>)
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	f012 0f02 	tst.w	r2, #2
 800258a:	d064      	beq.n	8002656 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258c:	4935      	ldr	r1, [pc, #212]	; (8002664 <HAL_RCC_ClockConfig+0x15c>)
 800258e:	688a      	ldr	r2, [r1, #8]
 8002590:	f022 0203 	bic.w	r2, r2, #3
 8002594:	4313      	orrs	r3, r2
 8002596:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002598:	f7fe fe3a 	bl	8001210 <HAL_GetTick>
 800259c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	4b31      	ldr	r3, [pc, #196]	; (8002664 <HAL_RCC_ClockConfig+0x15c>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	6862      	ldr	r2, [r4, #4]
 80025a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80025ac:	d016      	beq.n	80025dc <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ae:	f7fe fe2f 	bl	8001210 <HAL_GetTick>
 80025b2:	1b80      	subs	r0, r0, r6
 80025b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80025b8:	4298      	cmp	r0, r3
 80025ba:	d9f0      	bls.n	800259e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80025bc:	2003      	movs	r0, #3
 80025be:	e045      	b.n	800264c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c0:	4a28      	ldr	r2, [pc, #160]	; (8002664 <HAL_RCC_ClockConfig+0x15c>)
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80025c8:	d1e0      	bne.n	800258c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80025ca:	2001      	movs	r0, #1
 80025cc:	e03e      	b.n	800264c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ce:	4a25      	ldr	r2, [pc, #148]	; (8002664 <HAL_RCC_ClockConfig+0x15c>)
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80025d6:	d1d9      	bne.n	800258c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80025d8:	2001      	movs	r0, #1
 80025da:	e037      	b.n	800264c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025dc:	4b20      	ldr	r3, [pc, #128]	; (8002660 <HAL_RCC_ClockConfig+0x158>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	42ab      	cmp	r3, r5
 80025e6:	d90a      	bls.n	80025fe <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e8:	4a1d      	ldr	r2, [pc, #116]	; (8002660 <HAL_RCC_ClockConfig+0x158>)
 80025ea:	6813      	ldr	r3, [r2, #0]
 80025ec:	f023 030f 	bic.w	r3, r3, #15
 80025f0:	432b      	orrs	r3, r5
 80025f2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f4:	6813      	ldr	r3, [r2, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	42ab      	cmp	r3, r5
 80025fc:	d12d      	bne.n	800265a <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	f013 0f04 	tst.w	r3, #4
 8002604:	d006      	beq.n	8002614 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002606:	4a17      	ldr	r2, [pc, #92]	; (8002664 <HAL_RCC_ClockConfig+0x15c>)
 8002608:	6893      	ldr	r3, [r2, #8]
 800260a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800260e:	68e1      	ldr	r1, [r4, #12]
 8002610:	430b      	orrs	r3, r1
 8002612:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002614:	6823      	ldr	r3, [r4, #0]
 8002616:	f013 0f08 	tst.w	r3, #8
 800261a:	d007      	beq.n	800262c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800261c:	4a11      	ldr	r2, [pc, #68]	; (8002664 <HAL_RCC_ClockConfig+0x15c>)
 800261e:	6893      	ldr	r3, [r2, #8]
 8002620:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002624:	6921      	ldr	r1, [r4, #16]
 8002626:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800262a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800262c:	f7ff ff1a 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <HAL_RCC_ClockConfig+0x15c>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002638:	4a0b      	ldr	r2, [pc, #44]	; (8002668 <HAL_RCC_ClockConfig+0x160>)
 800263a:	5cd3      	ldrb	r3, [r2, r3]
 800263c:	40d8      	lsrs	r0, r3
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_RCC_ClockConfig+0x164>)
 8002640:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_RCC_ClockConfig+0x168>)
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	f7fe fd9f 	bl	8001188 <HAL_InitTick>
  return HAL_OK;
 800264a:	2000      	movs	r0, #0
}
 800264c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800264e:	2001      	movs	r0, #1
}
 8002650:	4770      	bx	lr
      return HAL_ERROR;
 8002652:	2001      	movs	r0, #1
 8002654:	e7fa      	b.n	800264c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8002656:	2001      	movs	r0, #1
 8002658:	e7f8      	b.n	800264c <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 800265a:	2001      	movs	r0, #1
 800265c:	e7f6      	b.n	800264c <HAL_RCC_ClockConfig+0x144>
 800265e:	bf00      	nop
 8002660:	40023c00 	.word	0x40023c00
 8002664:	40023800 	.word	0x40023800
 8002668:	080043a8 	.word	0x080043a8
 800266c:	20000004 	.word	0x20000004
 8002670:	2000000c 	.word	0x2000000c

08002674 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002674:	4b01      	ldr	r3, [pc, #4]	; (800267c <HAL_RCC_GetHCLKFreq+0x8>)
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000004 	.word	0x20000004

08002680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002680:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002682:	f7ff fff7 	bl	8002674 <HAL_RCC_GetHCLKFreq>
 8002686:	4b04      	ldr	r3, [pc, #16]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800268e:	4a03      	ldr	r2, [pc, #12]	; (800269c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002690:	5cd3      	ldrb	r3, [r2, r3]
}
 8002692:	40d8      	lsrs	r0, r3
 8002694:	bd08      	pop	{r3, pc}
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	080043b8 	.word	0x080043b8

080026a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026a2:	f7ff ffe7 	bl	8002674 <HAL_RCC_GetHCLKFreq>
 80026a6:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80026ae:	4a03      	ldr	r2, [pc, #12]	; (80026bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026b0:	5cd3      	ldrb	r3, [r2, r3]
}
 80026b2:	40d8      	lsrs	r0, r3
 80026b4:	bd08      	pop	{r3, pc}
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	080043b8 	.word	0x080043b8

080026c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026c2:	b083      	sub	sp, #12
 80026c4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026c6:	6806      	ldr	r6, [r0, #0]
 80026c8:	f016 0601 	ands.w	r6, r6, #1
 80026cc:	d00d      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026ce:	4bb5      	ldr	r3, [pc, #724]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8167 	beq.w	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  uint32_t plli2sused = 0;
 80026e8:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026ea:	6825      	ldr	r5, [r4, #0]
 80026ec:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 80026f0:	d011      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026f2:	4aac      	ldr	r2, [pc, #688]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026f4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80026f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80026fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80026fe:	430b      	orrs	r3, r1
 8002700:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002704:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800270a:	f000 8156 	beq.w	80029ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 8155 	beq.w	80029be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  uint32_t pllsaiused = 0;
 8002714:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800271c:	d00f      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800271e:	4aa1      	ldr	r2, [pc, #644]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002720:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002724:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002728:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800272a:	430b      	orrs	r3, r1
 800272c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002730:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002736:	f000 8144 	beq.w	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x302>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800273a:	b903      	cbnz	r3, 800273e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 800273c:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002744:	d000      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 8002746:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002748:	f013 0f20 	tst.w	r3, #32
 800274c:	f040 813b 	bne.w	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	f013 0f10 	tst.w	r3, #16
 8002756:	d00c      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002758:	4b92      	ldr	r3, [pc, #584]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800275a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800275e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002762:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002766:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800276a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800276c:	430a      	orrs	r2, r1
 800276e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002778:	d008      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800277a:	4a8a      	ldr	r2, [pc, #552]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800277c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002780:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002784:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002786:	430b      	orrs	r3, r1
 8002788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002792:	d008      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002794:	4a83      	ldr	r2, [pc, #524]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002796:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800279a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800279e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80027a0:	430b      	orrs	r3, r1
 80027a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80027ac:	d008      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027ae:	4a7d      	ldr	r2, [pc, #500]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80027b8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80027ba:	430b      	orrs	r3, r1
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027c6:	d008      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027c8:	4a76      	ldr	r2, [pc, #472]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027ce:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027d2:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80027d4:	430b      	orrs	r3, r1
 80027d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027e0:	d008      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027e2:	4a70      	ldr	r2, [pc, #448]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027e8:	f023 0303 	bic.w	r3, r3, #3
 80027ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80027ee:	430b      	orrs	r3, r1
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80027fa:	d008      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027fc:	4a69      	ldr	r2, [pc, #420]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002802:	f023 030c 	bic.w	r3, r3, #12
 8002806:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002808:	430b      	orrs	r3, r1
 800280a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002814:	d008      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002816:	4a63      	ldr	r2, [pc, #396]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002818:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800281c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002820:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002822:	430b      	orrs	r3, r1
 8002824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800282e:	d008      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002830:	4a5c      	ldr	r2, [pc, #368]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002832:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002836:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800283a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800283c:	430b      	orrs	r3, r1
 800283e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002848:	d008      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800284a:	4a56      	ldr	r2, [pc, #344]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800284c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002854:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002856:	430b      	orrs	r3, r1
 8002858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002862:	d008      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002864:	4a4f      	ldr	r2, [pc, #316]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002866:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800286a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800286e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002870:	430b      	orrs	r3, r1
 8002872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800287c:	d008      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800287e:	4a49      	ldr	r2, [pc, #292]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002880:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002884:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002888:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800288a:	430b      	orrs	r3, r1
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002896:	d008      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002898:	4a42      	ldr	r2, [pc, #264]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800289a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800289e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028a2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80028a4:	430b      	orrs	r3, r1
 80028a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80028b0:	d008      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028b2:	4a3c      	ldr	r2, [pc, #240]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028b4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80028b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028bc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80028be:	430b      	orrs	r3, r1
 80028c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80028ca:	d00d      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028cc:	4a35      	ldr	r2, [pc, #212]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80028d2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80028d6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80028d8:	430b      	orrs	r3, r1
 80028da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80028de:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80028e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028e4:	f000 80d5 	beq.w	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	f013 0f08 	tst.w	r3, #8
 80028ee:	d000      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 80028f0:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028f2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80028f6:	d008      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028f8:	4a2a      	ldr	r2, [pc, #168]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80028fe:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002902:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002904:	430b      	orrs	r3, r1
 8002906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002910:	d009      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002912:	4a24      	ldr	r2, [pc, #144]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002914:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002920:	430b      	orrs	r3, r1
 8002922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800292c:	d009      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800292e:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002930:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002934:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002938:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800293c:	430b      	orrs	r3, r1
 800293e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002948:	d009      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800294a:	4a16      	ldr	r2, [pc, #88]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800294c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002950:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002954:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8002958:	430b      	orrs	r3, r1
 800295a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002964:	d009      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002966:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002968:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800296c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002970:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002974:	430b      	orrs	r3, r1
 8002976:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800297a:	b926      	cbnz	r6, 8002986 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002982:	f000 8106 	beq.w	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002986:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002988:	6813      	ldr	r3, [r2, #0]
 800298a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800298e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002990:	f7fe fc3e 	bl	8001210 <HAL_GetTick>
 8002994:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002996:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800299e:	d07a      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 80029a0:	e002      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029a8:	f7fe fc32 	bl	8001210 <HAL_GetTick>
 80029ac:	1b80      	subs	r0, r0, r6
 80029ae:	2864      	cmp	r0, #100	; 0x64
 80029b0:	d9f1      	bls.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029b2:	2003      	movs	r0, #3
 80029b4:	e0f0      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      plli2sused = 1;
 80029b6:	2601      	movs	r6, #1
 80029b8:	e697      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 80029ba:	2601      	movs	r6, #1
 80029bc:	e6a7      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 80029be:	2501      	movs	r5, #1
 80029c0:	e6a9      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 80029c2:	2601      	movs	r6, #1
 80029c4:	e6b9      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	4b7f      	ldr	r3, [pc, #508]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80029c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80029da:	4a7b      	ldr	r2, [pc, #492]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80029dc:	6813      	ldr	r3, [r2, #0]
 80029de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80029e4:	f7fe fc14 	bl	8001210 <HAL_GetTick>
 80029e8:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029ea:	4b77      	ldr	r3, [pc, #476]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80029f2:	d106      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x342>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f4:	f7fe fc0c 	bl	8001210 <HAL_GetTick>
 80029f8:	1bc0      	subs	r0, r0, r7
 80029fa:	2864      	cmp	r0, #100	; 0x64
 80029fc:	d9f5      	bls.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x32a>
        return HAL_TIMEOUT;
 80029fe:	2003      	movs	r0, #3
 8002a00:	e0ca      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a02:	4b70      	ldr	r3, [pc, #448]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a06:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002a0a:	d015      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8002a0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a0e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d010      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x378>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a16:	4b6b      	ldr	r3, [pc, #428]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002a18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a1e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002a20:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002a24:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a26:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002a28:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002a2c:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002a2e:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	f013 0f01 	tst.w	r3, #1
 8002a36:	d112      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a3a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002a3e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002a42:	d01d      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002a44:	4a5f      	ldr	r2, [pc, #380]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002a46:	6893      	ldr	r3, [r2, #8]
 8002a48:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a4c:	6093      	str	r3, [r2, #8]
 8002a4e:	495d      	ldr	r1, [pc, #372]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002a50:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002a52:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a54:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	670b      	str	r3, [r1, #112]	; 0x70
 8002a5c:	e678      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8002a5e:	f7fe fbd7 	bl	8001210 <HAL_GetTick>
 8002a62:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a64:	4b57      	ldr	r3, [pc, #348]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	f013 0f02 	tst.w	r3, #2
 8002a6c:	d1e4      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x378>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a6e:	f7fe fbcf 	bl	8001210 <HAL_GetTick>
 8002a72:	1bc0      	subs	r0, r0, r7
 8002a74:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a78:	4298      	cmp	r0, r3
 8002a7a:	d9f3      	bls.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
            return HAL_TIMEOUT;
 8002a7c:	2003      	movs	r0, #3
 8002a7e:	e08b      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a80:	4850      	ldr	r0, [pc, #320]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002a82:	6882      	ldr	r2, [r0, #8]
 8002a84:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002a88:	4950      	ldr	r1, [pc, #320]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a8a:	4019      	ands	r1, r3
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	6082      	str	r2, [r0, #8]
 8002a90:	e7dd      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x38e>
      pllsaiused = 1;
 8002a92:	2501      	movs	r5, #1
 8002a94:	e728      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	f013 0f01 	tst.w	r3, #1
 8002a9c:	d013      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002a9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002aa0:	b98b      	cbnz	r3, 8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002aa2:	4a48      	ldr	r2, [pc, #288]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002aa4:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002aa8:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002aac:	6860      	ldr	r0, [r4, #4]
 8002aae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002ab6:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002aba:	430b      	orrs	r3, r1
 8002abc:	68a1      	ldr	r1, [r4, #8]
 8002abe:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002ac2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002ace:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ad0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002ad4:	d006      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002ad6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002ada:	d01e      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x45a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002adc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae2:	d11a      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x45a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ae4:	4a37      	ldr	r2, [pc, #220]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002ae6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002aea:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002aee:	6860      	ldr	r0, [r4, #4]
 8002af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002af8:	68e0      	ldr	r0, [r4, #12]
 8002afa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002afe:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002b02:	430b      	orrs	r3, r1
 8002b04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b08:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002b0c:	f023 031f 	bic.w	r3, r3, #31
 8002b10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b12:	3901      	subs	r1, #1
 8002b14:	430b      	orrs	r3, r1
 8002b16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002b20:	d011      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b22:	4a28      	ldr	r2, [pc, #160]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b24:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b28:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b2c:	6866      	ldr	r6, [r4, #4]
 8002b2e:	6923      	ldr	r3, [r4, #16]
 8002b30:	041b      	lsls	r3, r3, #16
 8002b32:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8002b36:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002b3a:	4303      	orrs	r3, r0
 8002b3c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002b40:	430b      	orrs	r3, r1
 8002b42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b4c:	d00d      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b4e:	6862      	ldr	r2, [r4, #4]
 8002b50:	6923      	ldr	r3, [r4, #16]
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002b58:	68e2      	ldr	r2, [r4, #12]
 8002b5a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002b5e:	68a2      	ldr	r2, [r4, #8]
 8002b60:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002b64:	4a17      	ldr	r2, [pc, #92]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b66:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b6a:	4a16      	ldr	r2, [pc, #88]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b6c:	6813      	ldr	r3, [r2, #0]
 8002b6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b74:	f7fe fb4c 	bl	8001210 <HAL_GetTick>
 8002b78:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b7a:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002b82:	d106      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b84:	f7fe fb44 	bl	8001210 <HAL_GetTick>
 8002b88:	1b80      	subs	r0, r0, r6
 8002b8a:	2864      	cmp	r0, #100	; 0x64
 8002b8c:	d9f5      	bls.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b8e:	2003      	movs	r0, #3
 8002b90:	e002      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b92:	2d01      	cmp	r5, #1
 8002b94:	d002      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002b96:	2000      	movs	r0, #0
}
 8002b98:	b003      	add	sp, #12
 8002b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8002b9c:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b9e:	6813      	ldr	r3, [r2, #0]
 8002ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002ba6:	f7fe fb33 	bl	8001210 <HAL_GetTick>
 8002baa:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002bb4:	d00c      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x510>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bb6:	f7fe fb2b 	bl	8001210 <HAL_GetTick>
 8002bba:	1b40      	subs	r0, r0, r5
 8002bbc:	2864      	cmp	r0, #100	; 0x64
 8002bbe:	d9f5      	bls.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        return HAL_TIMEOUT;
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	e7e9      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40007000 	.word	0x40007000
 8002bcc:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8002bd8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002bda:	b122      	cbz	r2, 8002be6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002bdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002be0:	d01d      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x55e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002be2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002be4:	b9db      	cbnz	r3, 8002c1e <HAL_RCCEx_PeriphCLKConfig+0x55e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002be6:	4a35      	ldr	r2, [pc, #212]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002be8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bec:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bf0:	6960      	ldr	r0, [r4, #20]
 8002bf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002bfa:	69a0      	ldr	r0, [r4, #24]
 8002bfc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002c00:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002c04:	430b      	orrs	r3, r1
 8002c06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c0a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002c0e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002c12:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002c14:	3901      	subs	r1, #1
 8002c16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002c24:	d003      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8002c26:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002c28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c2c:	d031      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	f013 0f08 	tst.w	r3, #8
 8002c34:	d019      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c36:	4a21      	ldr	r2, [pc, #132]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002c38:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c3c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c40:	6960      	ldr	r0, [r4, #20]
 8002c42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c46:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002c4a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	69e1      	ldr	r1, [r4, #28]
 8002c52:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002c56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c5a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002c5e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002c64:	430b      	orrs	r3, r1
 8002c66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002c6a:	4a14      	ldr	r2, [pc, #80]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002c6c:	6813      	ldr	r3, [r2, #0]
 8002c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c72:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002c74:	f7fe facc 	bl	8001210 <HAL_GetTick>
 8002c78:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002c82:	d119      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c84:	f7fe fac4 	bl	8001210 <HAL_GetTick>
 8002c88:	1b00      	subs	r0, r0, r4
 8002c8a:	2864      	cmp	r0, #100	; 0x64
 8002c8c:	d9f5      	bls.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
        return HAL_TIMEOUT;
 8002c8e:	2003      	movs	r0, #3
 8002c90:	e782      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002c94:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c98:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c9c:	6965      	ldr	r5, [r4, #20]
 8002c9e:	6a23      	ldr	r3, [r4, #32]
 8002ca0:	041b      	lsls	r3, r3, #16
 8002ca2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002ca6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002caa:	4303      	orrs	r3, r0
 8002cac:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002cb6:	e7ba      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  return HAL_OK;
 8002cb8:	2000      	movs	r0, #0
 8002cba:	e76d      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8002cbc:	40023800 	.word	0x40023800

08002cc0 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002cc0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc2:	e852 3f00 	ldrex	r3, [r2]
 8002cc6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cca:	e842 3100 	strex	r1, r3, [r2]
 8002cce:	2900      	cmp	r1, #0
 8002cd0:	d1f6      	bne.n	8002cc0 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cd2:	2320      	movs	r3, #32
 8002cd4:	67c3      	str	r3, [r0, #124]	; 0x7c
}
 8002cd6:	4770      	bx	lr

08002cd8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cda:	e852 3f00 	ldrex	r3, [r2]
 8002cde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce2:	e842 3100 	strex	r1, r3, [r2]
 8002ce6:	2900      	cmp	r1, #0
 8002ce8:	d1f6      	bne.n	8002cd8 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	f102 0308 	add.w	r3, r2, #8
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf8:	3208      	adds	r2, #8
 8002cfa:	e842 3100 	strex	r1, r3, [r2]
 8002cfe:	2900      	cmp	r1, #0
 8002d00:	d1f3      	bne.n	8002cea <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d02:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d006      	beq.n	8002d16 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d08:	2320      	movs	r3, #32
 8002d0a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d12:	6683      	str	r3, [r0, #104]	; 0x68
}
 8002d14:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d16:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d18:	e852 3f00 	ldrex	r3, [r2]
 8002d1c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d20:	e842 3100 	strex	r1, r3, [r2]
 8002d24:	2900      	cmp	r1, #0
 8002d26:	d1f6      	bne.n	8002d16 <UART_EndRxTransfer+0x3e>
 8002d28:	e7ee      	b.n	8002d08 <UART_EndRxTransfer+0x30>

08002d2a <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d2a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002d2c:	2b21      	cmp	r3, #33	; 0x21
 8002d2e:	d000      	beq.n	8002d32 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002d30:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8002d32:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	b993      	cbnz	r3, 8002d60 <UART_TxISR_8BIT+0x36>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002d3a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3c:	e852 3f00 	ldrex	r3, [r2]
 8002d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d44:	e842 3100 	strex	r1, r3, [r2]
 8002d48:	2900      	cmp	r1, #0
 8002d4a:	d1f6      	bne.n	8002d3a <UART_TxISR_8BIT+0x10>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d4c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4e:	e852 3f00 	ldrex	r3, [r2]
 8002d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d56:	e842 3100 	strex	r1, r3, [r2]
 8002d5a:	2900      	cmp	r1, #0
 8002d5c:	d1f6      	bne.n	8002d4c <UART_TxISR_8BIT+0x22>
 8002d5e:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002d60:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002d62:	781a      	ldrb	r2, [r3, #0]
 8002d64:	6803      	ldr	r3, [r0, #0]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8002d68:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002d6e:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8002d7c:	e7d8      	b.n	8002d30 <UART_TxISR_8BIT+0x6>

08002d7e <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d7e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002d80:	2b21      	cmp	r3, #33	; 0x21
 8002d82:	d000      	beq.n	8002d86 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002d84:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8002d86:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	b993      	cbnz	r3, 8002db4 <UART_TxISR_16BIT+0x36>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002d8e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	e852 3f00 	ldrex	r3, [r2]
 8002d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d98:	e842 3100 	strex	r1, r3, [r2]
 8002d9c:	2900      	cmp	r1, #0
 8002d9e:	d1f6      	bne.n	8002d8e <UART_TxISR_16BIT+0x10>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002da0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da2:	e852 3f00 	ldrex	r3, [r2]
 8002da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002daa:	e842 3100 	strex	r1, r3, [r2]
 8002dae:	2900      	cmp	r1, #0
 8002db0:	d1f6      	bne.n	8002da0 <UART_TxISR_16BIT+0x22>
 8002db2:	4770      	bx	lr
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002db4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	6802      	ldr	r2, [r0, #0]
 8002dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dbe:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8002dc0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002dc6:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8002dd4:	e7d6      	b.n	8002d84 <UART_TxISR_16BIT+0x6>
	...

08002dd8 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8002dd8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d125      	bne.n	8002e2a <HAL_UART_Transmit_IT+0x52>
    if ((pData == NULL) || (Size == 0U))
 8002dde:	2a00      	cmp	r2, #0
 8002de0:	bf18      	it	ne
 8002de2:	2900      	cmpne	r1, #0
 8002de4:	d023      	beq.n	8002e2e <HAL_UART_Transmit_IT+0x56>
    huart->pTxBuffPtr  = pData;
 8002de6:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002de8:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8002dec:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df8:	2321      	movs	r3, #33	; 0x21
 8002dfa:	67c3      	str	r3, [r0, #124]	; 0x7c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dfc:	6883      	ldr	r3, [r0, #8]
 8002dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e02:	d00c      	beq.n	8002e1e <HAL_UART_Transmit_IT+0x46>
      huart->TxISR = UART_TxISR_8BIT;
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_UART_Transmit_IT+0x5c>)
 8002e06:	66c3      	str	r3, [r0, #108]	; 0x6c
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002e08:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0a:	e852 3f00 	ldrex	r3, [r2]
 8002e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e12:	e842 3100 	strex	r1, r3, [r2]
 8002e16:	2900      	cmp	r1, #0
 8002e18:	d1f6      	bne.n	8002e08 <HAL_UART_Transmit_IT+0x30>
    return HAL_OK;
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1e:	6903      	ldr	r3, [r0, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ef      	bne.n	8002e04 <HAL_UART_Transmit_IT+0x2c>
      huart->TxISR = UART_TxISR_16BIT;
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <HAL_UART_Transmit_IT+0x60>)
 8002e26:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002e28:	e7ee      	b.n	8002e08 <HAL_UART_Transmit_IT+0x30>
    return HAL_BUSY;
 8002e2a:	2002      	movs	r0, #2
 8002e2c:	4770      	bx	lr
      return HAL_ERROR;
 8002e2e:	2001      	movs	r0, #1
}
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	08002d2b 	.word	0x08002d2b
 8002e38:	08002d7f 	.word	0x08002d7f

08002e3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e3c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e3e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e40:	e852 3f00 	ldrex	r3, [r2]
 8002e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e48:	e842 3100 	strex	r1, r3, [r2]
 8002e4c:	2900      	cmp	r1, #0
 8002e4e:	d1f6      	bne.n	8002e3e <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e50:	2320      	movs	r3, #32
 8002e52:	67c3      	str	r3, [r0, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	66c3      	str	r3, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e58:	f7fd fede 	bl	8000c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e5c:	bd08      	pop	{r3, pc}

08002e5e <HAL_UART_RxCpltCallback>:
}
 8002e5e:	4770      	bx	lr

08002e60 <HAL_UART_RxHalfCpltCallback>:
}
 8002e60:	4770      	bx	lr

08002e62 <HAL_UART_ErrorCallback>:
}
 8002e62:	4770      	bx	lr

08002e64 <UART_DMAError>:
{
 8002e64:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e66:	6b84      	ldr	r4, [r0, #56]	; 0x38
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002e68:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002e6a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e76:	d001      	beq.n	8002e7c <UART_DMAError+0x18>
 8002e78:	2a21      	cmp	r2, #33	; 0x21
 8002e7a:	d010      	beq.n	8002e9e <UART_DMAError+0x3a>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e84:	d001      	beq.n	8002e8a <UART_DMAError+0x26>
 8002e86:	2d22      	cmp	r5, #34	; 0x22
 8002e88:	d010      	beq.n	8002eac <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002e8a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8002e8e:	f043 0310 	orr.w	r3, r3, #16
 8002e92:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  HAL_UART_ErrorCallback(huart);
 8002e96:	4620      	mov	r0, r4
 8002e98:	f7ff ffe3 	bl	8002e62 <HAL_UART_ErrorCallback>
}
 8002e9c:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	f7ff ff0b 	bl	8002cc0 <UART_EndTxTransfer>
 8002eaa:	e7e7      	b.n	8002e7c <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	f7ff ff10 	bl	8002cd8 <UART_EndRxTransfer>
 8002eb8:	e7e7      	b.n	8002e8a <UART_DMAError+0x26>

08002eba <UART_DMAAbortOnError>:
{
 8002eba:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ebc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002ec4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002ec8:	f7ff ffcb 	bl	8002e62 <HAL_UART_ErrorCallback>
}
 8002ecc:	bd08      	pop	{r3, pc}

08002ece <UART_DMARxHalfCplt>:
{
 8002ece:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ed0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ed6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d002      	beq.n	8002ee2 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8002edc:	f7ff ffc0 	bl	8002e60 <HAL_UART_RxHalfCpltCallback>
}
 8002ee0:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002ee2:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8002ee6:	0849      	lsrs	r1, r1, #1
 8002ee8:	f7fd fb84 	bl	80005f4 <HAL_UARTEx_RxEventCallback>
 8002eec:	e7f8      	b.n	8002ee0 <UART_DMARxHalfCplt+0x12>

08002eee <UART_DMAReceiveCplt>:
{
 8002eee:	b508      	push	{r3, lr}
 8002ef0:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ef2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efa:	d029      	beq.n	8002f50 <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f02:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f04:	e852 3f00 	ldrex	r3, [r2]
 8002f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0c:	e842 3100 	strex	r1, r3, [r2]
 8002f10:	2900      	cmp	r1, #0
 8002f12:	d1f6      	bne.n	8002f02 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f14:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f16:	f102 0308 	add.w	r3, r2, #8
 8002f1a:	e853 3f00 	ldrex	r3, [r3]
 8002f1e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f22:	3208      	adds	r2, #8
 8002f24:	e842 3100 	strex	r1, r3, [r2]
 8002f28:	2900      	cmp	r1, #0
 8002f2a:	d1f3      	bne.n	8002f14 <UART_DMAReceiveCplt+0x26>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f2c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2e:	f102 0308 	add.w	r3, r2, #8
 8002f32:	e853 3f00 	ldrex	r3, [r3]
 8002f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3a:	3208      	adds	r2, #8
 8002f3c:	e842 3100 	strex	r1, r3, [r2]
 8002f40:	2900      	cmp	r1, #0
 8002f42:	d1f3      	bne.n	8002f2c <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 8002f44:	2320      	movs	r3, #32
 8002f46:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f4a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d007      	beq.n	8002f60 <UART_DMAReceiveCplt+0x72>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f50:	2300      	movs	r3, #0
 8002f52:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f54:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d00c      	beq.n	8002f74 <UART_DMAReceiveCplt+0x86>
    HAL_UART_RxCpltCallback(huart);
 8002f5a:	f7ff ff80 	bl	8002e5e <HAL_UART_RxCpltCallback>
}
 8002f5e:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f60:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f62:	e852 3f00 	ldrex	r3, [r2]
 8002f66:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	e842 3100 	strex	r1, r3, [r2]
 8002f6e:	2900      	cmp	r1, #0
 8002f70:	d1f6      	bne.n	8002f60 <UART_DMAReceiveCplt+0x72>
 8002f72:	e7ed      	b.n	8002f50 <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f74:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8002f78:	f7fd fb3c 	bl	80005f4 <HAL_UARTEx_RxEventCallback>
 8002f7c:	e7ef      	b.n	8002f5e <UART_DMAReceiveCplt+0x70>

08002f7e <HAL_UARTEx_WakeupCallback>:
}
 8002f7e:	4770      	bx	lr

08002f80 <HAL_UART_IRQHandler>:
{
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f84:	6801      	ldr	r1, [r0, #0]
 8002f86:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f88:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f8a:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f8c:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8002f90:	401a      	ands	r2, r3
 8002f92:	d105      	bne.n	8002fa0 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f94:	f013 0f20 	tst.w	r3, #32
 8002f98:	d002      	beq.n	8002fa0 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f9a:	f010 0f20 	tst.w	r0, #32
 8002f9e:	d120      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x62>
  if ((errorflags != 0U)
 8002fa0:	b12a      	cbz	r2, 8002fae <HAL_UART_IRQHandler+0x2e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fa2:	f015 0201 	ands.w	r2, r5, #1
 8002fa6:	d122      	bne.n	8002fee <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fa8:	4eae      	ldr	r6, [pc, #696]	; (8003264 <HAL_UART_IRQHandler+0x2e4>)
 8002faa:	4230      	tst	r0, r6
 8002fac:	d11f      	bne.n	8002fee <HAL_UART_IRQHandler+0x6e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fae:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002fb0:	2a01      	cmp	r2, #1
 8002fb2:	f000 80ab 	beq.w	800310c <HAL_UART_IRQHandler+0x18c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fb6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002fba:	d003      	beq.n	8002fc4 <HAL_UART_IRQHandler+0x44>
 8002fbc:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8002fc0:	f040 813e 	bne.w	8003240 <HAL_UART_IRQHandler+0x2c0>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002fc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002fc8:	d003      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x52>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fca:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002fce:	f040 813e 	bne.w	800324e <HAL_UART_IRQHandler+0x2ce>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fd2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002fd6:	d003      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x60>
 8002fd8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002fdc:	f040 813e 	bne.w	800325c <HAL_UART_IRQHandler+0x2dc>
}
 8002fe0:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8002fe2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0fb      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x60>
        huart->RxISR(huart);
 8002fe8:	4620      	mov	r0, r4
 8002fea:	4798      	blx	r3
      return;
 8002fec:	e7f8      	b.n	8002fe0 <HAL_UART_IRQHandler+0x60>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fee:	f013 0f01 	tst.w	r3, #1
 8002ff2:	d009      	beq.n	8003008 <HAL_UART_IRQHandler+0x88>
 8002ff4:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002ff8:	d006      	beq.n	8003008 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ffa:	2501      	movs	r5, #1
 8002ffc:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ffe:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003002:	4329      	orrs	r1, r5
 8003004:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003008:	f013 0f02 	tst.w	r3, #2
 800300c:	d009      	beq.n	8003022 <HAL_UART_IRQHandler+0xa2>
 800300e:	b142      	cbz	r2, 8003022 <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003010:	6821      	ldr	r1, [r4, #0]
 8003012:	2502      	movs	r5, #2
 8003014:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003016:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800301a:	f041 0104 	orr.w	r1, r1, #4
 800301e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003022:	f013 0f04 	tst.w	r3, #4
 8003026:	d009      	beq.n	800303c <HAL_UART_IRQHandler+0xbc>
 8003028:	b142      	cbz	r2, 800303c <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800302a:	6821      	ldr	r1, [r4, #0]
 800302c:	2504      	movs	r5, #4
 800302e:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003030:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003034:	f041 0102 	orr.w	r1, r1, #2
 8003038:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 800303c:	f013 0f08 	tst.w	r3, #8
 8003040:	d00b      	beq.n	800305a <HAL_UART_IRQHandler+0xda>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003042:	f010 0f20 	tst.w	r0, #32
 8003046:	d100      	bne.n	800304a <HAL_UART_IRQHandler+0xca>
 8003048:	b13a      	cbz	r2, 800305a <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800304a:	6822      	ldr	r2, [r4, #0]
 800304c:	2108      	movs	r1, #8
 800304e:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003050:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003054:	430a      	orrs	r2, r1
 8003056:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800305a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800305e:	d00c      	beq.n	800307a <HAL_UART_IRQHandler+0xfa>
 8003060:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8003064:	d009      	beq.n	800307a <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003066:	6822      	ldr	r2, [r4, #0]
 8003068:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800306c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800306e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003072:	f042 0220 	orr.w	r2, r2, #32
 8003076:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800307a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800307e:	2a00      	cmp	r2, #0
 8003080:	d0ae      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x60>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003082:	f013 0f20 	tst.w	r3, #32
 8003086:	d006      	beq.n	8003096 <HAL_UART_IRQHandler+0x116>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003088:	f010 0f20 	tst.w	r0, #32
 800308c:	d003      	beq.n	8003096 <HAL_UART_IRQHandler+0x116>
        if (huart->RxISR != NULL)
 800308e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003090:	b10b      	cbz	r3, 8003096 <HAL_UART_IRQHandler+0x116>
          huart->RxISR(huart);
 8003092:	4620      	mov	r0, r4
 8003094:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8003096:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f013 0f40 	tst.w	r3, #64	; 0x40
 80030a2:	d102      	bne.n	80030aa <HAL_UART_IRQHandler+0x12a>
 80030a4:	f012 0f28 	tst.w	r2, #40	; 0x28
 80030a8:	d029      	beq.n	80030fe <HAL_UART_IRQHandler+0x17e>
        UART_EndRxTransfer(huart);
 80030aa:	4620      	mov	r0, r4
 80030ac:	f7ff fe14 	bl	8002cd8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80030b8:	d01d      	beq.n	80030f6 <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ba:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030bc:	f102 0308 	add.w	r3, r2, #8
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c8:	3208      	adds	r2, #8
 80030ca:	e842 3100 	strex	r1, r3, [r2]
 80030ce:	2900      	cmp	r1, #0
 80030d0:	d1f3      	bne.n	80030ba <HAL_UART_IRQHandler+0x13a>
          if (huart->hdmarx != NULL)
 80030d2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80030d4:	b15b      	cbz	r3, 80030ee <HAL_UART_IRQHandler+0x16e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030d6:	4a64      	ldr	r2, [pc, #400]	; (8003268 <HAL_UART_IRQHandler+0x2e8>)
 80030d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030da:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80030dc:	f7fe fbca 	bl	8001874 <HAL_DMA_Abort_IT>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	f43f af7d 	beq.w	8002fe0 <HAL_UART_IRQHandler+0x60>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030e6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80030e8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80030ea:	4798      	blx	r3
 80030ec:	e778      	b.n	8002fe0 <HAL_UART_IRQHandler+0x60>
            HAL_UART_ErrorCallback(huart);
 80030ee:	4620      	mov	r0, r4
 80030f0:	f7ff feb7 	bl	8002e62 <HAL_UART_ErrorCallback>
 80030f4:	e774      	b.n	8002fe0 <HAL_UART_IRQHandler+0x60>
          HAL_UART_ErrorCallback(huart);
 80030f6:	4620      	mov	r0, r4
 80030f8:	f7ff feb3 	bl	8002e62 <HAL_UART_ErrorCallback>
 80030fc:	e770      	b.n	8002fe0 <HAL_UART_IRQHandler+0x60>
        HAL_UART_ErrorCallback(huart);
 80030fe:	4620      	mov	r0, r4
 8003100:	f7ff feaf 	bl	8002e62 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003104:	2300      	movs	r3, #0
 8003106:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return;
 800310a:	e769      	b.n	8002fe0 <HAL_UART_IRQHandler+0x60>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800310c:	f013 0f10 	tst.w	r3, #16
 8003110:	f43f af51 	beq.w	8002fb6 <HAL_UART_IRQHandler+0x36>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003114:	f010 0f10 	tst.w	r0, #16
 8003118:	f43f af4d 	beq.w	8002fb6 <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800311c:	2310      	movs	r3, #16
 800311e:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003128:	d050      	beq.n	80031cc <HAL_UART_IRQHandler+0x24c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800312a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800312c:	6813      	ldr	r3, [r2, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003132:	2b00      	cmp	r3, #0
 8003134:	f43f af54 	beq.w	8002fe0 <HAL_UART_IRQHandler+0x60>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003138:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800313c:	4299      	cmp	r1, r3
 800313e:	f67f af4f 	bls.w	8002fe0 <HAL_UART_IRQHandler+0x60>
        huart->RxXferCount = nb_remaining_rx_data;
 8003142:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003146:	69d3      	ldr	r3, [r2, #28]
 8003148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800314c:	d031      	beq.n	80031b2 <HAL_UART_IRQHandler+0x232>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800314e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003150:	e852 3f00 	ldrex	r3, [r2]
 8003154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003158:	e842 3100 	strex	r1, r3, [r2]
 800315c:	2900      	cmp	r1, #0
 800315e:	d1f6      	bne.n	800314e <HAL_UART_IRQHandler+0x1ce>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003160:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003162:	f102 0308 	add.w	r3, r2, #8
 8003166:	e853 3f00 	ldrex	r3, [r3]
 800316a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316e:	3208      	adds	r2, #8
 8003170:	e842 3100 	strex	r1, r3, [r2]
 8003174:	2900      	cmp	r1, #0
 8003176:	d1f3      	bne.n	8003160 <HAL_UART_IRQHandler+0x1e0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003178:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	f102 0308 	add.w	r3, r2, #8
 800317e:	e853 3f00 	ldrex	r3, [r3]
 8003182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	3208      	adds	r2, #8
 8003188:	e842 3100 	strex	r1, r3, [r2]
 800318c:	2900      	cmp	r1, #0
 800318e:	d1f3      	bne.n	8003178 <HAL_UART_IRQHandler+0x1f8>
          huart->RxState = HAL_UART_STATE_READY;
 8003190:	2320      	movs	r3, #32
 8003192:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003196:	2300      	movs	r3, #0
 8003198:	6623      	str	r3, [r4, #96]	; 0x60
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319c:	e852 3f00 	ldrex	r3, [r2]
 80031a0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a4:	e842 3100 	strex	r1, r3, [r2]
 80031a8:	2900      	cmp	r1, #0
 80031aa:	d1f6      	bne.n	800319a <HAL_UART_IRQHandler+0x21a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031ac:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80031ae:	f7fe fb17 	bl	80017e0 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031b2:	2302      	movs	r3, #2
 80031b4:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031b6:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80031ba:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	1ac9      	subs	r1, r1, r3
 80031c2:	b289      	uxth	r1, r1
 80031c4:	4620      	mov	r0, r4
 80031c6:	f7fd fa15 	bl	80005f4 <HAL_UARTEx_RxEventCallback>
      return;
 80031ca:	e709      	b.n	8002fe0 <HAL_UART_IRQHandler+0x60>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031cc:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80031d0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	1ac9      	subs	r1, r1, r3
 80031d8:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80031da:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f43f aefd 	beq.w	8002fe0 <HAL_UART_IRQHandler+0x60>
          && (nb_rx_data > 0U))
 80031e6:	2900      	cmp	r1, #0
 80031e8:	f43f aefa 	beq.w	8002fe0 <HAL_UART_IRQHandler+0x60>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ee:	e852 3f00 	ldrex	r3, [r2]
 80031f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	e842 3000 	strex	r0, r3, [r2]
 80031fa:	2800      	cmp	r0, #0
 80031fc:	d1f6      	bne.n	80031ec <HAL_UART_IRQHandler+0x26c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003200:	f102 0308 	add.w	r3, r2, #8
 8003204:	e853 3f00 	ldrex	r3, [r3]
 8003208:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320c:	3208      	adds	r2, #8
 800320e:	e842 3000 	strex	r0, r3, [r2]
 8003212:	2800      	cmp	r0, #0
 8003214:	d1f3      	bne.n	80031fe <HAL_UART_IRQHandler+0x27e>
        huart->RxState = HAL_UART_STATE_READY;
 8003216:	2320      	movs	r3, #32
 8003218:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321c:	2300      	movs	r3, #0
 800321e:	6623      	str	r3, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8003220:	66a3      	str	r3, [r4, #104]	; 0x68
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003222:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	e852 3f00 	ldrex	r3, [r2]
 8003228:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322c:	e842 3000 	strex	r0, r3, [r2]
 8003230:	2800      	cmp	r0, #0
 8003232:	d1f6      	bne.n	8003222 <HAL_UART_IRQHandler+0x2a2>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003234:	2302      	movs	r3, #2
 8003236:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003238:	4620      	mov	r0, r4
 800323a:	f7fd f9db 	bl	80005f4 <HAL_UARTEx_RxEventCallback>
      return;
 800323e:	e6cf      	b.n	8002fe0 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003240:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003244:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003246:	4620      	mov	r0, r4
 8003248:	f7ff fe99 	bl	8002f7e <HAL_UARTEx_WakeupCallback>
    return;
 800324c:	e6c8      	b.n	8002fe0 <HAL_UART_IRQHandler+0x60>
    if (huart->TxISR != NULL)
 800324e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003250:	2b00      	cmp	r3, #0
 8003252:	f43f aec5 	beq.w	8002fe0 <HAL_UART_IRQHandler+0x60>
      huart->TxISR(huart);
 8003256:	4620      	mov	r0, r4
 8003258:	4798      	blx	r3
    return;
 800325a:	e6c1      	b.n	8002fe0 <HAL_UART_IRQHandler+0x60>
    UART_EndTransmit_IT(huart);
 800325c:	4620      	mov	r0, r4
 800325e:	f7ff fded 	bl	8002e3c <UART_EndTransmit_IT>
    return;
 8003262:	e6bd      	b.n	8002fe0 <HAL_UART_IRQHandler+0x60>
 8003264:	04000120 	.word	0x04000120
 8003268:	08002ebb 	.word	0x08002ebb

0800326c <UART_SetConfig>:
{
 800326c:	b510      	push	{r4, lr}
 800326e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003270:	6883      	ldr	r3, [r0, #8]
 8003272:	6902      	ldr	r2, [r0, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	6942      	ldr	r2, [r0, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	69c2      	ldr	r2, [r0, #28]
 800327c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800327e:	6801      	ldr	r1, [r0, #0]
 8003280:	6808      	ldr	r0, [r1, #0]
 8003282:	4a93      	ldr	r2, [pc, #588]	; (80034d0 <UART_SetConfig+0x264>)
 8003284:	4002      	ands	r2, r0
 8003286:	4313      	orrs	r3, r2
 8003288:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800328a:	6822      	ldr	r2, [r4, #0]
 800328c:	6853      	ldr	r3, [r2, #4]
 800328e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003292:	68e1      	ldr	r1, [r4, #12]
 8003294:	430b      	orrs	r3, r1
 8003296:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003298:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 800329a:	6a23      	ldr	r3, [r4, #32]
 800329c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800329e:	6821      	ldr	r1, [r4, #0]
 80032a0:	688b      	ldr	r3, [r1, #8]
 80032a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	4a89      	ldr	r2, [pc, #548]	; (80034d4 <UART_SetConfig+0x268>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d019      	beq.n	80032e6 <UART_SetConfig+0x7a>
 80032b2:	4a89      	ldr	r2, [pc, #548]	; (80034d8 <UART_SetConfig+0x26c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d029      	beq.n	800330c <UART_SetConfig+0xa0>
 80032b8:	4a88      	ldr	r2, [pc, #544]	; (80034dc <UART_SetConfig+0x270>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d03e      	beq.n	800333c <UART_SetConfig+0xd0>
 80032be:	4a88      	ldr	r2, [pc, #544]	; (80034e0 <UART_SetConfig+0x274>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d062      	beq.n	800338a <UART_SetConfig+0x11e>
 80032c4:	4a87      	ldr	r2, [pc, #540]	; (80034e4 <UART_SetConfig+0x278>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d071      	beq.n	80033ae <UART_SetConfig+0x142>
 80032ca:	4a87      	ldr	r2, [pc, #540]	; (80034e8 <UART_SetConfig+0x27c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	f000 8083 	beq.w	80033d8 <UART_SetConfig+0x16c>
 80032d2:	4a86      	ldr	r2, [pc, #536]	; (80034ec <UART_SetConfig+0x280>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	f000 8094 	beq.w	8003402 <UART_SetConfig+0x196>
 80032da:	4a85      	ldr	r2, [pc, #532]	; (80034f0 <UART_SetConfig+0x284>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	f000 80a5 	beq.w	800342c <UART_SetConfig+0x1c0>
 80032e2:	2310      	movs	r3, #16
 80032e4:	e03a      	b.n	800335c <UART_SetConfig+0xf0>
 80032e6:	4b83      	ldr	r3, [pc, #524]	; (80034f4 <UART_SetConfig+0x288>)
 80032e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d809      	bhi.n	8003308 <UART_SetConfig+0x9c>
 80032f4:	e8df f003 	tbb	[pc, r3]
 80032f8:	06ae0402 	.word	0x06ae0402
 80032fc:	2301      	movs	r3, #1
 80032fe:	e02d      	b.n	800335c <UART_SetConfig+0xf0>
 8003300:	2304      	movs	r3, #4
 8003302:	e02b      	b.n	800335c <UART_SetConfig+0xf0>
 8003304:	2308      	movs	r3, #8
 8003306:	e029      	b.n	800335c <UART_SetConfig+0xf0>
 8003308:	2310      	movs	r3, #16
 800330a:	e027      	b.n	800335c <UART_SetConfig+0xf0>
 800330c:	4b79      	ldr	r3, [pc, #484]	; (80034f4 <UART_SetConfig+0x288>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b0c      	cmp	r3, #12
 8003318:	d80e      	bhi.n	8003338 <UART_SetConfig+0xcc>
 800331a:	e8df f003 	tbb	[pc, r3]
 800331e:	0d07      	.short	0x0d07
 8003320:	0d090d0d 	.word	0x0d090d0d
 8003324:	0d9d0d0d 	.word	0x0d9d0d0d
 8003328:	0d0d      	.short	0x0d0d
 800332a:	0b          	.byte	0x0b
 800332b:	00          	.byte	0x00
 800332c:	2300      	movs	r3, #0
 800332e:	e015      	b.n	800335c <UART_SetConfig+0xf0>
 8003330:	2304      	movs	r3, #4
 8003332:	e013      	b.n	800335c <UART_SetConfig+0xf0>
 8003334:	2308      	movs	r3, #8
 8003336:	e011      	b.n	800335c <UART_SetConfig+0xf0>
 8003338:	2310      	movs	r3, #16
 800333a:	e00f      	b.n	800335c <UART_SetConfig+0xf0>
 800333c:	4b6d      	ldr	r3, [pc, #436]	; (80034f4 <UART_SetConfig+0x288>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003342:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003346:	2b20      	cmp	r3, #32
 8003348:	f000 8088 	beq.w	800345c <UART_SetConfig+0x1f0>
 800334c:	d819      	bhi.n	8003382 <UART_SetConfig+0x116>
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 8086 	beq.w	8003460 <UART_SetConfig+0x1f4>
 8003354:	2b10      	cmp	r3, #16
 8003356:	f040 8085 	bne.w	8003464 <UART_SetConfig+0x1f8>
 800335a:	2304      	movs	r3, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800335c:	69e0      	ldr	r0, [r4, #28]
 800335e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003362:	f000 80ab 	beq.w	80034bc <UART_SetConfig+0x250>
    switch (clocksource)
 8003366:	2b08      	cmp	r3, #8
 8003368:	f200 810c 	bhi.w	8003584 <UART_SetConfig+0x318>
 800336c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003370:	00fb00e8 	.word	0x00fb00e8
 8003374:	010a00e6 	.word	0x010a00e6
 8003378:	010a00fe 	.word	0x010a00fe
 800337c:	010a010a 	.word	0x010a010a
 8003380:	0101      	.short	0x0101
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003382:	2b30      	cmp	r3, #48	; 0x30
 8003384:	d170      	bne.n	8003468 <UART_SetConfig+0x1fc>
 8003386:	2308      	movs	r3, #8
 8003388:	e7e8      	b.n	800335c <UART_SetConfig+0xf0>
 800338a:	4b5a      	ldr	r3, [pc, #360]	; (80034f4 <UART_SetConfig+0x288>)
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003390:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003394:	2b80      	cmp	r3, #128	; 0x80
 8003396:	d069      	beq.n	800346c <UART_SetConfig+0x200>
 8003398:	d805      	bhi.n	80033a6 <UART_SetConfig+0x13a>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d068      	beq.n	8003470 <UART_SetConfig+0x204>
 800339e:	2b40      	cmp	r3, #64	; 0x40
 80033a0:	d168      	bne.n	8003474 <UART_SetConfig+0x208>
 80033a2:	2304      	movs	r3, #4
 80033a4:	e7da      	b.n	800335c <UART_SetConfig+0xf0>
 80033a6:	2bc0      	cmp	r3, #192	; 0xc0
 80033a8:	d166      	bne.n	8003478 <UART_SetConfig+0x20c>
 80033aa:	2308      	movs	r3, #8
 80033ac:	e7d6      	b.n	800335c <UART_SetConfig+0xf0>
 80033ae:	4b51      	ldr	r3, [pc, #324]	; (80034f4 <UART_SetConfig+0x288>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033bc:	d05e      	beq.n	800347c <UART_SetConfig+0x210>
 80033be:	d806      	bhi.n	80033ce <UART_SetConfig+0x162>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05d      	beq.n	8003480 <UART_SetConfig+0x214>
 80033c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c8:	d15c      	bne.n	8003484 <UART_SetConfig+0x218>
 80033ca:	2304      	movs	r3, #4
 80033cc:	e7c6      	b.n	800335c <UART_SetConfig+0xf0>
 80033ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033d2:	d159      	bne.n	8003488 <UART_SetConfig+0x21c>
 80033d4:	2308      	movs	r3, #8
 80033d6:	e7c1      	b.n	800335c <UART_SetConfig+0xf0>
 80033d8:	4b46      	ldr	r3, [pc, #280]	; (80034f4 <UART_SetConfig+0x288>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e6:	d051      	beq.n	800348c <UART_SetConfig+0x220>
 80033e8:	d806      	bhi.n	80033f8 <UART_SetConfig+0x18c>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d050      	beq.n	8003490 <UART_SetConfig+0x224>
 80033ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f2:	d14f      	bne.n	8003494 <UART_SetConfig+0x228>
 80033f4:	2304      	movs	r3, #4
 80033f6:	e7b1      	b.n	800335c <UART_SetConfig+0xf0>
 80033f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033fc:	d14c      	bne.n	8003498 <UART_SetConfig+0x22c>
 80033fe:	2308      	movs	r3, #8
 8003400:	e7ac      	b.n	800335c <UART_SetConfig+0xf0>
 8003402:	4b3c      	ldr	r3, [pc, #240]	; (80034f4 <UART_SetConfig+0x288>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003408:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800340c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003410:	d044      	beq.n	800349c <UART_SetConfig+0x230>
 8003412:	d806      	bhi.n	8003422 <UART_SetConfig+0x1b6>
 8003414:	2b00      	cmp	r3, #0
 8003416:	d043      	beq.n	80034a0 <UART_SetConfig+0x234>
 8003418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341c:	d142      	bne.n	80034a4 <UART_SetConfig+0x238>
 800341e:	2304      	movs	r3, #4
 8003420:	e79c      	b.n	800335c <UART_SetConfig+0xf0>
 8003422:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003426:	d13f      	bne.n	80034a8 <UART_SetConfig+0x23c>
 8003428:	2308      	movs	r3, #8
 800342a:	e797      	b.n	800335c <UART_SetConfig+0xf0>
 800342c:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <UART_SetConfig+0x288>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343a:	d037      	beq.n	80034ac <UART_SetConfig+0x240>
 800343c:	d805      	bhi.n	800344a <UART_SetConfig+0x1de>
 800343e:	b3bb      	cbz	r3, 80034b0 <UART_SetConfig+0x244>
 8003440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003444:	d136      	bne.n	80034b4 <UART_SetConfig+0x248>
 8003446:	2304      	movs	r3, #4
 8003448:	e788      	b.n	800335c <UART_SetConfig+0xf0>
 800344a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800344e:	d133      	bne.n	80034b8 <UART_SetConfig+0x24c>
 8003450:	2308      	movs	r3, #8
 8003452:	e783      	b.n	800335c <UART_SetConfig+0xf0>
 8003454:	2302      	movs	r3, #2
 8003456:	e781      	b.n	800335c <UART_SetConfig+0xf0>
 8003458:	2302      	movs	r3, #2
 800345a:	e77f      	b.n	800335c <UART_SetConfig+0xf0>
 800345c:	2302      	movs	r3, #2
 800345e:	e77d      	b.n	800335c <UART_SetConfig+0xf0>
 8003460:	2300      	movs	r3, #0
 8003462:	e77b      	b.n	800335c <UART_SetConfig+0xf0>
 8003464:	2310      	movs	r3, #16
 8003466:	e779      	b.n	800335c <UART_SetConfig+0xf0>
 8003468:	2310      	movs	r3, #16
 800346a:	e777      	b.n	800335c <UART_SetConfig+0xf0>
 800346c:	2302      	movs	r3, #2
 800346e:	e775      	b.n	800335c <UART_SetConfig+0xf0>
 8003470:	2300      	movs	r3, #0
 8003472:	e773      	b.n	800335c <UART_SetConfig+0xf0>
 8003474:	2310      	movs	r3, #16
 8003476:	e771      	b.n	800335c <UART_SetConfig+0xf0>
 8003478:	2310      	movs	r3, #16
 800347a:	e76f      	b.n	800335c <UART_SetConfig+0xf0>
 800347c:	2302      	movs	r3, #2
 800347e:	e76d      	b.n	800335c <UART_SetConfig+0xf0>
 8003480:	2300      	movs	r3, #0
 8003482:	e76b      	b.n	800335c <UART_SetConfig+0xf0>
 8003484:	2310      	movs	r3, #16
 8003486:	e769      	b.n	800335c <UART_SetConfig+0xf0>
 8003488:	2310      	movs	r3, #16
 800348a:	e767      	b.n	800335c <UART_SetConfig+0xf0>
 800348c:	2302      	movs	r3, #2
 800348e:	e765      	b.n	800335c <UART_SetConfig+0xf0>
 8003490:	2301      	movs	r3, #1
 8003492:	e763      	b.n	800335c <UART_SetConfig+0xf0>
 8003494:	2310      	movs	r3, #16
 8003496:	e761      	b.n	800335c <UART_SetConfig+0xf0>
 8003498:	2310      	movs	r3, #16
 800349a:	e75f      	b.n	800335c <UART_SetConfig+0xf0>
 800349c:	2302      	movs	r3, #2
 800349e:	e75d      	b.n	800335c <UART_SetConfig+0xf0>
 80034a0:	2300      	movs	r3, #0
 80034a2:	e75b      	b.n	800335c <UART_SetConfig+0xf0>
 80034a4:	2310      	movs	r3, #16
 80034a6:	e759      	b.n	800335c <UART_SetConfig+0xf0>
 80034a8:	2310      	movs	r3, #16
 80034aa:	e757      	b.n	800335c <UART_SetConfig+0xf0>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e755      	b.n	800335c <UART_SetConfig+0xf0>
 80034b0:	2300      	movs	r3, #0
 80034b2:	e753      	b.n	800335c <UART_SetConfig+0xf0>
 80034b4:	2310      	movs	r3, #16
 80034b6:	e751      	b.n	800335c <UART_SetConfig+0xf0>
 80034b8:	2310      	movs	r3, #16
 80034ba:	e74f      	b.n	800335c <UART_SetConfig+0xf0>
    switch (clocksource)
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d85b      	bhi.n	8003578 <UART_SetConfig+0x30c>
 80034c0:	e8df f003 	tbb	[pc, r3]
 80034c4:	5a3a341a 	.word	0x5a3a341a
 80034c8:	5a5a5a37 	.word	0x5a5a5a37
 80034cc:	1e          	.byte	0x1e
 80034cd:	00          	.byte	0x00
 80034ce:	bf00      	nop
 80034d0:	efff69f3 	.word	0xefff69f3
 80034d4:	40011000 	.word	0x40011000
 80034d8:	40004400 	.word	0x40004400
 80034dc:	40004800 	.word	0x40004800
 80034e0:	40004c00 	.word	0x40004c00
 80034e4:	40005000 	.word	0x40005000
 80034e8:	40011400 	.word	0x40011400
 80034ec:	40007800 	.word	0x40007800
 80034f0:	40007c00 	.word	0x40007c00
 80034f4:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f8:	f7ff f8c2 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d03d      	beq.n	800357c <UART_SetConfig+0x310>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003500:	6862      	ldr	r2, [r4, #4]
 8003502:	0853      	lsrs	r3, r2, #1
 8003504:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003508:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800350c:	f1a0 0210 	sub.w	r2, r0, #16
 8003510:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003514:	429a      	cmp	r2, r3
 8003516:	d833      	bhi.n	8003580 <UART_SetConfig+0x314>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003518:	b283      	uxth	r3, r0
 800351a:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800351e:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8003522:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	60d8      	str	r0, [r3, #12]
 8003528:	2000      	movs	r0, #0
 800352a:	e030      	b.n	800358e <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 800352c:	f7ff f8b8 	bl	80026a0 <HAL_RCC_GetPCLK2Freq>
        break;
 8003530:	e7e4      	b.n	80034fc <UART_SetConfig+0x290>
        pclk = HAL_RCC_GetSysClockFreq();
 8003532:	f7fe ff97 	bl	8002464 <HAL_RCC_GetSysClockFreq>
        break;
 8003536:	e7e1      	b.n	80034fc <UART_SetConfig+0x290>
        pclk = (uint32_t) HSI_VALUE;
 8003538:	4817      	ldr	r0, [pc, #92]	; (8003598 <UART_SetConfig+0x32c>)
 800353a:	e7e1      	b.n	8003500 <UART_SetConfig+0x294>
    switch (clocksource)
 800353c:	4816      	ldr	r0, [pc, #88]	; (8003598 <UART_SetConfig+0x32c>)
 800353e:	e002      	b.n	8003546 <UART_SetConfig+0x2da>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003540:	f7ff f89e 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003544:	b300      	cbz	r0, 8003588 <UART_SetConfig+0x31c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003546:	6863      	ldr	r3, [r4, #4]
 8003548:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800354c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003550:	f1a0 0210 	sub.w	r2, r0, #16
 8003554:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003558:	429a      	cmp	r2, r3
 800355a:	d817      	bhi.n	800358c <UART_SetConfig+0x320>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	b280      	uxth	r0, r0
 8003560:	60d8      	str	r0, [r3, #12]
 8003562:	2000      	movs	r0, #0
 8003564:	e013      	b.n	800358e <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003566:	f7ff f89b 	bl	80026a0 <HAL_RCC_GetPCLK2Freq>
        break;
 800356a:	e7eb      	b.n	8003544 <UART_SetConfig+0x2d8>
        pclk = HAL_RCC_GetSysClockFreq();
 800356c:	f7fe ff7a 	bl	8002464 <HAL_RCC_GetSysClockFreq>
        break;
 8003570:	e7e8      	b.n	8003544 <UART_SetConfig+0x2d8>
        pclk = (uint32_t) LSE_VALUE;
 8003572:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003576:	e7e6      	b.n	8003546 <UART_SetConfig+0x2da>
    switch (clocksource)
 8003578:	2001      	movs	r0, #1
 800357a:	e008      	b.n	800358e <UART_SetConfig+0x322>
 800357c:	2000      	movs	r0, #0
 800357e:	e006      	b.n	800358e <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 8003580:	2001      	movs	r0, #1
 8003582:	e004      	b.n	800358e <UART_SetConfig+0x322>
    switch (clocksource)
 8003584:	2001      	movs	r0, #1
 8003586:	e002      	b.n	800358e <UART_SetConfig+0x322>
 8003588:	2000      	movs	r0, #0
 800358a:	e000      	b.n	800358e <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 800358c:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8003592:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8003594:	bd10      	pop	{r4, pc}
 8003596:	bf00      	nop
 8003598:	00f42400 	.word	0x00f42400

0800359c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800359c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800359e:	f013 0f01 	tst.w	r3, #1
 80035a2:	d006      	beq.n	80035b2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035a4:	6802      	ldr	r2, [r0, #0]
 80035a6:	6853      	ldr	r3, [r2, #4]
 80035a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80035ac:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80035ae:	430b      	orrs	r3, r1
 80035b0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035b4:	f013 0f02 	tst.w	r3, #2
 80035b8:	d006      	beq.n	80035c8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035ba:	6802      	ldr	r2, [r0, #0]
 80035bc:	6853      	ldr	r3, [r2, #4]
 80035be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035ca:	f013 0f04 	tst.w	r3, #4
 80035ce:	d006      	beq.n	80035de <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035d0:	6802      	ldr	r2, [r0, #0]
 80035d2:	6853      	ldr	r3, [r2, #4]
 80035d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035d8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80035da:	430b      	orrs	r3, r1
 80035dc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035e0:	f013 0f08 	tst.w	r3, #8
 80035e4:	d006      	beq.n	80035f4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035e6:	6802      	ldr	r2, [r0, #0]
 80035e8:	6853      	ldr	r3, [r2, #4]
 80035ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035ee:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035f6:	f013 0f10 	tst.w	r3, #16
 80035fa:	d006      	beq.n	800360a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035fc:	6802      	ldr	r2, [r0, #0]
 80035fe:	6893      	ldr	r3, [r2, #8]
 8003600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003604:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003606:	430b      	orrs	r3, r1
 8003608:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800360a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800360c:	f013 0f20 	tst.w	r3, #32
 8003610:	d006      	beq.n	8003620 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003612:	6802      	ldr	r2, [r0, #0]
 8003614:	6893      	ldr	r3, [r2, #8]
 8003616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800361a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800361c:	430b      	orrs	r3, r1
 800361e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003620:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003622:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003626:	d00a      	beq.n	800363e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003628:	6802      	ldr	r2, [r0, #0]
 800362a:	6853      	ldr	r3, [r2, #4]
 800362c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003630:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003632:	430b      	orrs	r3, r1
 8003634:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003636:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003638:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800363c:	d00b      	beq.n	8003656 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800363e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003640:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003644:	d006      	beq.n	8003654 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003646:	6802      	ldr	r2, [r0, #0]
 8003648:	6853      	ldr	r3, [r2, #4]
 800364a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800364e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003650:	430b      	orrs	r3, r1
 8003652:	6053      	str	r3, [r2, #4]
}
 8003654:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003656:	6802      	ldr	r2, [r0, #0]
 8003658:	6853      	ldr	r3, [r2, #4]
 800365a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800365e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003660:	430b      	orrs	r3, r1
 8003662:	6053      	str	r3, [r2, #4]
 8003664:	e7eb      	b.n	800363e <UART_AdvFeatureConfig+0xa2>

08003666 <UART_WaitOnFlagUntilTimeout>:
{
 8003666:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800366a:	4605      	mov	r5, r0
 800366c:	460f      	mov	r7, r1
 800366e:	4616      	mov	r6, r2
 8003670:	4699      	mov	r9, r3
 8003672:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003676:	682c      	ldr	r4, [r5, #0]
 8003678:	69e4      	ldr	r4, [r4, #28]
 800367a:	ea37 0304 	bics.w	r3, r7, r4
 800367e:	bf0c      	ite	eq
 8003680:	f04f 0c01 	moveq.w	ip, #1
 8003684:	f04f 0c00 	movne.w	ip, #0
 8003688:	45b4      	cmp	ip, r6
 800368a:	d155      	bne.n	8003738 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 800368c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003690:	d0f1      	beq.n	8003676 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003692:	f7fd fdbd 	bl	8001210 <HAL_GetTick>
 8003696:	eba0 0009 	sub.w	r0, r0, r9
 800369a:	4540      	cmp	r0, r8
 800369c:	d82e      	bhi.n	80036fc <UART_WaitOnFlagUntilTimeout+0x96>
 800369e:	f1b8 0f00 	cmp.w	r8, #0
 80036a2:	d02b      	beq.n	80036fc <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036a4:	682b      	ldr	r3, [r5, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	f012 0f04 	tst.w	r2, #4
 80036ac:	d0e3      	beq.n	8003676 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036ae:	69da      	ldr	r2, [r3, #28]
 80036b0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80036b4:	d0df      	beq.n	8003676 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ba:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036bc:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036be:	e852 3f00 	ldrex	r3, [r2]
 80036c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c6:	e842 3100 	strex	r1, r3, [r2]
 80036ca:	2900      	cmp	r1, #0
 80036cc:	d1f6      	bne.n	80036bc <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ce:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d0:	f102 0308 	add.w	r3, r2, #8
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	3208      	adds	r2, #8
 80036de:	e842 3100 	strex	r1, r3, [r2]
 80036e2:	2900      	cmp	r1, #0
 80036e4:	d1f3      	bne.n	80036ce <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 80036e6:	2320      	movs	r3, #32
 80036e8:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80036ea:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036ee:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80036f2:	2300      	movs	r3, #0
 80036f4:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          return HAL_TIMEOUT;
 80036f8:	2003      	movs	r0, #3
 80036fa:	e01e      	b.n	800373a <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036fc:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	e852 3f00 	ldrex	r3, [r2]
 8003702:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	e842 3100 	strex	r1, r3, [r2]
 800370a:	2900      	cmp	r1, #0
 800370c:	d1f6      	bne.n	80036fc <UART_WaitOnFlagUntilTimeout+0x96>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	f102 0308 	add.w	r3, r2, #8
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	3208      	adds	r2, #8
 800371e:	e842 3100 	strex	r1, r3, [r2]
 8003722:	2900      	cmp	r1, #0
 8003724:	d1f3      	bne.n	800370e <UART_WaitOnFlagUntilTimeout+0xa8>
        huart->gState = HAL_UART_STATE_READY;
 8003726:	2320      	movs	r3, #32
 8003728:	67eb      	str	r3, [r5, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800372a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
        __HAL_UNLOCK(huart);
 800372e:	2300      	movs	r3, #0
 8003730:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
        return HAL_TIMEOUT;
 8003734:	2003      	movs	r0, #3
 8003736:	e000      	b.n	800373a <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8003738:	2000      	movs	r0, #0
}
 800373a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800373e <HAL_UART_Transmit>:
{
 800373e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003746:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8003748:	2b20      	cmp	r3, #32
 800374a:	d14e      	bne.n	80037ea <HAL_UART_Transmit+0xac>
 800374c:	4604      	mov	r4, r0
 800374e:	460d      	mov	r5, r1
 8003750:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003752:	2a00      	cmp	r2, #0
 8003754:	bf18      	it	ne
 8003756:	2900      	cmpne	r1, #0
 8003758:	d101      	bne.n	800375e <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 800375a:	2001      	movs	r0, #1
 800375c:	e046      	b.n	80037ec <HAL_UART_Transmit+0xae>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375e:	2300      	movs	r3, #0
 8003760:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003764:	2321      	movs	r3, #33	; 0x21
 8003766:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8003768:	f7fd fd52 	bl	8001210 <HAL_GetTick>
 800376c:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800376e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8003772:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003776:	68a3      	ldr	r3, [r4, #8]
 8003778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377c:	d002      	beq.n	8003784 <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 800377e:	f04f 0800 	mov.w	r8, #0
 8003782:	e011      	b.n	80037a8 <HAL_UART_Transmit+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003784:	6923      	ldr	r3, [r4, #16]
 8003786:	b313      	cbz	r3, 80037ce <HAL_UART_Transmit+0x90>
      pdata16bits = NULL;
 8003788:	f04f 0800 	mov.w	r8, #0
 800378c:	e00c      	b.n	80037a8 <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800378e:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003792:	6822      	ldr	r2, [r4, #0]
 8003794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003798:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800379a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800379e:	b292      	uxth	r2, r2
 80037a0:	3a01      	subs	r2, #1
 80037a2:	b292      	uxth	r2, r2
 80037a4:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037a8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	b18b      	cbz	r3, 80037d4 <HAL_UART_Transmit+0x96>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037b0:	9600      	str	r6, [sp, #0]
 80037b2:	463b      	mov	r3, r7
 80037b4:	2200      	movs	r2, #0
 80037b6:	2180      	movs	r1, #128	; 0x80
 80037b8:	4620      	mov	r0, r4
 80037ba:	f7ff ff54 	bl	8003666 <UART_WaitOnFlagUntilTimeout>
 80037be:	b9c0      	cbnz	r0, 80037f2 <HAL_UART_Transmit+0xb4>
      if (pdata8bits == NULL)
 80037c0:	2d00      	cmp	r5, #0
 80037c2:	d0e4      	beq.n	800378e <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037c4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037cc:	e7e5      	b.n	800379a <HAL_UART_Transmit+0x5c>
      pdata16bits = (const uint16_t *) pData;
 80037ce:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80037d0:	2500      	movs	r5, #0
 80037d2:	e7e9      	b.n	80037a8 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037d4:	9600      	str	r6, [sp, #0]
 80037d6:	463b      	mov	r3, r7
 80037d8:	2200      	movs	r2, #0
 80037da:	2140      	movs	r1, #64	; 0x40
 80037dc:	4620      	mov	r0, r4
 80037de:	f7ff ff42 	bl	8003666 <UART_WaitOnFlagUntilTimeout>
 80037e2:	b940      	cbnz	r0, 80037f6 <HAL_UART_Transmit+0xb8>
    huart->gState = HAL_UART_STATE_READY;
 80037e4:	2320      	movs	r3, #32
 80037e6:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 80037e8:	e000      	b.n	80037ec <HAL_UART_Transmit+0xae>
    return HAL_BUSY;
 80037ea:	2002      	movs	r0, #2
}
 80037ec:	b002      	add	sp, #8
 80037ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 80037f2:	2003      	movs	r0, #3
 80037f4:	e7fa      	b.n	80037ec <HAL_UART_Transmit+0xae>
      return HAL_TIMEOUT;
 80037f6:	2003      	movs	r0, #3
 80037f8:	e7f8      	b.n	80037ec <HAL_UART_Transmit+0xae>

080037fa <UART_CheckIdleState>:
{
 80037fa:	b530      	push	{r4, r5, lr}
 80037fc:	b083      	sub	sp, #12
 80037fe:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003800:	2300      	movs	r3, #0
 8003802:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8003806:	f7fd fd03 	bl	8001210 <HAL_GetTick>
 800380a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800380c:	6822      	ldr	r2, [r4, #0]
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	f012 0f08 	tst.w	r2, #8
 8003814:	d10f      	bne.n	8003836 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f013 0f04 	tst.w	r3, #4
 800381e:	d118      	bne.n	8003852 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8003820:	2320      	movs	r3, #32
 8003822:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003824:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003828:	2000      	movs	r0, #0
 800382a:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800382c:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 800382e:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8003832:	b003      	add	sp, #12
 8003834:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003836:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	4603      	mov	r3, r0
 800383e:	2200      	movs	r2, #0
 8003840:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003844:	4620      	mov	r0, r4
 8003846:	f7ff ff0e 	bl	8003666 <UART_WaitOnFlagUntilTimeout>
 800384a:	2800      	cmp	r0, #0
 800384c:	d0e3      	beq.n	8003816 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800384e:	2003      	movs	r0, #3
 8003850:	e7ef      	b.n	8003832 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003852:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	462b      	mov	r3, r5
 800385a:	2200      	movs	r2, #0
 800385c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003860:	4620      	mov	r0, r4
 8003862:	f7ff ff00 	bl	8003666 <UART_WaitOnFlagUntilTimeout>
 8003866:	2800      	cmp	r0, #0
 8003868:	d0da      	beq.n	8003820 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800386a:	2003      	movs	r0, #3
 800386c:	e7e1      	b.n	8003832 <UART_CheckIdleState+0x38>

0800386e <HAL_UART_Init>:
  if (huart == NULL)
 800386e:	b368      	cbz	r0, 80038cc <HAL_UART_Init+0x5e>
{
 8003870:	b510      	push	{r4, lr}
 8003872:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003874:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8003876:	b303      	cbz	r3, 80038ba <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003878:	2324      	movs	r3, #36	; 0x24
 800387a:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800387c:	6822      	ldr	r2, [r4, #0]
 800387e:	6813      	ldr	r3, [r2, #0]
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003886:	4620      	mov	r0, r4
 8003888:	f7ff fcf0 	bl	800326c <UART_SetConfig>
 800388c:	2801      	cmp	r0, #1
 800388e:	d013      	beq.n	80038b8 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003892:	b9bb      	cbnz	r3, 80038c4 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003894:	6822      	ldr	r2, [r4, #0]
 8003896:	6853      	ldr	r3, [r2, #4]
 8003898:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800389c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800389e:	6822      	ldr	r2, [r4, #0]
 80038a0:	6893      	ldr	r3, [r2, #8]
 80038a2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80038a6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80038a8:	6822      	ldr	r2, [r4, #0]
 80038aa:	6813      	ldr	r3, [r2, #0]
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80038b2:	4620      	mov	r0, r4
 80038b4:	f7ff ffa1 	bl	80037fa <UART_CheckIdleState>
}
 80038b8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80038ba:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 80038be:	f7fd fb1b 	bl	8000ef8 <HAL_UART_MspInit>
 80038c2:	e7d9      	b.n	8003878 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80038c4:	4620      	mov	r0, r4
 80038c6:	f7ff fe69 	bl	800359c <UART_AdvFeatureConfig>
 80038ca:	e7e3      	b.n	8003894 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80038cc:	2001      	movs	r0, #1
}
 80038ce:	4770      	bx	lr

080038d0 <UART_Start_Receive_DMA>:
{
 80038d0:	b510      	push	{r4, lr}
 80038d2:	4604      	mov	r4, r0
 80038d4:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 80038d6:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize = Size;
 80038d8:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038dc:	2200      	movs	r2, #0
 80038de:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038e2:	2222      	movs	r2, #34	; 0x22
 80038e4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  if (huart->hdmarx != NULL)
 80038e8:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80038ea:	b18a      	cbz	r2, 8003910 <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80038ec:	491f      	ldr	r1, [pc, #124]	; (800396c <UART_Start_Receive_DMA+0x9c>)
 80038ee:	63d1      	str	r1, [r2, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80038f0:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80038f2:	491f      	ldr	r1, [pc, #124]	; (8003970 <UART_Start_Receive_DMA+0xa0>)
 80038f4:	6411      	str	r1, [r2, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80038f6:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80038f8:	491e      	ldr	r1, [pc, #120]	; (8003974 <UART_Start_Receive_DMA+0xa4>)
 80038fa:	64d1      	str	r1, [r2, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 80038fc:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80038fe:	2100      	movs	r1, #0
 8003900:	6511      	str	r1, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003902:	6801      	ldr	r1, [r0, #0]
 8003904:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003906:	3124      	adds	r1, #36	; 0x24
 8003908:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800390a:	f7fd ff2f 	bl	800176c <HAL_DMA_Start_IT>
 800390e:	bb20      	cbnz	r0, 800395a <UART_Start_Receive_DMA+0x8a>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003910:	6923      	ldr	r3, [r4, #16]
 8003912:	b143      	cbz	r3, 8003926 <UART_Start_Receive_DMA+0x56>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003914:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	e852 3f00 	ldrex	r3, [r2]
 800391a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	e842 3100 	strex	r1, r3, [r2]
 8003922:	2900      	cmp	r1, #0
 8003924:	d1f6      	bne.n	8003914 <UART_Start_Receive_DMA+0x44>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003926:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	f102 0308 	add.w	r3, r2, #8
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003934:	3208      	adds	r2, #8
 8003936:	e842 3100 	strex	r1, r3, [r2]
 800393a:	2900      	cmp	r1, #0
 800393c:	d1f3      	bne.n	8003926 <UART_Start_Receive_DMA+0x56>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800393e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	f102 0308 	add.w	r3, r2, #8
 8003944:	e853 3f00 	ldrex	r3, [r3]
 8003948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	3208      	adds	r2, #8
 800394e:	e842 3100 	strex	r1, r3, [r2]
 8003952:	2900      	cmp	r1, #0
 8003954:	d1f3      	bne.n	800393e <UART_Start_Receive_DMA+0x6e>
  return HAL_OK;
 8003956:	2000      	movs	r0, #0
}
 8003958:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800395a:	2310      	movs	r3, #16
 800395c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8003960:	2320      	movs	r3, #32
 8003962:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_ERROR;
 8003966:	2001      	movs	r0, #1
 8003968:	e7f6      	b.n	8003958 <UART_Start_Receive_DMA+0x88>
 800396a:	bf00      	nop
 800396c:	08002eef 	.word	0x08002eef
 8003970:	08002ecf 	.word	0x08002ecf
 8003974:	08002e65 	.word	0x08002e65

08003978 <HAL_UARTEx_ReceiveToIdle_DMA>:
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003978:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800397c:	2b20      	cmp	r3, #32
 800397e:	d121      	bne.n	80039c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x4c>
{
 8003980:	b510      	push	{r4, lr}
 8003982:	4604      	mov	r4, r0
  {
    if ((pData == NULL) || (Size == 0U))
 8003984:	2a00      	cmp	r2, #0
 8003986:	bf18      	it	ne
 8003988:	2900      	cmpne	r1, #0
 800398a:	d101      	bne.n	8003990 <HAL_UARTEx_ReceiveToIdle_DMA+0x18>
    {
      return HAL_ERROR;
 800398c:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 800398e:	bd10      	pop	{r4, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003990:	2301      	movs	r3, #1
 8003992:	6603      	str	r3, [r0, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003994:	2300      	movs	r3, #0
 8003996:	6643      	str	r3, [r0, #100]	; 0x64
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003998:	f7ff ff9a 	bl	80038d0 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800399c:	2800      	cmp	r0, #0
 800399e:	d1f6      	bne.n	800398e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d001      	beq.n	80039aa <HAL_UARTEx_ReceiveToIdle_DMA+0x32>
        status = HAL_ERROR;
 80039a6:	2001      	movs	r0, #1
    return status;
 80039a8:	e7f1      	b.n	800398e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	2210      	movs	r2, #16
 80039ae:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	e852 3f00 	ldrex	r3, [r2]
 80039b6:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	e842 3100 	strex	r1, r3, [r2]
 80039be:	2900      	cmp	r1, #0
 80039c0:	d1f6      	bne.n	80039b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80039c2:	e7e4      	b.n	800398e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
    return HAL_BUSY;
 80039c4:	2002      	movs	r0, #2
}
 80039c6:	4770      	bx	lr

080039c8 <__errno>:
 80039c8:	4b01      	ldr	r3, [pc, #4]	; (80039d0 <__errno+0x8>)
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20000010 	.word	0x20000010

080039d4 <__libc_init_array>:
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	4d0d      	ldr	r5, [pc, #52]	; (8003a0c <__libc_init_array+0x38>)
 80039d8:	4c0d      	ldr	r4, [pc, #52]	; (8003a10 <__libc_init_array+0x3c>)
 80039da:	1b64      	subs	r4, r4, r5
 80039dc:	10a4      	asrs	r4, r4, #2
 80039de:	2600      	movs	r6, #0
 80039e0:	42a6      	cmp	r6, r4
 80039e2:	d109      	bne.n	80039f8 <__libc_init_array+0x24>
 80039e4:	4d0b      	ldr	r5, [pc, #44]	; (8003a14 <__libc_init_array+0x40>)
 80039e6:	4c0c      	ldr	r4, [pc, #48]	; (8003a18 <__libc_init_array+0x44>)
 80039e8:	f000 fca2 	bl	8004330 <_init>
 80039ec:	1b64      	subs	r4, r4, r5
 80039ee:	10a4      	asrs	r4, r4, #2
 80039f0:	2600      	movs	r6, #0
 80039f2:	42a6      	cmp	r6, r4
 80039f4:	d105      	bne.n	8003a02 <__libc_init_array+0x2e>
 80039f6:	bd70      	pop	{r4, r5, r6, pc}
 80039f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fc:	4798      	blx	r3
 80039fe:	3601      	adds	r6, #1
 8003a00:	e7ee      	b.n	80039e0 <__libc_init_array+0xc>
 8003a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a06:	4798      	blx	r3
 8003a08:	3601      	adds	r6, #1
 8003a0a:	e7f2      	b.n	80039f2 <__libc_init_array+0x1e>
 8003a0c:	08004404 	.word	0x08004404
 8003a10:	08004404 	.word	0x08004404
 8003a14:	08004404 	.word	0x08004404
 8003a18:	08004408 	.word	0x08004408

08003a1c <memset>:
 8003a1c:	4402      	add	r2, r0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d100      	bne.n	8003a26 <memset+0xa>
 8003a24:	4770      	bx	lr
 8003a26:	f803 1b01 	strb.w	r1, [r3], #1
 8003a2a:	e7f9      	b.n	8003a20 <memset+0x4>

08003a2c <sniprintf>:
 8003a2c:	b40c      	push	{r2, r3}
 8003a2e:	b530      	push	{r4, r5, lr}
 8003a30:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <sniprintf+0x64>)
 8003a32:	1e0c      	subs	r4, r1, #0
 8003a34:	681d      	ldr	r5, [r3, #0]
 8003a36:	b09d      	sub	sp, #116	; 0x74
 8003a38:	da08      	bge.n	8003a4c <sniprintf+0x20>
 8003a3a:	238b      	movs	r3, #139	; 0x8b
 8003a3c:	602b      	str	r3, [r5, #0]
 8003a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a42:	b01d      	add	sp, #116	; 0x74
 8003a44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a48:	b002      	add	sp, #8
 8003a4a:	4770      	bx	lr
 8003a4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003a50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a54:	bf14      	ite	ne
 8003a56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a5a:	4623      	moveq	r3, r4
 8003a5c:	9304      	str	r3, [sp, #16]
 8003a5e:	9307      	str	r3, [sp, #28]
 8003a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a64:	9002      	str	r0, [sp, #8]
 8003a66:	9006      	str	r0, [sp, #24]
 8003a68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003a6e:	ab21      	add	r3, sp, #132	; 0x84
 8003a70:	a902      	add	r1, sp, #8
 8003a72:	4628      	mov	r0, r5
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	f000 f869 	bl	8003b4c <_svfiprintf_r>
 8003a7a:	1c43      	adds	r3, r0, #1
 8003a7c:	bfbc      	itt	lt
 8003a7e:	238b      	movlt	r3, #139	; 0x8b
 8003a80:	602b      	strlt	r3, [r5, #0]
 8003a82:	2c00      	cmp	r4, #0
 8003a84:	d0dd      	beq.n	8003a42 <sniprintf+0x16>
 8003a86:	9b02      	ldr	r3, [sp, #8]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	e7d9      	b.n	8003a42 <sniprintf+0x16>
 8003a8e:	bf00      	nop
 8003a90:	20000010 	.word	0x20000010

08003a94 <__ssputs_r>:
 8003a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a98:	688e      	ldr	r6, [r1, #8]
 8003a9a:	429e      	cmp	r6, r3
 8003a9c:	4682      	mov	sl, r0
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	4690      	mov	r8, r2
 8003aa2:	461f      	mov	r7, r3
 8003aa4:	d838      	bhi.n	8003b18 <__ssputs_r+0x84>
 8003aa6:	898a      	ldrh	r2, [r1, #12]
 8003aa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003aac:	d032      	beq.n	8003b14 <__ssputs_r+0x80>
 8003aae:	6825      	ldr	r5, [r4, #0]
 8003ab0:	6909      	ldr	r1, [r1, #16]
 8003ab2:	eba5 0901 	sub.w	r9, r5, r1
 8003ab6:	6965      	ldr	r5, [r4, #20]
 8003ab8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003abc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	444b      	add	r3, r9
 8003ac4:	106d      	asrs	r5, r5, #1
 8003ac6:	429d      	cmp	r5, r3
 8003ac8:	bf38      	it	cc
 8003aca:	461d      	movcc	r5, r3
 8003acc:	0553      	lsls	r3, r2, #21
 8003ace:	d531      	bpl.n	8003b34 <__ssputs_r+0xa0>
 8003ad0:	4629      	mov	r1, r5
 8003ad2:	f000 fb63 	bl	800419c <_malloc_r>
 8003ad6:	4606      	mov	r6, r0
 8003ad8:	b950      	cbnz	r0, 8003af0 <__ssputs_r+0x5c>
 8003ada:	230c      	movs	r3, #12
 8003adc:	f8ca 3000 	str.w	r3, [sl]
 8003ae0:	89a3      	ldrh	r3, [r4, #12]
 8003ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ae6:	81a3      	strh	r3, [r4, #12]
 8003ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af0:	6921      	ldr	r1, [r4, #16]
 8003af2:	464a      	mov	r2, r9
 8003af4:	f000 fabe 	bl	8004074 <memcpy>
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b02:	81a3      	strh	r3, [r4, #12]
 8003b04:	6126      	str	r6, [r4, #16]
 8003b06:	6165      	str	r5, [r4, #20]
 8003b08:	444e      	add	r6, r9
 8003b0a:	eba5 0509 	sub.w	r5, r5, r9
 8003b0e:	6026      	str	r6, [r4, #0]
 8003b10:	60a5      	str	r5, [r4, #8]
 8003b12:	463e      	mov	r6, r7
 8003b14:	42be      	cmp	r6, r7
 8003b16:	d900      	bls.n	8003b1a <__ssputs_r+0x86>
 8003b18:	463e      	mov	r6, r7
 8003b1a:	6820      	ldr	r0, [r4, #0]
 8003b1c:	4632      	mov	r2, r6
 8003b1e:	4641      	mov	r1, r8
 8003b20:	f000 fab6 	bl	8004090 <memmove>
 8003b24:	68a3      	ldr	r3, [r4, #8]
 8003b26:	1b9b      	subs	r3, r3, r6
 8003b28:	60a3      	str	r3, [r4, #8]
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	4433      	add	r3, r6
 8003b2e:	6023      	str	r3, [r4, #0]
 8003b30:	2000      	movs	r0, #0
 8003b32:	e7db      	b.n	8003aec <__ssputs_r+0x58>
 8003b34:	462a      	mov	r2, r5
 8003b36:	f000 fba5 	bl	8004284 <_realloc_r>
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d1e1      	bne.n	8003b04 <__ssputs_r+0x70>
 8003b40:	6921      	ldr	r1, [r4, #16]
 8003b42:	4650      	mov	r0, sl
 8003b44:	f000 fabe 	bl	80040c4 <_free_r>
 8003b48:	e7c7      	b.n	8003ada <__ssputs_r+0x46>
	...

08003b4c <_svfiprintf_r>:
 8003b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b50:	4698      	mov	r8, r3
 8003b52:	898b      	ldrh	r3, [r1, #12]
 8003b54:	061b      	lsls	r3, r3, #24
 8003b56:	b09d      	sub	sp, #116	; 0x74
 8003b58:	4607      	mov	r7, r0
 8003b5a:	460d      	mov	r5, r1
 8003b5c:	4614      	mov	r4, r2
 8003b5e:	d50e      	bpl.n	8003b7e <_svfiprintf_r+0x32>
 8003b60:	690b      	ldr	r3, [r1, #16]
 8003b62:	b963      	cbnz	r3, 8003b7e <_svfiprintf_r+0x32>
 8003b64:	2140      	movs	r1, #64	; 0x40
 8003b66:	f000 fb19 	bl	800419c <_malloc_r>
 8003b6a:	6028      	str	r0, [r5, #0]
 8003b6c:	6128      	str	r0, [r5, #16]
 8003b6e:	b920      	cbnz	r0, 8003b7a <_svfiprintf_r+0x2e>
 8003b70:	230c      	movs	r3, #12
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	f04f 30ff 	mov.w	r0, #4294967295
 8003b78:	e0d1      	b.n	8003d1e <_svfiprintf_r+0x1d2>
 8003b7a:	2340      	movs	r3, #64	; 0x40
 8003b7c:	616b      	str	r3, [r5, #20]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9309      	str	r3, [sp, #36]	; 0x24
 8003b82:	2320      	movs	r3, #32
 8003b84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b88:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b8c:	2330      	movs	r3, #48	; 0x30
 8003b8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003d38 <_svfiprintf_r+0x1ec>
 8003b92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b96:	f04f 0901 	mov.w	r9, #1
 8003b9a:	4623      	mov	r3, r4
 8003b9c:	469a      	mov	sl, r3
 8003b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ba2:	b10a      	cbz	r2, 8003ba8 <_svfiprintf_r+0x5c>
 8003ba4:	2a25      	cmp	r2, #37	; 0x25
 8003ba6:	d1f9      	bne.n	8003b9c <_svfiprintf_r+0x50>
 8003ba8:	ebba 0b04 	subs.w	fp, sl, r4
 8003bac:	d00b      	beq.n	8003bc6 <_svfiprintf_r+0x7a>
 8003bae:	465b      	mov	r3, fp
 8003bb0:	4622      	mov	r2, r4
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	4638      	mov	r0, r7
 8003bb6:	f7ff ff6d 	bl	8003a94 <__ssputs_r>
 8003bba:	3001      	adds	r0, #1
 8003bbc:	f000 80aa 	beq.w	8003d14 <_svfiprintf_r+0x1c8>
 8003bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bc2:	445a      	add	r2, fp
 8003bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8003bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80a2 	beq.w	8003d14 <_svfiprintf_r+0x1c8>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bda:	f10a 0a01 	add.w	sl, sl, #1
 8003bde:	9304      	str	r3, [sp, #16]
 8003be0:	9307      	str	r3, [sp, #28]
 8003be2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003be6:	931a      	str	r3, [sp, #104]	; 0x68
 8003be8:	4654      	mov	r4, sl
 8003bea:	2205      	movs	r2, #5
 8003bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bf0:	4851      	ldr	r0, [pc, #324]	; (8003d38 <_svfiprintf_r+0x1ec>)
 8003bf2:	f7fc fb2d 	bl	8000250 <memchr>
 8003bf6:	9a04      	ldr	r2, [sp, #16]
 8003bf8:	b9d8      	cbnz	r0, 8003c32 <_svfiprintf_r+0xe6>
 8003bfa:	06d0      	lsls	r0, r2, #27
 8003bfc:	bf44      	itt	mi
 8003bfe:	2320      	movmi	r3, #32
 8003c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c04:	0711      	lsls	r1, r2, #28
 8003c06:	bf44      	itt	mi
 8003c08:	232b      	movmi	r3, #43	; 0x2b
 8003c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c12:	2b2a      	cmp	r3, #42	; 0x2a
 8003c14:	d015      	beq.n	8003c42 <_svfiprintf_r+0xf6>
 8003c16:	9a07      	ldr	r2, [sp, #28]
 8003c18:	4654      	mov	r4, sl
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	f04f 0c0a 	mov.w	ip, #10
 8003c20:	4621      	mov	r1, r4
 8003c22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c26:	3b30      	subs	r3, #48	; 0x30
 8003c28:	2b09      	cmp	r3, #9
 8003c2a:	d94e      	bls.n	8003cca <_svfiprintf_r+0x17e>
 8003c2c:	b1b0      	cbz	r0, 8003c5c <_svfiprintf_r+0x110>
 8003c2e:	9207      	str	r2, [sp, #28]
 8003c30:	e014      	b.n	8003c5c <_svfiprintf_r+0x110>
 8003c32:	eba0 0308 	sub.w	r3, r0, r8
 8003c36:	fa09 f303 	lsl.w	r3, r9, r3
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	9304      	str	r3, [sp, #16]
 8003c3e:	46a2      	mov	sl, r4
 8003c40:	e7d2      	b.n	8003be8 <_svfiprintf_r+0x9c>
 8003c42:	9b03      	ldr	r3, [sp, #12]
 8003c44:	1d19      	adds	r1, r3, #4
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	9103      	str	r1, [sp, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	bfbb      	ittet	lt
 8003c4e:	425b      	neglt	r3, r3
 8003c50:	f042 0202 	orrlt.w	r2, r2, #2
 8003c54:	9307      	strge	r3, [sp, #28]
 8003c56:	9307      	strlt	r3, [sp, #28]
 8003c58:	bfb8      	it	lt
 8003c5a:	9204      	strlt	r2, [sp, #16]
 8003c5c:	7823      	ldrb	r3, [r4, #0]
 8003c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c60:	d10c      	bne.n	8003c7c <_svfiprintf_r+0x130>
 8003c62:	7863      	ldrb	r3, [r4, #1]
 8003c64:	2b2a      	cmp	r3, #42	; 0x2a
 8003c66:	d135      	bne.n	8003cd4 <_svfiprintf_r+0x188>
 8003c68:	9b03      	ldr	r3, [sp, #12]
 8003c6a:	1d1a      	adds	r2, r3, #4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	9203      	str	r2, [sp, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bfb8      	it	lt
 8003c74:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c78:	3402      	adds	r4, #2
 8003c7a:	9305      	str	r3, [sp, #20]
 8003c7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d48 <_svfiprintf_r+0x1fc>
 8003c80:	7821      	ldrb	r1, [r4, #0]
 8003c82:	2203      	movs	r2, #3
 8003c84:	4650      	mov	r0, sl
 8003c86:	f7fc fae3 	bl	8000250 <memchr>
 8003c8a:	b140      	cbz	r0, 8003c9e <_svfiprintf_r+0x152>
 8003c8c:	2340      	movs	r3, #64	; 0x40
 8003c8e:	eba0 000a 	sub.w	r0, r0, sl
 8003c92:	fa03 f000 	lsl.w	r0, r3, r0
 8003c96:	9b04      	ldr	r3, [sp, #16]
 8003c98:	4303      	orrs	r3, r0
 8003c9a:	3401      	adds	r4, #1
 8003c9c:	9304      	str	r3, [sp, #16]
 8003c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ca2:	4826      	ldr	r0, [pc, #152]	; (8003d3c <_svfiprintf_r+0x1f0>)
 8003ca4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ca8:	2206      	movs	r2, #6
 8003caa:	f7fc fad1 	bl	8000250 <memchr>
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d038      	beq.n	8003d24 <_svfiprintf_r+0x1d8>
 8003cb2:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <_svfiprintf_r+0x1f4>)
 8003cb4:	bb1b      	cbnz	r3, 8003cfe <_svfiprintf_r+0x1b2>
 8003cb6:	9b03      	ldr	r3, [sp, #12]
 8003cb8:	3307      	adds	r3, #7
 8003cba:	f023 0307 	bic.w	r3, r3, #7
 8003cbe:	3308      	adds	r3, #8
 8003cc0:	9303      	str	r3, [sp, #12]
 8003cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cc4:	4433      	add	r3, r6
 8003cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003cc8:	e767      	b.n	8003b9a <_svfiprintf_r+0x4e>
 8003cca:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cce:	460c      	mov	r4, r1
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	e7a5      	b.n	8003c20 <_svfiprintf_r+0xd4>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	3401      	adds	r4, #1
 8003cd8:	9305      	str	r3, [sp, #20]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	f04f 0c0a 	mov.w	ip, #10
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ce6:	3a30      	subs	r2, #48	; 0x30
 8003ce8:	2a09      	cmp	r2, #9
 8003cea:	d903      	bls.n	8003cf4 <_svfiprintf_r+0x1a8>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0c5      	beq.n	8003c7c <_svfiprintf_r+0x130>
 8003cf0:	9105      	str	r1, [sp, #20]
 8003cf2:	e7c3      	b.n	8003c7c <_svfiprintf_r+0x130>
 8003cf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cf8:	4604      	mov	r4, r0
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e7f0      	b.n	8003ce0 <_svfiprintf_r+0x194>
 8003cfe:	ab03      	add	r3, sp, #12
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	462a      	mov	r2, r5
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <_svfiprintf_r+0x1f8>)
 8003d06:	a904      	add	r1, sp, #16
 8003d08:	4638      	mov	r0, r7
 8003d0a:	f3af 8000 	nop.w
 8003d0e:	1c42      	adds	r2, r0, #1
 8003d10:	4606      	mov	r6, r0
 8003d12:	d1d6      	bne.n	8003cc2 <_svfiprintf_r+0x176>
 8003d14:	89ab      	ldrh	r3, [r5, #12]
 8003d16:	065b      	lsls	r3, r3, #25
 8003d18:	f53f af2c 	bmi.w	8003b74 <_svfiprintf_r+0x28>
 8003d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d1e:	b01d      	add	sp, #116	; 0x74
 8003d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d24:	ab03      	add	r3, sp, #12
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	462a      	mov	r2, r5
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <_svfiprintf_r+0x1f8>)
 8003d2c:	a904      	add	r1, sp, #16
 8003d2e:	4638      	mov	r0, r7
 8003d30:	f000 f87a 	bl	8003e28 <_printf_i>
 8003d34:	e7eb      	b.n	8003d0e <_svfiprintf_r+0x1c2>
 8003d36:	bf00      	nop
 8003d38:	080043c8 	.word	0x080043c8
 8003d3c:	080043d2 	.word	0x080043d2
 8003d40:	00000000 	.word	0x00000000
 8003d44:	08003a95 	.word	0x08003a95
 8003d48:	080043ce 	.word	0x080043ce

08003d4c <_printf_common>:
 8003d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d50:	4616      	mov	r6, r2
 8003d52:	4699      	mov	r9, r3
 8003d54:	688a      	ldr	r2, [r1, #8]
 8003d56:	690b      	ldr	r3, [r1, #16]
 8003d58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	bfb8      	it	lt
 8003d60:	4613      	movlt	r3, r2
 8003d62:	6033      	str	r3, [r6, #0]
 8003d64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d68:	4607      	mov	r7, r0
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	b10a      	cbz	r2, 8003d72 <_printf_common+0x26>
 8003d6e:	3301      	adds	r3, #1
 8003d70:	6033      	str	r3, [r6, #0]
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	0699      	lsls	r1, r3, #26
 8003d76:	bf42      	ittt	mi
 8003d78:	6833      	ldrmi	r3, [r6, #0]
 8003d7a:	3302      	addmi	r3, #2
 8003d7c:	6033      	strmi	r3, [r6, #0]
 8003d7e:	6825      	ldr	r5, [r4, #0]
 8003d80:	f015 0506 	ands.w	r5, r5, #6
 8003d84:	d106      	bne.n	8003d94 <_printf_common+0x48>
 8003d86:	f104 0a19 	add.w	sl, r4, #25
 8003d8a:	68e3      	ldr	r3, [r4, #12]
 8003d8c:	6832      	ldr	r2, [r6, #0]
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	42ab      	cmp	r3, r5
 8003d92:	dc26      	bgt.n	8003de2 <_printf_common+0x96>
 8003d94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d98:	1e13      	subs	r3, r2, #0
 8003d9a:	6822      	ldr	r2, [r4, #0]
 8003d9c:	bf18      	it	ne
 8003d9e:	2301      	movne	r3, #1
 8003da0:	0692      	lsls	r2, r2, #26
 8003da2:	d42b      	bmi.n	8003dfc <_printf_common+0xb0>
 8003da4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003da8:	4649      	mov	r1, r9
 8003daa:	4638      	mov	r0, r7
 8003dac:	47c0      	blx	r8
 8003dae:	3001      	adds	r0, #1
 8003db0:	d01e      	beq.n	8003df0 <_printf_common+0xa4>
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	68e5      	ldr	r5, [r4, #12]
 8003db6:	6832      	ldr	r2, [r6, #0]
 8003db8:	f003 0306 	and.w	r3, r3, #6
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	bf08      	it	eq
 8003dc0:	1aad      	subeq	r5, r5, r2
 8003dc2:	68a3      	ldr	r3, [r4, #8]
 8003dc4:	6922      	ldr	r2, [r4, #16]
 8003dc6:	bf0c      	ite	eq
 8003dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dcc:	2500      	movne	r5, #0
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	bfc4      	itt	gt
 8003dd2:	1a9b      	subgt	r3, r3, r2
 8003dd4:	18ed      	addgt	r5, r5, r3
 8003dd6:	2600      	movs	r6, #0
 8003dd8:	341a      	adds	r4, #26
 8003dda:	42b5      	cmp	r5, r6
 8003ddc:	d11a      	bne.n	8003e14 <_printf_common+0xc8>
 8003dde:	2000      	movs	r0, #0
 8003de0:	e008      	b.n	8003df4 <_printf_common+0xa8>
 8003de2:	2301      	movs	r3, #1
 8003de4:	4652      	mov	r2, sl
 8003de6:	4649      	mov	r1, r9
 8003de8:	4638      	mov	r0, r7
 8003dea:	47c0      	blx	r8
 8003dec:	3001      	adds	r0, #1
 8003dee:	d103      	bne.n	8003df8 <_printf_common+0xac>
 8003df0:	f04f 30ff 	mov.w	r0, #4294967295
 8003df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df8:	3501      	adds	r5, #1
 8003dfa:	e7c6      	b.n	8003d8a <_printf_common+0x3e>
 8003dfc:	18e1      	adds	r1, r4, r3
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	2030      	movs	r0, #48	; 0x30
 8003e02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e06:	4422      	add	r2, r4
 8003e08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e10:	3302      	adds	r3, #2
 8003e12:	e7c7      	b.n	8003da4 <_printf_common+0x58>
 8003e14:	2301      	movs	r3, #1
 8003e16:	4622      	mov	r2, r4
 8003e18:	4649      	mov	r1, r9
 8003e1a:	4638      	mov	r0, r7
 8003e1c:	47c0      	blx	r8
 8003e1e:	3001      	adds	r0, #1
 8003e20:	d0e6      	beq.n	8003df0 <_printf_common+0xa4>
 8003e22:	3601      	adds	r6, #1
 8003e24:	e7d9      	b.n	8003dda <_printf_common+0x8e>
	...

08003e28 <_printf_i>:
 8003e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e2c:	7e0f      	ldrb	r7, [r1, #24]
 8003e2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e30:	2f78      	cmp	r7, #120	; 0x78
 8003e32:	4691      	mov	r9, r2
 8003e34:	4680      	mov	r8, r0
 8003e36:	460c      	mov	r4, r1
 8003e38:	469a      	mov	sl, r3
 8003e3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e3e:	d807      	bhi.n	8003e50 <_printf_i+0x28>
 8003e40:	2f62      	cmp	r7, #98	; 0x62
 8003e42:	d80a      	bhi.n	8003e5a <_printf_i+0x32>
 8003e44:	2f00      	cmp	r7, #0
 8003e46:	f000 80d8 	beq.w	8003ffa <_printf_i+0x1d2>
 8003e4a:	2f58      	cmp	r7, #88	; 0x58
 8003e4c:	f000 80a3 	beq.w	8003f96 <_printf_i+0x16e>
 8003e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e58:	e03a      	b.n	8003ed0 <_printf_i+0xa8>
 8003e5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e5e:	2b15      	cmp	r3, #21
 8003e60:	d8f6      	bhi.n	8003e50 <_printf_i+0x28>
 8003e62:	a101      	add	r1, pc, #4	; (adr r1, 8003e68 <_printf_i+0x40>)
 8003e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e68:	08003ec1 	.word	0x08003ec1
 8003e6c:	08003ed5 	.word	0x08003ed5
 8003e70:	08003e51 	.word	0x08003e51
 8003e74:	08003e51 	.word	0x08003e51
 8003e78:	08003e51 	.word	0x08003e51
 8003e7c:	08003e51 	.word	0x08003e51
 8003e80:	08003ed5 	.word	0x08003ed5
 8003e84:	08003e51 	.word	0x08003e51
 8003e88:	08003e51 	.word	0x08003e51
 8003e8c:	08003e51 	.word	0x08003e51
 8003e90:	08003e51 	.word	0x08003e51
 8003e94:	08003fe1 	.word	0x08003fe1
 8003e98:	08003f05 	.word	0x08003f05
 8003e9c:	08003fc3 	.word	0x08003fc3
 8003ea0:	08003e51 	.word	0x08003e51
 8003ea4:	08003e51 	.word	0x08003e51
 8003ea8:	08004003 	.word	0x08004003
 8003eac:	08003e51 	.word	0x08003e51
 8003eb0:	08003f05 	.word	0x08003f05
 8003eb4:	08003e51 	.word	0x08003e51
 8003eb8:	08003e51 	.word	0x08003e51
 8003ebc:	08003fcb 	.word	0x08003fcb
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	1d1a      	adds	r2, r3, #4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	602a      	str	r2, [r5, #0]
 8003ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0a3      	b.n	800401c <_printf_i+0x1f4>
 8003ed4:	6820      	ldr	r0, [r4, #0]
 8003ed6:	6829      	ldr	r1, [r5, #0]
 8003ed8:	0606      	lsls	r6, r0, #24
 8003eda:	f101 0304 	add.w	r3, r1, #4
 8003ede:	d50a      	bpl.n	8003ef6 <_printf_i+0xce>
 8003ee0:	680e      	ldr	r6, [r1, #0]
 8003ee2:	602b      	str	r3, [r5, #0]
 8003ee4:	2e00      	cmp	r6, #0
 8003ee6:	da03      	bge.n	8003ef0 <_printf_i+0xc8>
 8003ee8:	232d      	movs	r3, #45	; 0x2d
 8003eea:	4276      	negs	r6, r6
 8003eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ef0:	485e      	ldr	r0, [pc, #376]	; (800406c <_printf_i+0x244>)
 8003ef2:	230a      	movs	r3, #10
 8003ef4:	e019      	b.n	8003f2a <_printf_i+0x102>
 8003ef6:	680e      	ldr	r6, [r1, #0]
 8003ef8:	602b      	str	r3, [r5, #0]
 8003efa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003efe:	bf18      	it	ne
 8003f00:	b236      	sxthne	r6, r6
 8003f02:	e7ef      	b.n	8003ee4 <_printf_i+0xbc>
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	6820      	ldr	r0, [r4, #0]
 8003f08:	1d19      	adds	r1, r3, #4
 8003f0a:	6029      	str	r1, [r5, #0]
 8003f0c:	0601      	lsls	r1, r0, #24
 8003f0e:	d501      	bpl.n	8003f14 <_printf_i+0xec>
 8003f10:	681e      	ldr	r6, [r3, #0]
 8003f12:	e002      	b.n	8003f1a <_printf_i+0xf2>
 8003f14:	0646      	lsls	r6, r0, #25
 8003f16:	d5fb      	bpl.n	8003f10 <_printf_i+0xe8>
 8003f18:	881e      	ldrh	r6, [r3, #0]
 8003f1a:	4854      	ldr	r0, [pc, #336]	; (800406c <_printf_i+0x244>)
 8003f1c:	2f6f      	cmp	r7, #111	; 0x6f
 8003f1e:	bf0c      	ite	eq
 8003f20:	2308      	moveq	r3, #8
 8003f22:	230a      	movne	r3, #10
 8003f24:	2100      	movs	r1, #0
 8003f26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f2a:	6865      	ldr	r5, [r4, #4]
 8003f2c:	60a5      	str	r5, [r4, #8]
 8003f2e:	2d00      	cmp	r5, #0
 8003f30:	bfa2      	ittt	ge
 8003f32:	6821      	ldrge	r1, [r4, #0]
 8003f34:	f021 0104 	bicge.w	r1, r1, #4
 8003f38:	6021      	strge	r1, [r4, #0]
 8003f3a:	b90e      	cbnz	r6, 8003f40 <_printf_i+0x118>
 8003f3c:	2d00      	cmp	r5, #0
 8003f3e:	d04d      	beq.n	8003fdc <_printf_i+0x1b4>
 8003f40:	4615      	mov	r5, r2
 8003f42:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f46:	fb03 6711 	mls	r7, r3, r1, r6
 8003f4a:	5dc7      	ldrb	r7, [r0, r7]
 8003f4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f50:	4637      	mov	r7, r6
 8003f52:	42bb      	cmp	r3, r7
 8003f54:	460e      	mov	r6, r1
 8003f56:	d9f4      	bls.n	8003f42 <_printf_i+0x11a>
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d10b      	bne.n	8003f74 <_printf_i+0x14c>
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	07de      	lsls	r6, r3, #31
 8003f60:	d508      	bpl.n	8003f74 <_printf_i+0x14c>
 8003f62:	6923      	ldr	r3, [r4, #16]
 8003f64:	6861      	ldr	r1, [r4, #4]
 8003f66:	4299      	cmp	r1, r3
 8003f68:	bfde      	ittt	le
 8003f6a:	2330      	movle	r3, #48	; 0x30
 8003f6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f74:	1b52      	subs	r2, r2, r5
 8003f76:	6122      	str	r2, [r4, #16]
 8003f78:	f8cd a000 	str.w	sl, [sp]
 8003f7c:	464b      	mov	r3, r9
 8003f7e:	aa03      	add	r2, sp, #12
 8003f80:	4621      	mov	r1, r4
 8003f82:	4640      	mov	r0, r8
 8003f84:	f7ff fee2 	bl	8003d4c <_printf_common>
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d14c      	bne.n	8004026 <_printf_i+0x1fe>
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	b004      	add	sp, #16
 8003f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f96:	4835      	ldr	r0, [pc, #212]	; (800406c <_printf_i+0x244>)
 8003f98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f9c:	6829      	ldr	r1, [r5, #0]
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fa4:	6029      	str	r1, [r5, #0]
 8003fa6:	061d      	lsls	r5, r3, #24
 8003fa8:	d514      	bpl.n	8003fd4 <_printf_i+0x1ac>
 8003faa:	07df      	lsls	r7, r3, #31
 8003fac:	bf44      	itt	mi
 8003fae:	f043 0320 	orrmi.w	r3, r3, #32
 8003fb2:	6023      	strmi	r3, [r4, #0]
 8003fb4:	b91e      	cbnz	r6, 8003fbe <_printf_i+0x196>
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	f023 0320 	bic.w	r3, r3, #32
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	2310      	movs	r3, #16
 8003fc0:	e7b0      	b.n	8003f24 <_printf_i+0xfc>
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	f043 0320 	orr.w	r3, r3, #32
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	2378      	movs	r3, #120	; 0x78
 8003fcc:	4828      	ldr	r0, [pc, #160]	; (8004070 <_printf_i+0x248>)
 8003fce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fd2:	e7e3      	b.n	8003f9c <_printf_i+0x174>
 8003fd4:	0659      	lsls	r1, r3, #25
 8003fd6:	bf48      	it	mi
 8003fd8:	b2b6      	uxthmi	r6, r6
 8003fda:	e7e6      	b.n	8003faa <_printf_i+0x182>
 8003fdc:	4615      	mov	r5, r2
 8003fde:	e7bb      	b.n	8003f58 <_printf_i+0x130>
 8003fe0:	682b      	ldr	r3, [r5, #0]
 8003fe2:	6826      	ldr	r6, [r4, #0]
 8003fe4:	6961      	ldr	r1, [r4, #20]
 8003fe6:	1d18      	adds	r0, r3, #4
 8003fe8:	6028      	str	r0, [r5, #0]
 8003fea:	0635      	lsls	r5, r6, #24
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	d501      	bpl.n	8003ff4 <_printf_i+0x1cc>
 8003ff0:	6019      	str	r1, [r3, #0]
 8003ff2:	e002      	b.n	8003ffa <_printf_i+0x1d2>
 8003ff4:	0670      	lsls	r0, r6, #25
 8003ff6:	d5fb      	bpl.n	8003ff0 <_printf_i+0x1c8>
 8003ff8:	8019      	strh	r1, [r3, #0]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	6123      	str	r3, [r4, #16]
 8003ffe:	4615      	mov	r5, r2
 8004000:	e7ba      	b.n	8003f78 <_printf_i+0x150>
 8004002:	682b      	ldr	r3, [r5, #0]
 8004004:	1d1a      	adds	r2, r3, #4
 8004006:	602a      	str	r2, [r5, #0]
 8004008:	681d      	ldr	r5, [r3, #0]
 800400a:	6862      	ldr	r2, [r4, #4]
 800400c:	2100      	movs	r1, #0
 800400e:	4628      	mov	r0, r5
 8004010:	f7fc f91e 	bl	8000250 <memchr>
 8004014:	b108      	cbz	r0, 800401a <_printf_i+0x1f2>
 8004016:	1b40      	subs	r0, r0, r5
 8004018:	6060      	str	r0, [r4, #4]
 800401a:	6863      	ldr	r3, [r4, #4]
 800401c:	6123      	str	r3, [r4, #16]
 800401e:	2300      	movs	r3, #0
 8004020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004024:	e7a8      	b.n	8003f78 <_printf_i+0x150>
 8004026:	6923      	ldr	r3, [r4, #16]
 8004028:	462a      	mov	r2, r5
 800402a:	4649      	mov	r1, r9
 800402c:	4640      	mov	r0, r8
 800402e:	47d0      	blx	sl
 8004030:	3001      	adds	r0, #1
 8004032:	d0ab      	beq.n	8003f8c <_printf_i+0x164>
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	079b      	lsls	r3, r3, #30
 8004038:	d413      	bmi.n	8004062 <_printf_i+0x23a>
 800403a:	68e0      	ldr	r0, [r4, #12]
 800403c:	9b03      	ldr	r3, [sp, #12]
 800403e:	4298      	cmp	r0, r3
 8004040:	bfb8      	it	lt
 8004042:	4618      	movlt	r0, r3
 8004044:	e7a4      	b.n	8003f90 <_printf_i+0x168>
 8004046:	2301      	movs	r3, #1
 8004048:	4632      	mov	r2, r6
 800404a:	4649      	mov	r1, r9
 800404c:	4640      	mov	r0, r8
 800404e:	47d0      	blx	sl
 8004050:	3001      	adds	r0, #1
 8004052:	d09b      	beq.n	8003f8c <_printf_i+0x164>
 8004054:	3501      	adds	r5, #1
 8004056:	68e3      	ldr	r3, [r4, #12]
 8004058:	9903      	ldr	r1, [sp, #12]
 800405a:	1a5b      	subs	r3, r3, r1
 800405c:	42ab      	cmp	r3, r5
 800405e:	dcf2      	bgt.n	8004046 <_printf_i+0x21e>
 8004060:	e7eb      	b.n	800403a <_printf_i+0x212>
 8004062:	2500      	movs	r5, #0
 8004064:	f104 0619 	add.w	r6, r4, #25
 8004068:	e7f5      	b.n	8004056 <_printf_i+0x22e>
 800406a:	bf00      	nop
 800406c:	080043d9 	.word	0x080043d9
 8004070:	080043ea 	.word	0x080043ea

08004074 <memcpy>:
 8004074:	440a      	add	r2, r1
 8004076:	4291      	cmp	r1, r2
 8004078:	f100 33ff 	add.w	r3, r0, #4294967295
 800407c:	d100      	bne.n	8004080 <memcpy+0xc>
 800407e:	4770      	bx	lr
 8004080:	b510      	push	{r4, lr}
 8004082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800408a:	4291      	cmp	r1, r2
 800408c:	d1f9      	bne.n	8004082 <memcpy+0xe>
 800408e:	bd10      	pop	{r4, pc}

08004090 <memmove>:
 8004090:	4288      	cmp	r0, r1
 8004092:	b510      	push	{r4, lr}
 8004094:	eb01 0402 	add.w	r4, r1, r2
 8004098:	d902      	bls.n	80040a0 <memmove+0x10>
 800409a:	4284      	cmp	r4, r0
 800409c:	4623      	mov	r3, r4
 800409e:	d807      	bhi.n	80040b0 <memmove+0x20>
 80040a0:	1e43      	subs	r3, r0, #1
 80040a2:	42a1      	cmp	r1, r4
 80040a4:	d008      	beq.n	80040b8 <memmove+0x28>
 80040a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040ae:	e7f8      	b.n	80040a2 <memmove+0x12>
 80040b0:	4402      	add	r2, r0
 80040b2:	4601      	mov	r1, r0
 80040b4:	428a      	cmp	r2, r1
 80040b6:	d100      	bne.n	80040ba <memmove+0x2a>
 80040b8:	bd10      	pop	{r4, pc}
 80040ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040c2:	e7f7      	b.n	80040b4 <memmove+0x24>

080040c4 <_free_r>:
 80040c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040c6:	2900      	cmp	r1, #0
 80040c8:	d044      	beq.n	8004154 <_free_r+0x90>
 80040ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ce:	9001      	str	r0, [sp, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f1a1 0404 	sub.w	r4, r1, #4
 80040d6:	bfb8      	it	lt
 80040d8:	18e4      	addlt	r4, r4, r3
 80040da:	f000 f913 	bl	8004304 <__malloc_lock>
 80040de:	4a1e      	ldr	r2, [pc, #120]	; (8004158 <_free_r+0x94>)
 80040e0:	9801      	ldr	r0, [sp, #4]
 80040e2:	6813      	ldr	r3, [r2, #0]
 80040e4:	b933      	cbnz	r3, 80040f4 <_free_r+0x30>
 80040e6:	6063      	str	r3, [r4, #4]
 80040e8:	6014      	str	r4, [r2, #0]
 80040ea:	b003      	add	sp, #12
 80040ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040f0:	f000 b90e 	b.w	8004310 <__malloc_unlock>
 80040f4:	42a3      	cmp	r3, r4
 80040f6:	d908      	bls.n	800410a <_free_r+0x46>
 80040f8:	6825      	ldr	r5, [r4, #0]
 80040fa:	1961      	adds	r1, r4, r5
 80040fc:	428b      	cmp	r3, r1
 80040fe:	bf01      	itttt	eq
 8004100:	6819      	ldreq	r1, [r3, #0]
 8004102:	685b      	ldreq	r3, [r3, #4]
 8004104:	1949      	addeq	r1, r1, r5
 8004106:	6021      	streq	r1, [r4, #0]
 8004108:	e7ed      	b.n	80040e6 <_free_r+0x22>
 800410a:	461a      	mov	r2, r3
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	b10b      	cbz	r3, 8004114 <_free_r+0x50>
 8004110:	42a3      	cmp	r3, r4
 8004112:	d9fa      	bls.n	800410a <_free_r+0x46>
 8004114:	6811      	ldr	r1, [r2, #0]
 8004116:	1855      	adds	r5, r2, r1
 8004118:	42a5      	cmp	r5, r4
 800411a:	d10b      	bne.n	8004134 <_free_r+0x70>
 800411c:	6824      	ldr	r4, [r4, #0]
 800411e:	4421      	add	r1, r4
 8004120:	1854      	adds	r4, r2, r1
 8004122:	42a3      	cmp	r3, r4
 8004124:	6011      	str	r1, [r2, #0]
 8004126:	d1e0      	bne.n	80040ea <_free_r+0x26>
 8004128:	681c      	ldr	r4, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	6053      	str	r3, [r2, #4]
 800412e:	4421      	add	r1, r4
 8004130:	6011      	str	r1, [r2, #0]
 8004132:	e7da      	b.n	80040ea <_free_r+0x26>
 8004134:	d902      	bls.n	800413c <_free_r+0x78>
 8004136:	230c      	movs	r3, #12
 8004138:	6003      	str	r3, [r0, #0]
 800413a:	e7d6      	b.n	80040ea <_free_r+0x26>
 800413c:	6825      	ldr	r5, [r4, #0]
 800413e:	1961      	adds	r1, r4, r5
 8004140:	428b      	cmp	r3, r1
 8004142:	bf04      	itt	eq
 8004144:	6819      	ldreq	r1, [r3, #0]
 8004146:	685b      	ldreq	r3, [r3, #4]
 8004148:	6063      	str	r3, [r4, #4]
 800414a:	bf04      	itt	eq
 800414c:	1949      	addeq	r1, r1, r5
 800414e:	6021      	streq	r1, [r4, #0]
 8004150:	6054      	str	r4, [r2, #4]
 8004152:	e7ca      	b.n	80040ea <_free_r+0x26>
 8004154:	b003      	add	sp, #12
 8004156:	bd30      	pop	{r4, r5, pc}
 8004158:	200002ec 	.word	0x200002ec

0800415c <sbrk_aligned>:
 800415c:	b570      	push	{r4, r5, r6, lr}
 800415e:	4e0e      	ldr	r6, [pc, #56]	; (8004198 <sbrk_aligned+0x3c>)
 8004160:	460c      	mov	r4, r1
 8004162:	6831      	ldr	r1, [r6, #0]
 8004164:	4605      	mov	r5, r0
 8004166:	b911      	cbnz	r1, 800416e <sbrk_aligned+0x12>
 8004168:	f000 f8bc 	bl	80042e4 <_sbrk_r>
 800416c:	6030      	str	r0, [r6, #0]
 800416e:	4621      	mov	r1, r4
 8004170:	4628      	mov	r0, r5
 8004172:	f000 f8b7 	bl	80042e4 <_sbrk_r>
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	d00a      	beq.n	8004190 <sbrk_aligned+0x34>
 800417a:	1cc4      	adds	r4, r0, #3
 800417c:	f024 0403 	bic.w	r4, r4, #3
 8004180:	42a0      	cmp	r0, r4
 8004182:	d007      	beq.n	8004194 <sbrk_aligned+0x38>
 8004184:	1a21      	subs	r1, r4, r0
 8004186:	4628      	mov	r0, r5
 8004188:	f000 f8ac 	bl	80042e4 <_sbrk_r>
 800418c:	3001      	adds	r0, #1
 800418e:	d101      	bne.n	8004194 <sbrk_aligned+0x38>
 8004190:	f04f 34ff 	mov.w	r4, #4294967295
 8004194:	4620      	mov	r0, r4
 8004196:	bd70      	pop	{r4, r5, r6, pc}
 8004198:	200002f0 	.word	0x200002f0

0800419c <_malloc_r>:
 800419c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a0:	1ccd      	adds	r5, r1, #3
 80041a2:	f025 0503 	bic.w	r5, r5, #3
 80041a6:	3508      	adds	r5, #8
 80041a8:	2d0c      	cmp	r5, #12
 80041aa:	bf38      	it	cc
 80041ac:	250c      	movcc	r5, #12
 80041ae:	2d00      	cmp	r5, #0
 80041b0:	4607      	mov	r7, r0
 80041b2:	db01      	blt.n	80041b8 <_malloc_r+0x1c>
 80041b4:	42a9      	cmp	r1, r5
 80041b6:	d905      	bls.n	80041c4 <_malloc_r+0x28>
 80041b8:	230c      	movs	r3, #12
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	2600      	movs	r6, #0
 80041be:	4630      	mov	r0, r6
 80041c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c4:	4e2e      	ldr	r6, [pc, #184]	; (8004280 <_malloc_r+0xe4>)
 80041c6:	f000 f89d 	bl	8004304 <__malloc_lock>
 80041ca:	6833      	ldr	r3, [r6, #0]
 80041cc:	461c      	mov	r4, r3
 80041ce:	bb34      	cbnz	r4, 800421e <_malloc_r+0x82>
 80041d0:	4629      	mov	r1, r5
 80041d2:	4638      	mov	r0, r7
 80041d4:	f7ff ffc2 	bl	800415c <sbrk_aligned>
 80041d8:	1c43      	adds	r3, r0, #1
 80041da:	4604      	mov	r4, r0
 80041dc:	d14d      	bne.n	800427a <_malloc_r+0xde>
 80041de:	6834      	ldr	r4, [r6, #0]
 80041e0:	4626      	mov	r6, r4
 80041e2:	2e00      	cmp	r6, #0
 80041e4:	d140      	bne.n	8004268 <_malloc_r+0xcc>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	4631      	mov	r1, r6
 80041ea:	4638      	mov	r0, r7
 80041ec:	eb04 0803 	add.w	r8, r4, r3
 80041f0:	f000 f878 	bl	80042e4 <_sbrk_r>
 80041f4:	4580      	cmp	r8, r0
 80041f6:	d13a      	bne.n	800426e <_malloc_r+0xd2>
 80041f8:	6821      	ldr	r1, [r4, #0]
 80041fa:	3503      	adds	r5, #3
 80041fc:	1a6d      	subs	r5, r5, r1
 80041fe:	f025 0503 	bic.w	r5, r5, #3
 8004202:	3508      	adds	r5, #8
 8004204:	2d0c      	cmp	r5, #12
 8004206:	bf38      	it	cc
 8004208:	250c      	movcc	r5, #12
 800420a:	4629      	mov	r1, r5
 800420c:	4638      	mov	r0, r7
 800420e:	f7ff ffa5 	bl	800415c <sbrk_aligned>
 8004212:	3001      	adds	r0, #1
 8004214:	d02b      	beq.n	800426e <_malloc_r+0xd2>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	442b      	add	r3, r5
 800421a:	6023      	str	r3, [r4, #0]
 800421c:	e00e      	b.n	800423c <_malloc_r+0xa0>
 800421e:	6822      	ldr	r2, [r4, #0]
 8004220:	1b52      	subs	r2, r2, r5
 8004222:	d41e      	bmi.n	8004262 <_malloc_r+0xc6>
 8004224:	2a0b      	cmp	r2, #11
 8004226:	d916      	bls.n	8004256 <_malloc_r+0xba>
 8004228:	1961      	adds	r1, r4, r5
 800422a:	42a3      	cmp	r3, r4
 800422c:	6025      	str	r5, [r4, #0]
 800422e:	bf18      	it	ne
 8004230:	6059      	strne	r1, [r3, #4]
 8004232:	6863      	ldr	r3, [r4, #4]
 8004234:	bf08      	it	eq
 8004236:	6031      	streq	r1, [r6, #0]
 8004238:	5162      	str	r2, [r4, r5]
 800423a:	604b      	str	r3, [r1, #4]
 800423c:	4638      	mov	r0, r7
 800423e:	f104 060b 	add.w	r6, r4, #11
 8004242:	f000 f865 	bl	8004310 <__malloc_unlock>
 8004246:	f026 0607 	bic.w	r6, r6, #7
 800424a:	1d23      	adds	r3, r4, #4
 800424c:	1af2      	subs	r2, r6, r3
 800424e:	d0b6      	beq.n	80041be <_malloc_r+0x22>
 8004250:	1b9b      	subs	r3, r3, r6
 8004252:	50a3      	str	r3, [r4, r2]
 8004254:	e7b3      	b.n	80041be <_malloc_r+0x22>
 8004256:	6862      	ldr	r2, [r4, #4]
 8004258:	42a3      	cmp	r3, r4
 800425a:	bf0c      	ite	eq
 800425c:	6032      	streq	r2, [r6, #0]
 800425e:	605a      	strne	r2, [r3, #4]
 8004260:	e7ec      	b.n	800423c <_malloc_r+0xa0>
 8004262:	4623      	mov	r3, r4
 8004264:	6864      	ldr	r4, [r4, #4]
 8004266:	e7b2      	b.n	80041ce <_malloc_r+0x32>
 8004268:	4634      	mov	r4, r6
 800426a:	6876      	ldr	r6, [r6, #4]
 800426c:	e7b9      	b.n	80041e2 <_malloc_r+0x46>
 800426e:	230c      	movs	r3, #12
 8004270:	603b      	str	r3, [r7, #0]
 8004272:	4638      	mov	r0, r7
 8004274:	f000 f84c 	bl	8004310 <__malloc_unlock>
 8004278:	e7a1      	b.n	80041be <_malloc_r+0x22>
 800427a:	6025      	str	r5, [r4, #0]
 800427c:	e7de      	b.n	800423c <_malloc_r+0xa0>
 800427e:	bf00      	nop
 8004280:	200002ec 	.word	0x200002ec

08004284 <_realloc_r>:
 8004284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004288:	4680      	mov	r8, r0
 800428a:	4614      	mov	r4, r2
 800428c:	460e      	mov	r6, r1
 800428e:	b921      	cbnz	r1, 800429a <_realloc_r+0x16>
 8004290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004294:	4611      	mov	r1, r2
 8004296:	f7ff bf81 	b.w	800419c <_malloc_r>
 800429a:	b92a      	cbnz	r2, 80042a8 <_realloc_r+0x24>
 800429c:	f7ff ff12 	bl	80040c4 <_free_r>
 80042a0:	4625      	mov	r5, r4
 80042a2:	4628      	mov	r0, r5
 80042a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a8:	f000 f838 	bl	800431c <_malloc_usable_size_r>
 80042ac:	4284      	cmp	r4, r0
 80042ae:	4607      	mov	r7, r0
 80042b0:	d802      	bhi.n	80042b8 <_realloc_r+0x34>
 80042b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042b6:	d812      	bhi.n	80042de <_realloc_r+0x5a>
 80042b8:	4621      	mov	r1, r4
 80042ba:	4640      	mov	r0, r8
 80042bc:	f7ff ff6e 	bl	800419c <_malloc_r>
 80042c0:	4605      	mov	r5, r0
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d0ed      	beq.n	80042a2 <_realloc_r+0x1e>
 80042c6:	42bc      	cmp	r4, r7
 80042c8:	4622      	mov	r2, r4
 80042ca:	4631      	mov	r1, r6
 80042cc:	bf28      	it	cs
 80042ce:	463a      	movcs	r2, r7
 80042d0:	f7ff fed0 	bl	8004074 <memcpy>
 80042d4:	4631      	mov	r1, r6
 80042d6:	4640      	mov	r0, r8
 80042d8:	f7ff fef4 	bl	80040c4 <_free_r>
 80042dc:	e7e1      	b.n	80042a2 <_realloc_r+0x1e>
 80042de:	4635      	mov	r5, r6
 80042e0:	e7df      	b.n	80042a2 <_realloc_r+0x1e>
	...

080042e4 <_sbrk_r>:
 80042e4:	b538      	push	{r3, r4, r5, lr}
 80042e6:	4d06      	ldr	r5, [pc, #24]	; (8004300 <_sbrk_r+0x1c>)
 80042e8:	2300      	movs	r3, #0
 80042ea:	4604      	mov	r4, r0
 80042ec:	4608      	mov	r0, r1
 80042ee:	602b      	str	r3, [r5, #0]
 80042f0:	f7fc fef2 	bl	80010d8 <_sbrk>
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	d102      	bne.n	80042fe <_sbrk_r+0x1a>
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	b103      	cbz	r3, 80042fe <_sbrk_r+0x1a>
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	bd38      	pop	{r3, r4, r5, pc}
 8004300:	200002f4 	.word	0x200002f4

08004304 <__malloc_lock>:
 8004304:	4801      	ldr	r0, [pc, #4]	; (800430c <__malloc_lock+0x8>)
 8004306:	f000 b811 	b.w	800432c <__retarget_lock_acquire_recursive>
 800430a:	bf00      	nop
 800430c:	200002f8 	.word	0x200002f8

08004310 <__malloc_unlock>:
 8004310:	4801      	ldr	r0, [pc, #4]	; (8004318 <__malloc_unlock+0x8>)
 8004312:	f000 b80c 	b.w	800432e <__retarget_lock_release_recursive>
 8004316:	bf00      	nop
 8004318:	200002f8 	.word	0x200002f8

0800431c <_malloc_usable_size_r>:
 800431c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004320:	1f18      	subs	r0, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	bfbc      	itt	lt
 8004326:	580b      	ldrlt	r3, [r1, r0]
 8004328:	18c0      	addlt	r0, r0, r3
 800432a:	4770      	bx	lr

0800432c <__retarget_lock_acquire_recursive>:
 800432c:	4770      	bx	lr

0800432e <__retarget_lock_release_recursive>:
 800432e:	4770      	bx	lr

08004330 <_init>:
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	bf00      	nop
 8004334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004336:	bc08      	pop	{r3}
 8004338:	469e      	mov	lr, r3
 800433a:	4770      	bx	lr

0800433c <_fini>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	bf00      	nop
 8004340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004342:	bc08      	pop	{r3}
 8004344:	469e      	mov	lr, r3
 8004346:	4770      	bx	lr
