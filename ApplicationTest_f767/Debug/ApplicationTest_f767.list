
ApplicationTest_f767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a7c  08040200  08040200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08043c7c  08043c7c  00013c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08043d50  08043d50  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08043d50  08043d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08043d58  08043d58  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08043d58  08043d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08043d5c  08043d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08043d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08043dd0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08043dd0  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d3c  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b4  00000000  00000000  00029dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0002b490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e0  00000000  00000000  0002bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275e6  00000000  00000000  0002c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ba5  00000000  00000000  000538ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f24b8  00000000  00000000  0005d473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014f92b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000250c  00000000  00000000  0014f97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040200 <__do_global_dtors_aux>:
 8040200:	b510      	push	{r4, lr}
 8040202:	4c05      	ldr	r4, [pc, #20]	; (8040218 <__do_global_dtors_aux+0x18>)
 8040204:	7823      	ldrb	r3, [r4, #0]
 8040206:	b933      	cbnz	r3, 8040216 <__do_global_dtors_aux+0x16>
 8040208:	4b04      	ldr	r3, [pc, #16]	; (804021c <__do_global_dtors_aux+0x1c>)
 804020a:	b113      	cbz	r3, 8040212 <__do_global_dtors_aux+0x12>
 804020c:	4804      	ldr	r0, [pc, #16]	; (8040220 <__do_global_dtors_aux+0x20>)
 804020e:	f3af 8000 	nop.w
 8040212:	2301      	movs	r3, #1
 8040214:	7023      	strb	r3, [r4, #0]
 8040216:	bd10      	pop	{r4, pc}
 8040218:	20000070 	.word	0x20000070
 804021c:	00000000 	.word	0x00000000
 8040220:	08043c64 	.word	0x08043c64

08040224 <frame_dummy>:
 8040224:	b508      	push	{r3, lr}
 8040226:	4b03      	ldr	r3, [pc, #12]	; (8040234 <frame_dummy+0x10>)
 8040228:	b11b      	cbz	r3, 8040232 <frame_dummy+0xe>
 804022a:	4903      	ldr	r1, [pc, #12]	; (8040238 <frame_dummy+0x14>)
 804022c:	4803      	ldr	r0, [pc, #12]	; (804023c <frame_dummy+0x18>)
 804022e:	f3af 8000 	nop.w
 8040232:	bd08      	pop	{r3, pc}
 8040234:	00000000 	.word	0x00000000
 8040238:	20000074 	.word	0x20000074
 804023c:	08043c64 	.word	0x08043c64

08040240 <memchr>:
 8040240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8040244:	2a10      	cmp	r2, #16
 8040246:	db2b      	blt.n	80402a0 <memchr+0x60>
 8040248:	f010 0f07 	tst.w	r0, #7
 804024c:	d008      	beq.n	8040260 <memchr+0x20>
 804024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040252:	3a01      	subs	r2, #1
 8040254:	428b      	cmp	r3, r1
 8040256:	d02d      	beq.n	80402b4 <memchr+0x74>
 8040258:	f010 0f07 	tst.w	r0, #7
 804025c:	b342      	cbz	r2, 80402b0 <memchr+0x70>
 804025e:	d1f6      	bne.n	804024e <memchr+0xe>
 8040260:	b4f0      	push	{r4, r5, r6, r7}
 8040262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804026a:	f022 0407 	bic.w	r4, r2, #7
 804026e:	f07f 0700 	mvns.w	r7, #0
 8040272:	2300      	movs	r3, #0
 8040274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040278:	3c08      	subs	r4, #8
 804027a:	ea85 0501 	eor.w	r5, r5, r1
 804027e:	ea86 0601 	eor.w	r6, r6, r1
 8040282:	fa85 f547 	uadd8	r5, r5, r7
 8040286:	faa3 f587 	sel	r5, r3, r7
 804028a:	fa86 f647 	uadd8	r6, r6, r7
 804028e:	faa5 f687 	sel	r6, r5, r7
 8040292:	b98e      	cbnz	r6, 80402b8 <memchr+0x78>
 8040294:	d1ee      	bne.n	8040274 <memchr+0x34>
 8040296:	bcf0      	pop	{r4, r5, r6, r7}
 8040298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804029c:	f002 0207 	and.w	r2, r2, #7
 80402a0:	b132      	cbz	r2, 80402b0 <memchr+0x70>
 80402a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80402a6:	3a01      	subs	r2, #1
 80402a8:	ea83 0301 	eor.w	r3, r3, r1
 80402ac:	b113      	cbz	r3, 80402b4 <memchr+0x74>
 80402ae:	d1f8      	bne.n	80402a2 <memchr+0x62>
 80402b0:	2000      	movs	r0, #0
 80402b2:	4770      	bx	lr
 80402b4:	3801      	subs	r0, #1
 80402b6:	4770      	bx	lr
 80402b8:	2d00      	cmp	r5, #0
 80402ba:	bf06      	itte	eq
 80402bc:	4635      	moveq	r5, r6
 80402be:	3803      	subeq	r0, #3
 80402c0:	3807      	subne	r0, #7
 80402c2:	f015 0f01 	tst.w	r5, #1
 80402c6:	d107      	bne.n	80402d8 <memchr+0x98>
 80402c8:	3001      	adds	r0, #1
 80402ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80402ce:	bf02      	ittt	eq
 80402d0:	3001      	addeq	r0, #1
 80402d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80402d6:	3001      	addeq	r0, #1
 80402d8:	bcf0      	pop	{r4, r5, r6, r7}
 80402da:	3801      	subs	r0, #1
 80402dc:	4770      	bx	lr
 80402de:	bf00      	nop

080402e0 <__aeabi_uldivmod>:
 80402e0:	b953      	cbnz	r3, 80402f8 <__aeabi_uldivmod+0x18>
 80402e2:	b94a      	cbnz	r2, 80402f8 <__aeabi_uldivmod+0x18>
 80402e4:	2900      	cmp	r1, #0
 80402e6:	bf08      	it	eq
 80402e8:	2800      	cmpeq	r0, #0
 80402ea:	bf1c      	itt	ne
 80402ec:	f04f 31ff 	movne.w	r1, #4294967295
 80402f0:	f04f 30ff 	movne.w	r0, #4294967295
 80402f4:	f000 b974 	b.w	80405e0 <__aeabi_idiv0>
 80402f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80402fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040300:	f000 f806 	bl	8040310 <__udivmoddi4>
 8040304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804030c:	b004      	add	sp, #16
 804030e:	4770      	bx	lr

08040310 <__udivmoddi4>:
 8040310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040314:	9d08      	ldr	r5, [sp, #32]
 8040316:	4604      	mov	r4, r0
 8040318:	468e      	mov	lr, r1
 804031a:	2b00      	cmp	r3, #0
 804031c:	d14d      	bne.n	80403ba <__udivmoddi4+0xaa>
 804031e:	428a      	cmp	r2, r1
 8040320:	4694      	mov	ip, r2
 8040322:	d969      	bls.n	80403f8 <__udivmoddi4+0xe8>
 8040324:	fab2 f282 	clz	r2, r2
 8040328:	b152      	cbz	r2, 8040340 <__udivmoddi4+0x30>
 804032a:	fa01 f302 	lsl.w	r3, r1, r2
 804032e:	f1c2 0120 	rsb	r1, r2, #32
 8040332:	fa20 f101 	lsr.w	r1, r0, r1
 8040336:	fa0c fc02 	lsl.w	ip, ip, r2
 804033a:	ea41 0e03 	orr.w	lr, r1, r3
 804033e:	4094      	lsls	r4, r2
 8040340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040344:	0c21      	lsrs	r1, r4, #16
 8040346:	fbbe f6f8 	udiv	r6, lr, r8
 804034a:	fa1f f78c 	uxth.w	r7, ip
 804034e:	fb08 e316 	mls	r3, r8, r6, lr
 8040352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040356:	fb06 f107 	mul.w	r1, r6, r7
 804035a:	4299      	cmp	r1, r3
 804035c:	d90a      	bls.n	8040374 <__udivmoddi4+0x64>
 804035e:	eb1c 0303 	adds.w	r3, ip, r3
 8040362:	f106 30ff 	add.w	r0, r6, #4294967295
 8040366:	f080 811f 	bcs.w	80405a8 <__udivmoddi4+0x298>
 804036a:	4299      	cmp	r1, r3
 804036c:	f240 811c 	bls.w	80405a8 <__udivmoddi4+0x298>
 8040370:	3e02      	subs	r6, #2
 8040372:	4463      	add	r3, ip
 8040374:	1a5b      	subs	r3, r3, r1
 8040376:	b2a4      	uxth	r4, r4
 8040378:	fbb3 f0f8 	udiv	r0, r3, r8
 804037c:	fb08 3310 	mls	r3, r8, r0, r3
 8040380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040384:	fb00 f707 	mul.w	r7, r0, r7
 8040388:	42a7      	cmp	r7, r4
 804038a:	d90a      	bls.n	80403a2 <__udivmoddi4+0x92>
 804038c:	eb1c 0404 	adds.w	r4, ip, r4
 8040390:	f100 33ff 	add.w	r3, r0, #4294967295
 8040394:	f080 810a 	bcs.w	80405ac <__udivmoddi4+0x29c>
 8040398:	42a7      	cmp	r7, r4
 804039a:	f240 8107 	bls.w	80405ac <__udivmoddi4+0x29c>
 804039e:	4464      	add	r4, ip
 80403a0:	3802      	subs	r0, #2
 80403a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80403a6:	1be4      	subs	r4, r4, r7
 80403a8:	2600      	movs	r6, #0
 80403aa:	b11d      	cbz	r5, 80403b4 <__udivmoddi4+0xa4>
 80403ac:	40d4      	lsrs	r4, r2
 80403ae:	2300      	movs	r3, #0
 80403b0:	e9c5 4300 	strd	r4, r3, [r5]
 80403b4:	4631      	mov	r1, r6
 80403b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80403ba:	428b      	cmp	r3, r1
 80403bc:	d909      	bls.n	80403d2 <__udivmoddi4+0xc2>
 80403be:	2d00      	cmp	r5, #0
 80403c0:	f000 80ef 	beq.w	80405a2 <__udivmoddi4+0x292>
 80403c4:	2600      	movs	r6, #0
 80403c6:	e9c5 0100 	strd	r0, r1, [r5]
 80403ca:	4630      	mov	r0, r6
 80403cc:	4631      	mov	r1, r6
 80403ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80403d2:	fab3 f683 	clz	r6, r3
 80403d6:	2e00      	cmp	r6, #0
 80403d8:	d14a      	bne.n	8040470 <__udivmoddi4+0x160>
 80403da:	428b      	cmp	r3, r1
 80403dc:	d302      	bcc.n	80403e4 <__udivmoddi4+0xd4>
 80403de:	4282      	cmp	r2, r0
 80403e0:	f200 80f9 	bhi.w	80405d6 <__udivmoddi4+0x2c6>
 80403e4:	1a84      	subs	r4, r0, r2
 80403e6:	eb61 0303 	sbc.w	r3, r1, r3
 80403ea:	2001      	movs	r0, #1
 80403ec:	469e      	mov	lr, r3
 80403ee:	2d00      	cmp	r5, #0
 80403f0:	d0e0      	beq.n	80403b4 <__udivmoddi4+0xa4>
 80403f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80403f6:	e7dd      	b.n	80403b4 <__udivmoddi4+0xa4>
 80403f8:	b902      	cbnz	r2, 80403fc <__udivmoddi4+0xec>
 80403fa:	deff      	udf	#255	; 0xff
 80403fc:	fab2 f282 	clz	r2, r2
 8040400:	2a00      	cmp	r2, #0
 8040402:	f040 8092 	bne.w	804052a <__udivmoddi4+0x21a>
 8040406:	eba1 010c 	sub.w	r1, r1, ip
 804040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 804040e:	fa1f fe8c 	uxth.w	lr, ip
 8040412:	2601      	movs	r6, #1
 8040414:	0c20      	lsrs	r0, r4, #16
 8040416:	fbb1 f3f7 	udiv	r3, r1, r7
 804041a:	fb07 1113 	mls	r1, r7, r3, r1
 804041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040422:	fb0e f003 	mul.w	r0, lr, r3
 8040426:	4288      	cmp	r0, r1
 8040428:	d908      	bls.n	804043c <__udivmoddi4+0x12c>
 804042a:	eb1c 0101 	adds.w	r1, ip, r1
 804042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8040432:	d202      	bcs.n	804043a <__udivmoddi4+0x12a>
 8040434:	4288      	cmp	r0, r1
 8040436:	f200 80cb 	bhi.w	80405d0 <__udivmoddi4+0x2c0>
 804043a:	4643      	mov	r3, r8
 804043c:	1a09      	subs	r1, r1, r0
 804043e:	b2a4      	uxth	r4, r4
 8040440:	fbb1 f0f7 	udiv	r0, r1, r7
 8040444:	fb07 1110 	mls	r1, r7, r0, r1
 8040448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 804044c:	fb0e fe00 	mul.w	lr, lr, r0
 8040450:	45a6      	cmp	lr, r4
 8040452:	d908      	bls.n	8040466 <__udivmoddi4+0x156>
 8040454:	eb1c 0404 	adds.w	r4, ip, r4
 8040458:	f100 31ff 	add.w	r1, r0, #4294967295
 804045c:	d202      	bcs.n	8040464 <__udivmoddi4+0x154>
 804045e:	45a6      	cmp	lr, r4
 8040460:	f200 80bb 	bhi.w	80405da <__udivmoddi4+0x2ca>
 8040464:	4608      	mov	r0, r1
 8040466:	eba4 040e 	sub.w	r4, r4, lr
 804046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804046e:	e79c      	b.n	80403aa <__udivmoddi4+0x9a>
 8040470:	f1c6 0720 	rsb	r7, r6, #32
 8040474:	40b3      	lsls	r3, r6
 8040476:	fa22 fc07 	lsr.w	ip, r2, r7
 804047a:	ea4c 0c03 	orr.w	ip, ip, r3
 804047e:	fa20 f407 	lsr.w	r4, r0, r7
 8040482:	fa01 f306 	lsl.w	r3, r1, r6
 8040486:	431c      	orrs	r4, r3
 8040488:	40f9      	lsrs	r1, r7
 804048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804048e:	fa00 f306 	lsl.w	r3, r0, r6
 8040492:	fbb1 f8f9 	udiv	r8, r1, r9
 8040496:	0c20      	lsrs	r0, r4, #16
 8040498:	fa1f fe8c 	uxth.w	lr, ip
 804049c:	fb09 1118 	mls	r1, r9, r8, r1
 80404a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80404a4:	fb08 f00e 	mul.w	r0, r8, lr
 80404a8:	4288      	cmp	r0, r1
 80404aa:	fa02 f206 	lsl.w	r2, r2, r6
 80404ae:	d90b      	bls.n	80404c8 <__udivmoddi4+0x1b8>
 80404b0:	eb1c 0101 	adds.w	r1, ip, r1
 80404b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80404b8:	f080 8088 	bcs.w	80405cc <__udivmoddi4+0x2bc>
 80404bc:	4288      	cmp	r0, r1
 80404be:	f240 8085 	bls.w	80405cc <__udivmoddi4+0x2bc>
 80404c2:	f1a8 0802 	sub.w	r8, r8, #2
 80404c6:	4461      	add	r1, ip
 80404c8:	1a09      	subs	r1, r1, r0
 80404ca:	b2a4      	uxth	r4, r4
 80404cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80404d0:	fb09 1110 	mls	r1, r9, r0, r1
 80404d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80404d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80404dc:	458e      	cmp	lr, r1
 80404de:	d908      	bls.n	80404f2 <__udivmoddi4+0x1e2>
 80404e0:	eb1c 0101 	adds.w	r1, ip, r1
 80404e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80404e8:	d26c      	bcs.n	80405c4 <__udivmoddi4+0x2b4>
 80404ea:	458e      	cmp	lr, r1
 80404ec:	d96a      	bls.n	80405c4 <__udivmoddi4+0x2b4>
 80404ee:	3802      	subs	r0, #2
 80404f0:	4461      	add	r1, ip
 80404f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80404f6:	fba0 9402 	umull	r9, r4, r0, r2
 80404fa:	eba1 010e 	sub.w	r1, r1, lr
 80404fe:	42a1      	cmp	r1, r4
 8040500:	46c8      	mov	r8, r9
 8040502:	46a6      	mov	lr, r4
 8040504:	d356      	bcc.n	80405b4 <__udivmoddi4+0x2a4>
 8040506:	d053      	beq.n	80405b0 <__udivmoddi4+0x2a0>
 8040508:	b15d      	cbz	r5, 8040522 <__udivmoddi4+0x212>
 804050a:	ebb3 0208 	subs.w	r2, r3, r8
 804050e:	eb61 010e 	sbc.w	r1, r1, lr
 8040512:	fa01 f707 	lsl.w	r7, r1, r7
 8040516:	fa22 f306 	lsr.w	r3, r2, r6
 804051a:	40f1      	lsrs	r1, r6
 804051c:	431f      	orrs	r7, r3
 804051e:	e9c5 7100 	strd	r7, r1, [r5]
 8040522:	2600      	movs	r6, #0
 8040524:	4631      	mov	r1, r6
 8040526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804052a:	f1c2 0320 	rsb	r3, r2, #32
 804052e:	40d8      	lsrs	r0, r3
 8040530:	fa0c fc02 	lsl.w	ip, ip, r2
 8040534:	fa21 f303 	lsr.w	r3, r1, r3
 8040538:	4091      	lsls	r1, r2
 804053a:	4301      	orrs	r1, r0
 804053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040540:	fa1f fe8c 	uxth.w	lr, ip
 8040544:	fbb3 f0f7 	udiv	r0, r3, r7
 8040548:	fb07 3610 	mls	r6, r7, r0, r3
 804054c:	0c0b      	lsrs	r3, r1, #16
 804054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040552:	fb00 f60e 	mul.w	r6, r0, lr
 8040556:	429e      	cmp	r6, r3
 8040558:	fa04 f402 	lsl.w	r4, r4, r2
 804055c:	d908      	bls.n	8040570 <__udivmoddi4+0x260>
 804055e:	eb1c 0303 	adds.w	r3, ip, r3
 8040562:	f100 38ff 	add.w	r8, r0, #4294967295
 8040566:	d22f      	bcs.n	80405c8 <__udivmoddi4+0x2b8>
 8040568:	429e      	cmp	r6, r3
 804056a:	d92d      	bls.n	80405c8 <__udivmoddi4+0x2b8>
 804056c:	3802      	subs	r0, #2
 804056e:	4463      	add	r3, ip
 8040570:	1b9b      	subs	r3, r3, r6
 8040572:	b289      	uxth	r1, r1
 8040574:	fbb3 f6f7 	udiv	r6, r3, r7
 8040578:	fb07 3316 	mls	r3, r7, r6, r3
 804057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040580:	fb06 f30e 	mul.w	r3, r6, lr
 8040584:	428b      	cmp	r3, r1
 8040586:	d908      	bls.n	804059a <__udivmoddi4+0x28a>
 8040588:	eb1c 0101 	adds.w	r1, ip, r1
 804058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8040590:	d216      	bcs.n	80405c0 <__udivmoddi4+0x2b0>
 8040592:	428b      	cmp	r3, r1
 8040594:	d914      	bls.n	80405c0 <__udivmoddi4+0x2b0>
 8040596:	3e02      	subs	r6, #2
 8040598:	4461      	add	r1, ip
 804059a:	1ac9      	subs	r1, r1, r3
 804059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80405a0:	e738      	b.n	8040414 <__udivmoddi4+0x104>
 80405a2:	462e      	mov	r6, r5
 80405a4:	4628      	mov	r0, r5
 80405a6:	e705      	b.n	80403b4 <__udivmoddi4+0xa4>
 80405a8:	4606      	mov	r6, r0
 80405aa:	e6e3      	b.n	8040374 <__udivmoddi4+0x64>
 80405ac:	4618      	mov	r0, r3
 80405ae:	e6f8      	b.n	80403a2 <__udivmoddi4+0x92>
 80405b0:	454b      	cmp	r3, r9
 80405b2:	d2a9      	bcs.n	8040508 <__udivmoddi4+0x1f8>
 80405b4:	ebb9 0802 	subs.w	r8, r9, r2
 80405b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80405bc:	3801      	subs	r0, #1
 80405be:	e7a3      	b.n	8040508 <__udivmoddi4+0x1f8>
 80405c0:	4646      	mov	r6, r8
 80405c2:	e7ea      	b.n	804059a <__udivmoddi4+0x28a>
 80405c4:	4620      	mov	r0, r4
 80405c6:	e794      	b.n	80404f2 <__udivmoddi4+0x1e2>
 80405c8:	4640      	mov	r0, r8
 80405ca:	e7d1      	b.n	8040570 <__udivmoddi4+0x260>
 80405cc:	46d0      	mov	r8, sl
 80405ce:	e77b      	b.n	80404c8 <__udivmoddi4+0x1b8>
 80405d0:	3b02      	subs	r3, #2
 80405d2:	4461      	add	r1, ip
 80405d4:	e732      	b.n	804043c <__udivmoddi4+0x12c>
 80405d6:	4630      	mov	r0, r6
 80405d8:	e709      	b.n	80403ee <__udivmoddi4+0xde>
 80405da:	4464      	add	r4, ip
 80405dc:	3802      	subs	r0, #2
 80405de:	e742      	b.n	8040466 <__udivmoddi4+0x156>

080405e0 <__aeabi_idiv0>:
 80405e0:	4770      	bx	lr
 80405e2:	bf00      	nop

080405e4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80405e4:	b580      	push	{r7, lr}
 80405e6:	b082      	sub	sp, #8
 80405e8:	af00      	add	r7, sp, #0
 80405ea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80405ec:	1d39      	adds	r1, r7, #4
 80405ee:	f04f 33ff 	mov.w	r3, #4294967295
 80405f2:	2201      	movs	r2, #1
 80405f4:	4803      	ldr	r0, [pc, #12]	; (8040604 <__io_putchar+0x20>)
 80405f6:	f001 fed7 	bl	80423a8 <HAL_UART_Transmit>
  return ch;
 80405fa:	687b      	ldr	r3, [r7, #4]
}
 80405fc:	4618      	mov	r0, r3
 80405fe:	3708      	adds	r7, #8
 8040600:	46bd      	mov	sp, r7
 8040602:	bd80      	pop	{r7, pc}
 8040604:	2000008c 	.word	0x2000008c

08040608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040608:	b580      	push	{r7, lr}
 804060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 804060c:	f000 fa7b 	bl	8040b06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040610:	f000 f818 	bl	8040644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040614:	f000 f8a2 	bl	804075c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8040618:	f000 f870 	bl	80406fc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Application_V(%d.%d) Started..\n ",APP_Version[0] ,APP_Version[1]);
 804061c:	2300      	movs	r3, #0
 804061e:	2201      	movs	r2, #1
 8040620:	4619      	mov	r1, r3
 8040622:	4806      	ldr	r0, [pc, #24]	; (804063c <main+0x34>)
 8040624:	f002 fb90 	bl	8042d48 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(blueLED_GPIO_Port, blueLED_Pin);
 8040628:	2180      	movs	r1, #128	; 0x80
 804062a:	4805      	ldr	r0, [pc, #20]	; (8040640 <main+0x38>)
 804062c:	f000 fd97 	bl	804115e <HAL_GPIO_TogglePin>
	  HAL_Delay(1500);
 8040630:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8040634:	f000 fac4 	bl	8040bc0 <HAL_Delay>
	  HAL_GPIO_TogglePin(blueLED_GPIO_Port, blueLED_Pin);
 8040638:	e7f6      	b.n	8040628 <main+0x20>
 804063a:	bf00      	nop
 804063c:	08043c7c 	.word	0x08043c7c
 8040640:	40020400 	.word	0x40020400

08040644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040644:	b580      	push	{r7, lr}
 8040646:	b094      	sub	sp, #80	; 0x50
 8040648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804064a:	f107 031c 	add.w	r3, r7, #28
 804064e:	2234      	movs	r2, #52	; 0x34
 8040650:	2100      	movs	r1, #0
 8040652:	4618      	mov	r0, r3
 8040654:	f002 fb70 	bl	8042d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040658:	f107 0308 	add.w	r3, r7, #8
 804065c:	2200      	movs	r2, #0
 804065e:	601a      	str	r2, [r3, #0]
 8040660:	605a      	str	r2, [r3, #4]
 8040662:	609a      	str	r2, [r3, #8]
 8040664:	60da      	str	r2, [r3, #12]
 8040666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8040668:	4b22      	ldr	r3, [pc, #136]	; (80406f4 <SystemClock_Config+0xb0>)
 804066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804066c:	4a21      	ldr	r2, [pc, #132]	; (80406f4 <SystemClock_Config+0xb0>)
 804066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040672:	6413      	str	r3, [r2, #64]	; 0x40
 8040674:	4b1f      	ldr	r3, [pc, #124]	; (80406f4 <SystemClock_Config+0xb0>)
 8040676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804067c:	607b      	str	r3, [r7, #4]
 804067e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8040680:	4b1d      	ldr	r3, [pc, #116]	; (80406f8 <SystemClock_Config+0xb4>)
 8040682:	681b      	ldr	r3, [r3, #0]
 8040684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8040688:	4a1b      	ldr	r2, [pc, #108]	; (80406f8 <SystemClock_Config+0xb4>)
 804068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804068e:	6013      	str	r3, [r2, #0]
 8040690:	4b19      	ldr	r3, [pc, #100]	; (80406f8 <SystemClock_Config+0xb4>)
 8040692:	681b      	ldr	r3, [r3, #0]
 8040694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8040698:	603b      	str	r3, [r7, #0]
 804069a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 804069c:	2302      	movs	r3, #2
 804069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80406a0:	2301      	movs	r3, #1
 80406a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80406a4:	2310      	movs	r3, #16
 80406a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80406a8:	2300      	movs	r3, #0
 80406aa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80406ac:	f107 031c 	add.w	r3, r7, #28
 80406b0:	4618      	mov	r0, r3
 80406b2:	f000 fd6f 	bl	8041194 <HAL_RCC_OscConfig>
 80406b6:	4603      	mov	r3, r0
 80406b8:	2b00      	cmp	r3, #0
 80406ba:	d001      	beq.n	80406c0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80406bc:	f000 f88c 	bl	80407d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80406c0:	230f      	movs	r3, #15
 80406c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80406c4:	2300      	movs	r3, #0
 80406c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80406c8:	2300      	movs	r3, #0
 80406ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80406cc:	2300      	movs	r3, #0
 80406ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80406d0:	2300      	movs	r3, #0
 80406d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80406d4:	f107 0308 	add.w	r3, r7, #8
 80406d8:	2100      	movs	r1, #0
 80406da:	4618      	mov	r0, r3
 80406dc:	f001 f808 	bl	80416f0 <HAL_RCC_ClockConfig>
 80406e0:	4603      	mov	r3, r0
 80406e2:	2b00      	cmp	r3, #0
 80406e4:	d001      	beq.n	80406ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80406e6:	f000 f877 	bl	80407d8 <Error_Handler>
  }
}
 80406ea:	bf00      	nop
 80406ec:	3750      	adds	r7, #80	; 0x50
 80406ee:	46bd      	mov	sp, r7
 80406f0:	bd80      	pop	{r7, pc}
 80406f2:	bf00      	nop
 80406f4:	40023800 	.word	0x40023800
 80406f8:	40007000 	.word	0x40007000

080406fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80406fc:	b580      	push	{r7, lr}
 80406fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8040700:	4b14      	ldr	r3, [pc, #80]	; (8040754 <MX_USART3_UART_Init+0x58>)
 8040702:	4a15      	ldr	r2, [pc, #84]	; (8040758 <MX_USART3_UART_Init+0x5c>)
 8040704:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8040706:	4b13      	ldr	r3, [pc, #76]	; (8040754 <MX_USART3_UART_Init+0x58>)
 8040708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 804070c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 804070e:	4b11      	ldr	r3, [pc, #68]	; (8040754 <MX_USART3_UART_Init+0x58>)
 8040710:	2200      	movs	r2, #0
 8040712:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8040714:	4b0f      	ldr	r3, [pc, #60]	; (8040754 <MX_USART3_UART_Init+0x58>)
 8040716:	2200      	movs	r2, #0
 8040718:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 804071a:	4b0e      	ldr	r3, [pc, #56]	; (8040754 <MX_USART3_UART_Init+0x58>)
 804071c:	2200      	movs	r2, #0
 804071e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8040720:	4b0c      	ldr	r3, [pc, #48]	; (8040754 <MX_USART3_UART_Init+0x58>)
 8040722:	220c      	movs	r2, #12
 8040724:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040726:	4b0b      	ldr	r3, [pc, #44]	; (8040754 <MX_USART3_UART_Init+0x58>)
 8040728:	2200      	movs	r2, #0
 804072a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 804072c:	4b09      	ldr	r3, [pc, #36]	; (8040754 <MX_USART3_UART_Init+0x58>)
 804072e:	2200      	movs	r2, #0
 8040730:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040732:	4b08      	ldr	r3, [pc, #32]	; (8040754 <MX_USART3_UART_Init+0x58>)
 8040734:	2200      	movs	r2, #0
 8040736:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040738:	4b06      	ldr	r3, [pc, #24]	; (8040754 <MX_USART3_UART_Init+0x58>)
 804073a:	2200      	movs	r2, #0
 804073c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 804073e:	4805      	ldr	r0, [pc, #20]	; (8040754 <MX_USART3_UART_Init+0x58>)
 8040740:	f001 fde4 	bl	804230c <HAL_UART_Init>
 8040744:	4603      	mov	r3, r0
 8040746:	2b00      	cmp	r3, #0
 8040748:	d001      	beq.n	804074e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 804074a:	f000 f845 	bl	80407d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 804074e:	bf00      	nop
 8040750:	bd80      	pop	{r7, pc}
 8040752:	bf00      	nop
 8040754:	2000008c 	.word	0x2000008c
 8040758:	40004800 	.word	0x40004800

0804075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 804075c:	b580      	push	{r7, lr}
 804075e:	b088      	sub	sp, #32
 8040760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040762:	f107 030c 	add.w	r3, r7, #12
 8040766:	2200      	movs	r2, #0
 8040768:	601a      	str	r2, [r3, #0]
 804076a:	605a      	str	r2, [r3, #4]
 804076c:	609a      	str	r2, [r3, #8]
 804076e:	60da      	str	r2, [r3, #12]
 8040770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040772:	4b17      	ldr	r3, [pc, #92]	; (80407d0 <MX_GPIO_Init+0x74>)
 8040774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040776:	4a16      	ldr	r2, [pc, #88]	; (80407d0 <MX_GPIO_Init+0x74>)
 8040778:	f043 0308 	orr.w	r3, r3, #8
 804077c:	6313      	str	r3, [r2, #48]	; 0x30
 804077e:	4b14      	ldr	r3, [pc, #80]	; (80407d0 <MX_GPIO_Init+0x74>)
 8040780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040782:	f003 0308 	and.w	r3, r3, #8
 8040786:	60bb      	str	r3, [r7, #8]
 8040788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 804078a:	4b11      	ldr	r3, [pc, #68]	; (80407d0 <MX_GPIO_Init+0x74>)
 804078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804078e:	4a10      	ldr	r2, [pc, #64]	; (80407d0 <MX_GPIO_Init+0x74>)
 8040790:	f043 0302 	orr.w	r3, r3, #2
 8040794:	6313      	str	r3, [r2, #48]	; 0x30
 8040796:	4b0e      	ldr	r3, [pc, #56]	; (80407d0 <MX_GPIO_Init+0x74>)
 8040798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804079a:	f003 0302 	and.w	r3, r3, #2
 804079e:	607b      	str	r3, [r7, #4]
 80407a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(blueLED_GPIO_Port, blueLED_Pin, GPIO_PIN_RESET);
 80407a2:	2200      	movs	r2, #0
 80407a4:	2180      	movs	r1, #128	; 0x80
 80407a6:	480b      	ldr	r0, [pc, #44]	; (80407d4 <MX_GPIO_Init+0x78>)
 80407a8:	f000 fcc0 	bl	804112c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : blueLED_Pin */
  GPIO_InitStruct.Pin = blueLED_Pin;
 80407ac:	2380      	movs	r3, #128	; 0x80
 80407ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80407b0:	2301      	movs	r3, #1
 80407b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407b4:	2300      	movs	r3, #0
 80407b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80407b8:	2300      	movs	r3, #0
 80407ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(blueLED_GPIO_Port, &GPIO_InitStruct);
 80407bc:	f107 030c 	add.w	r3, r7, #12
 80407c0:	4619      	mov	r1, r3
 80407c2:	4804      	ldr	r0, [pc, #16]	; (80407d4 <MX_GPIO_Init+0x78>)
 80407c4:	f000 fb06 	bl	8040dd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80407c8:	bf00      	nop
 80407ca:	3720      	adds	r7, #32
 80407cc:	46bd      	mov	sp, r7
 80407ce:	bd80      	pop	{r7, pc}
 80407d0:	40023800 	.word	0x40023800
 80407d4:	40020400 	.word	0x40020400

080407d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80407d8:	b480      	push	{r7}
 80407da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80407dc:	b672      	cpsid	i
}
 80407de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80407e0:	e7fe      	b.n	80407e0 <Error_Handler+0x8>
	...

080407e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80407e4:	b480      	push	{r7}
 80407e6:	b083      	sub	sp, #12
 80407e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80407ea:	4b0f      	ldr	r3, [pc, #60]	; (8040828 <HAL_MspInit+0x44>)
 80407ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80407ee:	4a0e      	ldr	r2, [pc, #56]	; (8040828 <HAL_MspInit+0x44>)
 80407f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80407f4:	6413      	str	r3, [r2, #64]	; 0x40
 80407f6:	4b0c      	ldr	r3, [pc, #48]	; (8040828 <HAL_MspInit+0x44>)
 80407f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80407fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80407fe:	607b      	str	r3, [r7, #4]
 8040800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040802:	4b09      	ldr	r3, [pc, #36]	; (8040828 <HAL_MspInit+0x44>)
 8040804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040806:	4a08      	ldr	r2, [pc, #32]	; (8040828 <HAL_MspInit+0x44>)
 8040808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804080c:	6453      	str	r3, [r2, #68]	; 0x44
 804080e:	4b06      	ldr	r3, [pc, #24]	; (8040828 <HAL_MspInit+0x44>)
 8040810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040816:	603b      	str	r3, [r7, #0]
 8040818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 804081a:	bf00      	nop
 804081c:	370c      	adds	r7, #12
 804081e:	46bd      	mov	sp, r7
 8040820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040824:	4770      	bx	lr
 8040826:	bf00      	nop
 8040828:	40023800 	.word	0x40023800

0804082c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 804082c:	b580      	push	{r7, lr}
 804082e:	b0ae      	sub	sp, #184	; 0xb8
 8040830:	af00      	add	r7, sp, #0
 8040832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040834:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040838:	2200      	movs	r2, #0
 804083a:	601a      	str	r2, [r3, #0]
 804083c:	605a      	str	r2, [r3, #4]
 804083e:	609a      	str	r2, [r3, #8]
 8040840:	60da      	str	r2, [r3, #12]
 8040842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040844:	f107 0314 	add.w	r3, r7, #20
 8040848:	2290      	movs	r2, #144	; 0x90
 804084a:	2100      	movs	r1, #0
 804084c:	4618      	mov	r0, r3
 804084e:	f002 fa73 	bl	8042d38 <memset>
  if(huart->Instance==USART3)
 8040852:	687b      	ldr	r3, [r7, #4]
 8040854:	681b      	ldr	r3, [r3, #0]
 8040856:	4a22      	ldr	r2, [pc, #136]	; (80408e0 <HAL_UART_MspInit+0xb4>)
 8040858:	4293      	cmp	r3, r2
 804085a:	d13c      	bne.n	80408d6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 804085c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8040860:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8040862:	2300      	movs	r3, #0
 8040864:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040866:	f107 0314 	add.w	r3, r7, #20
 804086a:	4618      	mov	r0, r3
 804086c:	f001 f926 	bl	8041abc <HAL_RCCEx_PeriphCLKConfig>
 8040870:	4603      	mov	r3, r0
 8040872:	2b00      	cmp	r3, #0
 8040874:	d001      	beq.n	804087a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8040876:	f7ff ffaf 	bl	80407d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 804087a:	4b1a      	ldr	r3, [pc, #104]	; (80408e4 <HAL_UART_MspInit+0xb8>)
 804087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804087e:	4a19      	ldr	r2, [pc, #100]	; (80408e4 <HAL_UART_MspInit+0xb8>)
 8040880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8040884:	6413      	str	r3, [r2, #64]	; 0x40
 8040886:	4b17      	ldr	r3, [pc, #92]	; (80408e4 <HAL_UART_MspInit+0xb8>)
 8040888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804088a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 804088e:	613b      	str	r3, [r7, #16]
 8040890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8040892:	4b14      	ldr	r3, [pc, #80]	; (80408e4 <HAL_UART_MspInit+0xb8>)
 8040894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040896:	4a13      	ldr	r2, [pc, #76]	; (80408e4 <HAL_UART_MspInit+0xb8>)
 8040898:	f043 0308 	orr.w	r3, r3, #8
 804089c:	6313      	str	r3, [r2, #48]	; 0x30
 804089e:	4b11      	ldr	r3, [pc, #68]	; (80408e4 <HAL_UART_MspInit+0xb8>)
 80408a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408a2:	f003 0308 	and.w	r3, r3, #8
 80408a6:	60fb      	str	r3, [r7, #12]
 80408a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80408aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80408ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80408b2:	2302      	movs	r3, #2
 80408b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80408b8:	2300      	movs	r3, #0
 80408ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80408be:	2303      	movs	r3, #3
 80408c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80408c4:	2307      	movs	r3, #7
 80408c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80408ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80408ce:	4619      	mov	r1, r3
 80408d0:	4805      	ldr	r0, [pc, #20]	; (80408e8 <HAL_UART_MspInit+0xbc>)
 80408d2:	f000 fa7f 	bl	8040dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80408d6:	bf00      	nop
 80408d8:	37b8      	adds	r7, #184	; 0xb8
 80408da:	46bd      	mov	sp, r7
 80408dc:	bd80      	pop	{r7, pc}
 80408de:	bf00      	nop
 80408e0:	40004800 	.word	0x40004800
 80408e4:	40023800 	.word	0x40023800
 80408e8:	40020c00 	.word	0x40020c00

080408ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80408ec:	b480      	push	{r7}
 80408ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80408f0:	e7fe      	b.n	80408f0 <NMI_Handler+0x4>

080408f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80408f2:	b480      	push	{r7}
 80408f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80408f6:	e7fe      	b.n	80408f6 <HardFault_Handler+0x4>

080408f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80408f8:	b480      	push	{r7}
 80408fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80408fc:	e7fe      	b.n	80408fc <MemManage_Handler+0x4>

080408fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80408fe:	b480      	push	{r7}
 8040900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040902:	e7fe      	b.n	8040902 <BusFault_Handler+0x4>

08040904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040904:	b480      	push	{r7}
 8040906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040908:	e7fe      	b.n	8040908 <UsageFault_Handler+0x4>

0804090a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 804090a:	b480      	push	{r7}
 804090c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 804090e:	bf00      	nop
 8040910:	46bd      	mov	sp, r7
 8040912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040916:	4770      	bx	lr

08040918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040918:	b480      	push	{r7}
 804091a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 804091c:	bf00      	nop
 804091e:	46bd      	mov	sp, r7
 8040920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040924:	4770      	bx	lr

08040926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040926:	b480      	push	{r7}
 8040928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 804092a:	bf00      	nop
 804092c:	46bd      	mov	sp, r7
 804092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040932:	4770      	bx	lr

08040934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040934:	b580      	push	{r7, lr}
 8040936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040938:	f000 f922 	bl	8040b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 804093c:	bf00      	nop
 804093e:	bd80      	pop	{r7, pc}

08040940 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8040940:	b580      	push	{r7, lr}
 8040942:	b086      	sub	sp, #24
 8040944:	af00      	add	r7, sp, #0
 8040946:	60f8      	str	r0, [r7, #12]
 8040948:	60b9      	str	r1, [r7, #8]
 804094a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 804094c:	2300      	movs	r3, #0
 804094e:	617b      	str	r3, [r7, #20]
 8040950:	e00a      	b.n	8040968 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8040952:	f3af 8000 	nop.w
 8040956:	4601      	mov	r1, r0
 8040958:	68bb      	ldr	r3, [r7, #8]
 804095a:	1c5a      	adds	r2, r3, #1
 804095c:	60ba      	str	r2, [r7, #8]
 804095e:	b2ca      	uxtb	r2, r1
 8040960:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040962:	697b      	ldr	r3, [r7, #20]
 8040964:	3301      	adds	r3, #1
 8040966:	617b      	str	r3, [r7, #20]
 8040968:	697a      	ldr	r2, [r7, #20]
 804096a:	687b      	ldr	r3, [r7, #4]
 804096c:	429a      	cmp	r2, r3
 804096e:	dbf0      	blt.n	8040952 <_read+0x12>
  }

  return len;
 8040970:	687b      	ldr	r3, [r7, #4]
}
 8040972:	4618      	mov	r0, r3
 8040974:	3718      	adds	r7, #24
 8040976:	46bd      	mov	sp, r7
 8040978:	bd80      	pop	{r7, pc}

0804097a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 804097a:	b580      	push	{r7, lr}
 804097c:	b086      	sub	sp, #24
 804097e:	af00      	add	r7, sp, #0
 8040980:	60f8      	str	r0, [r7, #12]
 8040982:	60b9      	str	r1, [r7, #8]
 8040984:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040986:	2300      	movs	r3, #0
 8040988:	617b      	str	r3, [r7, #20]
 804098a:	e009      	b.n	80409a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 804098c:	68bb      	ldr	r3, [r7, #8]
 804098e:	1c5a      	adds	r2, r3, #1
 8040990:	60ba      	str	r2, [r7, #8]
 8040992:	781b      	ldrb	r3, [r3, #0]
 8040994:	4618      	mov	r0, r3
 8040996:	f7ff fe25 	bl	80405e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 804099a:	697b      	ldr	r3, [r7, #20]
 804099c:	3301      	adds	r3, #1
 804099e:	617b      	str	r3, [r7, #20]
 80409a0:	697a      	ldr	r2, [r7, #20]
 80409a2:	687b      	ldr	r3, [r7, #4]
 80409a4:	429a      	cmp	r2, r3
 80409a6:	dbf1      	blt.n	804098c <_write+0x12>
  }
  return len;
 80409a8:	687b      	ldr	r3, [r7, #4]
}
 80409aa:	4618      	mov	r0, r3
 80409ac:	3718      	adds	r7, #24
 80409ae:	46bd      	mov	sp, r7
 80409b0:	bd80      	pop	{r7, pc}

080409b2 <_close>:

int _close(int file)
{
 80409b2:	b480      	push	{r7}
 80409b4:	b083      	sub	sp, #12
 80409b6:	af00      	add	r7, sp, #0
 80409b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80409ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80409be:	4618      	mov	r0, r3
 80409c0:	370c      	adds	r7, #12
 80409c2:	46bd      	mov	sp, r7
 80409c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409c8:	4770      	bx	lr

080409ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80409ca:	b480      	push	{r7}
 80409cc:	b083      	sub	sp, #12
 80409ce:	af00      	add	r7, sp, #0
 80409d0:	6078      	str	r0, [r7, #4]
 80409d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80409d4:	683b      	ldr	r3, [r7, #0]
 80409d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80409da:	605a      	str	r2, [r3, #4]
  return 0;
 80409dc:	2300      	movs	r3, #0
}
 80409de:	4618      	mov	r0, r3
 80409e0:	370c      	adds	r7, #12
 80409e2:	46bd      	mov	sp, r7
 80409e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409e8:	4770      	bx	lr

080409ea <_isatty>:

int _isatty(int file)
{
 80409ea:	b480      	push	{r7}
 80409ec:	b083      	sub	sp, #12
 80409ee:	af00      	add	r7, sp, #0
 80409f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80409f2:	2301      	movs	r3, #1
}
 80409f4:	4618      	mov	r0, r3
 80409f6:	370c      	adds	r7, #12
 80409f8:	46bd      	mov	sp, r7
 80409fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409fe:	4770      	bx	lr

08040a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8040a00:	b480      	push	{r7}
 8040a02:	b085      	sub	sp, #20
 8040a04:	af00      	add	r7, sp, #0
 8040a06:	60f8      	str	r0, [r7, #12]
 8040a08:	60b9      	str	r1, [r7, #8]
 8040a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8040a0c:	2300      	movs	r3, #0
}
 8040a0e:	4618      	mov	r0, r3
 8040a10:	3714      	adds	r7, #20
 8040a12:	46bd      	mov	sp, r7
 8040a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a18:	4770      	bx	lr
	...

08040a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040a1c:	b580      	push	{r7, lr}
 8040a1e:	b086      	sub	sp, #24
 8040a20:	af00      	add	r7, sp, #0
 8040a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8040a24:	4a14      	ldr	r2, [pc, #80]	; (8040a78 <_sbrk+0x5c>)
 8040a26:	4b15      	ldr	r3, [pc, #84]	; (8040a7c <_sbrk+0x60>)
 8040a28:	1ad3      	subs	r3, r2, r3
 8040a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040a2c:	697b      	ldr	r3, [r7, #20]
 8040a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8040a30:	4b13      	ldr	r3, [pc, #76]	; (8040a80 <_sbrk+0x64>)
 8040a32:	681b      	ldr	r3, [r3, #0]
 8040a34:	2b00      	cmp	r3, #0
 8040a36:	d102      	bne.n	8040a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8040a38:	4b11      	ldr	r3, [pc, #68]	; (8040a80 <_sbrk+0x64>)
 8040a3a:	4a12      	ldr	r2, [pc, #72]	; (8040a84 <_sbrk+0x68>)
 8040a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8040a3e:	4b10      	ldr	r3, [pc, #64]	; (8040a80 <_sbrk+0x64>)
 8040a40:	681a      	ldr	r2, [r3, #0]
 8040a42:	687b      	ldr	r3, [r7, #4]
 8040a44:	4413      	add	r3, r2
 8040a46:	693a      	ldr	r2, [r7, #16]
 8040a48:	429a      	cmp	r2, r3
 8040a4a:	d207      	bcs.n	8040a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8040a4c:	f002 f94a 	bl	8042ce4 <__errno>
 8040a50:	4603      	mov	r3, r0
 8040a52:	220c      	movs	r2, #12
 8040a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8040a56:	f04f 33ff 	mov.w	r3, #4294967295
 8040a5a:	e009      	b.n	8040a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8040a5c:	4b08      	ldr	r3, [pc, #32]	; (8040a80 <_sbrk+0x64>)
 8040a5e:	681b      	ldr	r3, [r3, #0]
 8040a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8040a62:	4b07      	ldr	r3, [pc, #28]	; (8040a80 <_sbrk+0x64>)
 8040a64:	681a      	ldr	r2, [r3, #0]
 8040a66:	687b      	ldr	r3, [r7, #4]
 8040a68:	4413      	add	r3, r2
 8040a6a:	4a05      	ldr	r2, [pc, #20]	; (8040a80 <_sbrk+0x64>)
 8040a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8040a6e:	68fb      	ldr	r3, [r7, #12]
}
 8040a70:	4618      	mov	r0, r3
 8040a72:	3718      	adds	r7, #24
 8040a74:	46bd      	mov	sp, r7
 8040a76:	bd80      	pop	{r7, pc}
 8040a78:	20080000 	.word	0x20080000
 8040a7c:	00000400 	.word	0x00000400
 8040a80:	20000114 	.word	0x20000114
 8040a84:	20000130 	.word	0x20000130

08040a88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8040a88:	b480      	push	{r7}
 8040a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8040a8c:	4b07      	ldr	r3, [pc, #28]	; (8040aac <SystemInit+0x24>)
 8040a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8040a92:	4a06      	ldr	r2, [pc, #24]	; (8040aac <SystemInit+0x24>)
 8040a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8040a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8040a9c:	4b03      	ldr	r3, [pc, #12]	; (8040aac <SystemInit+0x24>)
 8040a9e:	4a04      	ldr	r2, [pc, #16]	; (8040ab0 <SystemInit+0x28>)
 8040aa0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8040aa2:	bf00      	nop
 8040aa4:	46bd      	mov	sp, r7
 8040aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040aaa:	4770      	bx	lr
 8040aac:	e000ed00 	.word	0xe000ed00
 8040ab0:	08040000 	.word	0x08040000

08040ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8040ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8040ab8:	480d      	ldr	r0, [pc, #52]	; (8040af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8040aba:	490e      	ldr	r1, [pc, #56]	; (8040af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8040abc:	4a0e      	ldr	r2, [pc, #56]	; (8040af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8040abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040ac0:	e002      	b.n	8040ac8 <LoopCopyDataInit>

08040ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040ac6:	3304      	adds	r3, #4

08040ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040acc:	d3f9      	bcc.n	8040ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040ace:	4a0b      	ldr	r2, [pc, #44]	; (8040afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8040ad0:	4c0b      	ldr	r4, [pc, #44]	; (8040b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8040ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040ad4:	e001      	b.n	8040ada <LoopFillZerobss>

08040ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040ad8:	3204      	adds	r2, #4

08040ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040adc:	d3fb      	bcc.n	8040ad6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8040ade:	f7ff ffd3 	bl	8040a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8040ae2:	f002 f905 	bl	8042cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040ae6:	f7ff fd8f 	bl	8040608 <main>
  bx  lr    
 8040aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8040aec:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8040af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8040af4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8040af8:	08043d60 	.word	0x08043d60
  ldr r2, =_sbss
 8040afc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8040b00:	2000012c 	.word	0x2000012c

08040b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040b04:	e7fe      	b.n	8040b04 <ADC_IRQHandler>

08040b06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040b06:	b580      	push	{r7, lr}
 8040b08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040b0a:	2003      	movs	r0, #3
 8040b0c:	f000 f92e 	bl	8040d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8040b10:	200f      	movs	r0, #15
 8040b12:	f000 f805 	bl	8040b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8040b16:	f7ff fe65 	bl	80407e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8040b1a:	2300      	movs	r3, #0
}
 8040b1c:	4618      	mov	r0, r3
 8040b1e:	bd80      	pop	{r7, pc}

08040b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040b20:	b580      	push	{r7, lr}
 8040b22:	b082      	sub	sp, #8
 8040b24:	af00      	add	r7, sp, #0
 8040b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040b28:	4b12      	ldr	r3, [pc, #72]	; (8040b74 <HAL_InitTick+0x54>)
 8040b2a:	681a      	ldr	r2, [r3, #0]
 8040b2c:	4b12      	ldr	r3, [pc, #72]	; (8040b78 <HAL_InitTick+0x58>)
 8040b2e:	781b      	ldrb	r3, [r3, #0]
 8040b30:	4619      	mov	r1, r3
 8040b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8040b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8040b3e:	4618      	mov	r0, r3
 8040b40:	f000 f93b 	bl	8040dba <HAL_SYSTICK_Config>
 8040b44:	4603      	mov	r3, r0
 8040b46:	2b00      	cmp	r3, #0
 8040b48:	d001      	beq.n	8040b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8040b4a:	2301      	movs	r3, #1
 8040b4c:	e00e      	b.n	8040b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040b4e:	687b      	ldr	r3, [r7, #4]
 8040b50:	2b0f      	cmp	r3, #15
 8040b52:	d80a      	bhi.n	8040b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040b54:	2200      	movs	r2, #0
 8040b56:	6879      	ldr	r1, [r7, #4]
 8040b58:	f04f 30ff 	mov.w	r0, #4294967295
 8040b5c:	f000 f911 	bl	8040d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040b60:	4a06      	ldr	r2, [pc, #24]	; (8040b7c <HAL_InitTick+0x5c>)
 8040b62:	687b      	ldr	r3, [r7, #4]
 8040b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8040b66:	2300      	movs	r3, #0
 8040b68:	e000      	b.n	8040b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8040b6a:	2301      	movs	r3, #1
}
 8040b6c:	4618      	mov	r0, r3
 8040b6e:	3708      	adds	r7, #8
 8040b70:	46bd      	mov	sp, r7
 8040b72:	bd80      	pop	{r7, pc}
 8040b74:	20000000 	.word	0x20000000
 8040b78:	20000008 	.word	0x20000008
 8040b7c:	20000004 	.word	0x20000004

08040b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040b80:	b480      	push	{r7}
 8040b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040b84:	4b06      	ldr	r3, [pc, #24]	; (8040ba0 <HAL_IncTick+0x20>)
 8040b86:	781b      	ldrb	r3, [r3, #0]
 8040b88:	461a      	mov	r2, r3
 8040b8a:	4b06      	ldr	r3, [pc, #24]	; (8040ba4 <HAL_IncTick+0x24>)
 8040b8c:	681b      	ldr	r3, [r3, #0]
 8040b8e:	4413      	add	r3, r2
 8040b90:	4a04      	ldr	r2, [pc, #16]	; (8040ba4 <HAL_IncTick+0x24>)
 8040b92:	6013      	str	r3, [r2, #0]
}
 8040b94:	bf00      	nop
 8040b96:	46bd      	mov	sp, r7
 8040b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b9c:	4770      	bx	lr
 8040b9e:	bf00      	nop
 8040ba0:	20000008 	.word	0x20000008
 8040ba4:	20000118 	.word	0x20000118

08040ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040ba8:	b480      	push	{r7}
 8040baa:	af00      	add	r7, sp, #0
  return uwTick;
 8040bac:	4b03      	ldr	r3, [pc, #12]	; (8040bbc <HAL_GetTick+0x14>)
 8040bae:	681b      	ldr	r3, [r3, #0]
}
 8040bb0:	4618      	mov	r0, r3
 8040bb2:	46bd      	mov	sp, r7
 8040bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bb8:	4770      	bx	lr
 8040bba:	bf00      	nop
 8040bbc:	20000118 	.word	0x20000118

08040bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040bc0:	b580      	push	{r7, lr}
 8040bc2:	b084      	sub	sp, #16
 8040bc4:	af00      	add	r7, sp, #0
 8040bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040bc8:	f7ff ffee 	bl	8040ba8 <HAL_GetTick>
 8040bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040bce:	687b      	ldr	r3, [r7, #4]
 8040bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040bd2:	68fb      	ldr	r3, [r7, #12]
 8040bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040bd8:	d005      	beq.n	8040be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8040bda:	4b0a      	ldr	r3, [pc, #40]	; (8040c04 <HAL_Delay+0x44>)
 8040bdc:	781b      	ldrb	r3, [r3, #0]
 8040bde:	461a      	mov	r2, r3
 8040be0:	68fb      	ldr	r3, [r7, #12]
 8040be2:	4413      	add	r3, r2
 8040be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8040be6:	bf00      	nop
 8040be8:	f7ff ffde 	bl	8040ba8 <HAL_GetTick>
 8040bec:	4602      	mov	r2, r0
 8040bee:	68bb      	ldr	r3, [r7, #8]
 8040bf0:	1ad3      	subs	r3, r2, r3
 8040bf2:	68fa      	ldr	r2, [r7, #12]
 8040bf4:	429a      	cmp	r2, r3
 8040bf6:	d8f7      	bhi.n	8040be8 <HAL_Delay+0x28>
  {
  }
}
 8040bf8:	bf00      	nop
 8040bfa:	bf00      	nop
 8040bfc:	3710      	adds	r7, #16
 8040bfe:	46bd      	mov	sp, r7
 8040c00:	bd80      	pop	{r7, pc}
 8040c02:	bf00      	nop
 8040c04:	20000008 	.word	0x20000008

08040c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040c08:	b480      	push	{r7}
 8040c0a:	b085      	sub	sp, #20
 8040c0c:	af00      	add	r7, sp, #0
 8040c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040c10:	687b      	ldr	r3, [r7, #4]
 8040c12:	f003 0307 	and.w	r3, r3, #7
 8040c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040c18:	4b0b      	ldr	r3, [pc, #44]	; (8040c48 <__NVIC_SetPriorityGrouping+0x40>)
 8040c1a:	68db      	ldr	r3, [r3, #12]
 8040c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040c1e:	68ba      	ldr	r2, [r7, #8]
 8040c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040c24:	4013      	ands	r3, r2
 8040c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040c28:	68fb      	ldr	r3, [r7, #12]
 8040c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040c2c:	68bb      	ldr	r3, [r7, #8]
 8040c2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8040c30:	4b06      	ldr	r3, [pc, #24]	; (8040c4c <__NVIC_SetPriorityGrouping+0x44>)
 8040c32:	4313      	orrs	r3, r2
 8040c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040c36:	4a04      	ldr	r2, [pc, #16]	; (8040c48 <__NVIC_SetPriorityGrouping+0x40>)
 8040c38:	68bb      	ldr	r3, [r7, #8]
 8040c3a:	60d3      	str	r3, [r2, #12]
}
 8040c3c:	bf00      	nop
 8040c3e:	3714      	adds	r7, #20
 8040c40:	46bd      	mov	sp, r7
 8040c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c46:	4770      	bx	lr
 8040c48:	e000ed00 	.word	0xe000ed00
 8040c4c:	05fa0000 	.word	0x05fa0000

08040c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040c50:	b480      	push	{r7}
 8040c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040c54:	4b04      	ldr	r3, [pc, #16]	; (8040c68 <__NVIC_GetPriorityGrouping+0x18>)
 8040c56:	68db      	ldr	r3, [r3, #12]
 8040c58:	0a1b      	lsrs	r3, r3, #8
 8040c5a:	f003 0307 	and.w	r3, r3, #7
}
 8040c5e:	4618      	mov	r0, r3
 8040c60:	46bd      	mov	sp, r7
 8040c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c66:	4770      	bx	lr
 8040c68:	e000ed00 	.word	0xe000ed00

08040c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040c6c:	b480      	push	{r7}
 8040c6e:	b083      	sub	sp, #12
 8040c70:	af00      	add	r7, sp, #0
 8040c72:	4603      	mov	r3, r0
 8040c74:	6039      	str	r1, [r7, #0]
 8040c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c7c:	2b00      	cmp	r3, #0
 8040c7e:	db0a      	blt.n	8040c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040c80:	683b      	ldr	r3, [r7, #0]
 8040c82:	b2da      	uxtb	r2, r3
 8040c84:	490c      	ldr	r1, [pc, #48]	; (8040cb8 <__NVIC_SetPriority+0x4c>)
 8040c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c8a:	0112      	lsls	r2, r2, #4
 8040c8c:	b2d2      	uxtb	r2, r2
 8040c8e:	440b      	add	r3, r1
 8040c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040c94:	e00a      	b.n	8040cac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040c96:	683b      	ldr	r3, [r7, #0]
 8040c98:	b2da      	uxtb	r2, r3
 8040c9a:	4908      	ldr	r1, [pc, #32]	; (8040cbc <__NVIC_SetPriority+0x50>)
 8040c9c:	79fb      	ldrb	r3, [r7, #7]
 8040c9e:	f003 030f 	and.w	r3, r3, #15
 8040ca2:	3b04      	subs	r3, #4
 8040ca4:	0112      	lsls	r2, r2, #4
 8040ca6:	b2d2      	uxtb	r2, r2
 8040ca8:	440b      	add	r3, r1
 8040caa:	761a      	strb	r2, [r3, #24]
}
 8040cac:	bf00      	nop
 8040cae:	370c      	adds	r7, #12
 8040cb0:	46bd      	mov	sp, r7
 8040cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cb6:	4770      	bx	lr
 8040cb8:	e000e100 	.word	0xe000e100
 8040cbc:	e000ed00 	.word	0xe000ed00

08040cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040cc0:	b480      	push	{r7}
 8040cc2:	b089      	sub	sp, #36	; 0x24
 8040cc4:	af00      	add	r7, sp, #0
 8040cc6:	60f8      	str	r0, [r7, #12]
 8040cc8:	60b9      	str	r1, [r7, #8]
 8040cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040ccc:	68fb      	ldr	r3, [r7, #12]
 8040cce:	f003 0307 	and.w	r3, r3, #7
 8040cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040cd4:	69fb      	ldr	r3, [r7, #28]
 8040cd6:	f1c3 0307 	rsb	r3, r3, #7
 8040cda:	2b04      	cmp	r3, #4
 8040cdc:	bf28      	it	cs
 8040cde:	2304      	movcs	r3, #4
 8040ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040ce2:	69fb      	ldr	r3, [r7, #28]
 8040ce4:	3304      	adds	r3, #4
 8040ce6:	2b06      	cmp	r3, #6
 8040ce8:	d902      	bls.n	8040cf0 <NVIC_EncodePriority+0x30>
 8040cea:	69fb      	ldr	r3, [r7, #28]
 8040cec:	3b03      	subs	r3, #3
 8040cee:	e000      	b.n	8040cf2 <NVIC_EncodePriority+0x32>
 8040cf0:	2300      	movs	r3, #0
 8040cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8040cf8:	69bb      	ldr	r3, [r7, #24]
 8040cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8040cfe:	43da      	mvns	r2, r3
 8040d00:	68bb      	ldr	r3, [r7, #8]
 8040d02:	401a      	ands	r2, r3
 8040d04:	697b      	ldr	r3, [r7, #20]
 8040d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040d08:	f04f 31ff 	mov.w	r1, #4294967295
 8040d0c:	697b      	ldr	r3, [r7, #20]
 8040d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8040d12:	43d9      	mvns	r1, r3
 8040d14:	687b      	ldr	r3, [r7, #4]
 8040d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040d18:	4313      	orrs	r3, r2
         );
}
 8040d1a:	4618      	mov	r0, r3
 8040d1c:	3724      	adds	r7, #36	; 0x24
 8040d1e:	46bd      	mov	sp, r7
 8040d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d24:	4770      	bx	lr
	...

08040d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040d28:	b580      	push	{r7, lr}
 8040d2a:	b082      	sub	sp, #8
 8040d2c:	af00      	add	r7, sp, #0
 8040d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040d30:	687b      	ldr	r3, [r7, #4]
 8040d32:	3b01      	subs	r3, #1
 8040d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040d38:	d301      	bcc.n	8040d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040d3a:	2301      	movs	r3, #1
 8040d3c:	e00f      	b.n	8040d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040d3e:	4a0a      	ldr	r2, [pc, #40]	; (8040d68 <SysTick_Config+0x40>)
 8040d40:	687b      	ldr	r3, [r7, #4]
 8040d42:	3b01      	subs	r3, #1
 8040d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040d46:	210f      	movs	r1, #15
 8040d48:	f04f 30ff 	mov.w	r0, #4294967295
 8040d4c:	f7ff ff8e 	bl	8040c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040d50:	4b05      	ldr	r3, [pc, #20]	; (8040d68 <SysTick_Config+0x40>)
 8040d52:	2200      	movs	r2, #0
 8040d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040d56:	4b04      	ldr	r3, [pc, #16]	; (8040d68 <SysTick_Config+0x40>)
 8040d58:	2207      	movs	r2, #7
 8040d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040d5c:	2300      	movs	r3, #0
}
 8040d5e:	4618      	mov	r0, r3
 8040d60:	3708      	adds	r7, #8
 8040d62:	46bd      	mov	sp, r7
 8040d64:	bd80      	pop	{r7, pc}
 8040d66:	bf00      	nop
 8040d68:	e000e010 	.word	0xe000e010

08040d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040d6c:	b580      	push	{r7, lr}
 8040d6e:	b082      	sub	sp, #8
 8040d70:	af00      	add	r7, sp, #0
 8040d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040d74:	6878      	ldr	r0, [r7, #4]
 8040d76:	f7ff ff47 	bl	8040c08 <__NVIC_SetPriorityGrouping>
}
 8040d7a:	bf00      	nop
 8040d7c:	3708      	adds	r7, #8
 8040d7e:	46bd      	mov	sp, r7
 8040d80:	bd80      	pop	{r7, pc}

08040d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8040d82:	b580      	push	{r7, lr}
 8040d84:	b086      	sub	sp, #24
 8040d86:	af00      	add	r7, sp, #0
 8040d88:	4603      	mov	r3, r0
 8040d8a:	60b9      	str	r1, [r7, #8]
 8040d8c:	607a      	str	r2, [r7, #4]
 8040d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8040d90:	2300      	movs	r3, #0
 8040d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8040d94:	f7ff ff5c 	bl	8040c50 <__NVIC_GetPriorityGrouping>
 8040d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040d9a:	687a      	ldr	r2, [r7, #4]
 8040d9c:	68b9      	ldr	r1, [r7, #8]
 8040d9e:	6978      	ldr	r0, [r7, #20]
 8040da0:	f7ff ff8e 	bl	8040cc0 <NVIC_EncodePriority>
 8040da4:	4602      	mov	r2, r0
 8040da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040daa:	4611      	mov	r1, r2
 8040dac:	4618      	mov	r0, r3
 8040dae:	f7ff ff5d 	bl	8040c6c <__NVIC_SetPriority>
}
 8040db2:	bf00      	nop
 8040db4:	3718      	adds	r7, #24
 8040db6:	46bd      	mov	sp, r7
 8040db8:	bd80      	pop	{r7, pc}

08040dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040dba:	b580      	push	{r7, lr}
 8040dbc:	b082      	sub	sp, #8
 8040dbe:	af00      	add	r7, sp, #0
 8040dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040dc2:	6878      	ldr	r0, [r7, #4]
 8040dc4:	f7ff ffb0 	bl	8040d28 <SysTick_Config>
 8040dc8:	4603      	mov	r3, r0
}
 8040dca:	4618      	mov	r0, r3
 8040dcc:	3708      	adds	r7, #8
 8040dce:	46bd      	mov	sp, r7
 8040dd0:	bd80      	pop	{r7, pc}
	...

08040dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040dd4:	b480      	push	{r7}
 8040dd6:	b089      	sub	sp, #36	; 0x24
 8040dd8:	af00      	add	r7, sp, #0
 8040dda:	6078      	str	r0, [r7, #4]
 8040ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8040dde:	2300      	movs	r3, #0
 8040de0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8040de2:	2300      	movs	r3, #0
 8040de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8040de6:	2300      	movs	r3, #0
 8040de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8040dea:	2300      	movs	r3, #0
 8040dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8040dee:	2300      	movs	r3, #0
 8040df0:	61fb      	str	r3, [r7, #28]
 8040df2:	e175      	b.n	80410e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8040df4:	2201      	movs	r2, #1
 8040df6:	69fb      	ldr	r3, [r7, #28]
 8040df8:	fa02 f303 	lsl.w	r3, r2, r3
 8040dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8040dfe:	683b      	ldr	r3, [r7, #0]
 8040e00:	681b      	ldr	r3, [r3, #0]
 8040e02:	697a      	ldr	r2, [r7, #20]
 8040e04:	4013      	ands	r3, r2
 8040e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8040e08:	693a      	ldr	r2, [r7, #16]
 8040e0a:	697b      	ldr	r3, [r7, #20]
 8040e0c:	429a      	cmp	r2, r3
 8040e0e:	f040 8164 	bne.w	80410da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8040e12:	683b      	ldr	r3, [r7, #0]
 8040e14:	685b      	ldr	r3, [r3, #4]
 8040e16:	f003 0303 	and.w	r3, r3, #3
 8040e1a:	2b01      	cmp	r3, #1
 8040e1c:	d005      	beq.n	8040e2a <HAL_GPIO_Init+0x56>
 8040e1e:	683b      	ldr	r3, [r7, #0]
 8040e20:	685b      	ldr	r3, [r3, #4]
 8040e22:	f003 0303 	and.w	r3, r3, #3
 8040e26:	2b02      	cmp	r3, #2
 8040e28:	d130      	bne.n	8040e8c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8040e2a:	687b      	ldr	r3, [r7, #4]
 8040e2c:	689b      	ldr	r3, [r3, #8]
 8040e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8040e30:	69fb      	ldr	r3, [r7, #28]
 8040e32:	005b      	lsls	r3, r3, #1
 8040e34:	2203      	movs	r2, #3
 8040e36:	fa02 f303 	lsl.w	r3, r2, r3
 8040e3a:	43db      	mvns	r3, r3
 8040e3c:	69ba      	ldr	r2, [r7, #24]
 8040e3e:	4013      	ands	r3, r2
 8040e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8040e42:	683b      	ldr	r3, [r7, #0]
 8040e44:	68da      	ldr	r2, [r3, #12]
 8040e46:	69fb      	ldr	r3, [r7, #28]
 8040e48:	005b      	lsls	r3, r3, #1
 8040e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8040e4e:	69ba      	ldr	r2, [r7, #24]
 8040e50:	4313      	orrs	r3, r2
 8040e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8040e54:	687b      	ldr	r3, [r7, #4]
 8040e56:	69ba      	ldr	r2, [r7, #24]
 8040e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040e5a:	687b      	ldr	r3, [r7, #4]
 8040e5c:	685b      	ldr	r3, [r3, #4]
 8040e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8040e60:	2201      	movs	r2, #1
 8040e62:	69fb      	ldr	r3, [r7, #28]
 8040e64:	fa02 f303 	lsl.w	r3, r2, r3
 8040e68:	43db      	mvns	r3, r3
 8040e6a:	69ba      	ldr	r2, [r7, #24]
 8040e6c:	4013      	ands	r3, r2
 8040e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8040e70:	683b      	ldr	r3, [r7, #0]
 8040e72:	685b      	ldr	r3, [r3, #4]
 8040e74:	091b      	lsrs	r3, r3, #4
 8040e76:	f003 0201 	and.w	r2, r3, #1
 8040e7a:	69fb      	ldr	r3, [r7, #28]
 8040e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8040e80:	69ba      	ldr	r2, [r7, #24]
 8040e82:	4313      	orrs	r3, r2
 8040e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8040e86:	687b      	ldr	r3, [r7, #4]
 8040e88:	69ba      	ldr	r2, [r7, #24]
 8040e8a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8040e8c:	683b      	ldr	r3, [r7, #0]
 8040e8e:	685b      	ldr	r3, [r3, #4]
 8040e90:	f003 0303 	and.w	r3, r3, #3
 8040e94:	2b03      	cmp	r3, #3
 8040e96:	d017      	beq.n	8040ec8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8040e98:	687b      	ldr	r3, [r7, #4]
 8040e9a:	68db      	ldr	r3, [r3, #12]
 8040e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8040e9e:	69fb      	ldr	r3, [r7, #28]
 8040ea0:	005b      	lsls	r3, r3, #1
 8040ea2:	2203      	movs	r2, #3
 8040ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8040ea8:	43db      	mvns	r3, r3
 8040eaa:	69ba      	ldr	r2, [r7, #24]
 8040eac:	4013      	ands	r3, r2
 8040eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8040eb0:	683b      	ldr	r3, [r7, #0]
 8040eb2:	689a      	ldr	r2, [r3, #8]
 8040eb4:	69fb      	ldr	r3, [r7, #28]
 8040eb6:	005b      	lsls	r3, r3, #1
 8040eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8040ebc:	69ba      	ldr	r2, [r7, #24]
 8040ebe:	4313      	orrs	r3, r2
 8040ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8040ec2:	687b      	ldr	r3, [r7, #4]
 8040ec4:	69ba      	ldr	r2, [r7, #24]
 8040ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040ec8:	683b      	ldr	r3, [r7, #0]
 8040eca:	685b      	ldr	r3, [r3, #4]
 8040ecc:	f003 0303 	and.w	r3, r3, #3
 8040ed0:	2b02      	cmp	r3, #2
 8040ed2:	d123      	bne.n	8040f1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8040ed4:	69fb      	ldr	r3, [r7, #28]
 8040ed6:	08da      	lsrs	r2, r3, #3
 8040ed8:	687b      	ldr	r3, [r7, #4]
 8040eda:	3208      	adds	r2, #8
 8040edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8040ee2:	69fb      	ldr	r3, [r7, #28]
 8040ee4:	f003 0307 	and.w	r3, r3, #7
 8040ee8:	009b      	lsls	r3, r3, #2
 8040eea:	220f      	movs	r2, #15
 8040eec:	fa02 f303 	lsl.w	r3, r2, r3
 8040ef0:	43db      	mvns	r3, r3
 8040ef2:	69ba      	ldr	r2, [r7, #24]
 8040ef4:	4013      	ands	r3, r2
 8040ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8040ef8:	683b      	ldr	r3, [r7, #0]
 8040efa:	691a      	ldr	r2, [r3, #16]
 8040efc:	69fb      	ldr	r3, [r7, #28]
 8040efe:	f003 0307 	and.w	r3, r3, #7
 8040f02:	009b      	lsls	r3, r3, #2
 8040f04:	fa02 f303 	lsl.w	r3, r2, r3
 8040f08:	69ba      	ldr	r2, [r7, #24]
 8040f0a:	4313      	orrs	r3, r2
 8040f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8040f0e:	69fb      	ldr	r3, [r7, #28]
 8040f10:	08da      	lsrs	r2, r3, #3
 8040f12:	687b      	ldr	r3, [r7, #4]
 8040f14:	3208      	adds	r2, #8
 8040f16:	69b9      	ldr	r1, [r7, #24]
 8040f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040f1c:	687b      	ldr	r3, [r7, #4]
 8040f1e:	681b      	ldr	r3, [r3, #0]
 8040f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8040f22:	69fb      	ldr	r3, [r7, #28]
 8040f24:	005b      	lsls	r3, r3, #1
 8040f26:	2203      	movs	r2, #3
 8040f28:	fa02 f303 	lsl.w	r3, r2, r3
 8040f2c:	43db      	mvns	r3, r3
 8040f2e:	69ba      	ldr	r2, [r7, #24]
 8040f30:	4013      	ands	r3, r2
 8040f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8040f34:	683b      	ldr	r3, [r7, #0]
 8040f36:	685b      	ldr	r3, [r3, #4]
 8040f38:	f003 0203 	and.w	r2, r3, #3
 8040f3c:	69fb      	ldr	r3, [r7, #28]
 8040f3e:	005b      	lsls	r3, r3, #1
 8040f40:	fa02 f303 	lsl.w	r3, r2, r3
 8040f44:	69ba      	ldr	r2, [r7, #24]
 8040f46:	4313      	orrs	r3, r2
 8040f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8040f4a:	687b      	ldr	r3, [r7, #4]
 8040f4c:	69ba      	ldr	r2, [r7, #24]
 8040f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8040f50:	683b      	ldr	r3, [r7, #0]
 8040f52:	685b      	ldr	r3, [r3, #4]
 8040f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8040f58:	2b00      	cmp	r3, #0
 8040f5a:	f000 80be 	beq.w	80410da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040f5e:	4b66      	ldr	r3, [pc, #408]	; (80410f8 <HAL_GPIO_Init+0x324>)
 8040f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040f62:	4a65      	ldr	r2, [pc, #404]	; (80410f8 <HAL_GPIO_Init+0x324>)
 8040f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040f68:	6453      	str	r3, [r2, #68]	; 0x44
 8040f6a:	4b63      	ldr	r3, [pc, #396]	; (80410f8 <HAL_GPIO_Init+0x324>)
 8040f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040f72:	60fb      	str	r3, [r7, #12]
 8040f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8040f76:	4a61      	ldr	r2, [pc, #388]	; (80410fc <HAL_GPIO_Init+0x328>)
 8040f78:	69fb      	ldr	r3, [r7, #28]
 8040f7a:	089b      	lsrs	r3, r3, #2
 8040f7c:	3302      	adds	r3, #2
 8040f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8040f84:	69fb      	ldr	r3, [r7, #28]
 8040f86:	f003 0303 	and.w	r3, r3, #3
 8040f8a:	009b      	lsls	r3, r3, #2
 8040f8c:	220f      	movs	r2, #15
 8040f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8040f92:	43db      	mvns	r3, r3
 8040f94:	69ba      	ldr	r2, [r7, #24]
 8040f96:	4013      	ands	r3, r2
 8040f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8040f9a:	687b      	ldr	r3, [r7, #4]
 8040f9c:	4a58      	ldr	r2, [pc, #352]	; (8041100 <HAL_GPIO_Init+0x32c>)
 8040f9e:	4293      	cmp	r3, r2
 8040fa0:	d037      	beq.n	8041012 <HAL_GPIO_Init+0x23e>
 8040fa2:	687b      	ldr	r3, [r7, #4]
 8040fa4:	4a57      	ldr	r2, [pc, #348]	; (8041104 <HAL_GPIO_Init+0x330>)
 8040fa6:	4293      	cmp	r3, r2
 8040fa8:	d031      	beq.n	804100e <HAL_GPIO_Init+0x23a>
 8040faa:	687b      	ldr	r3, [r7, #4]
 8040fac:	4a56      	ldr	r2, [pc, #344]	; (8041108 <HAL_GPIO_Init+0x334>)
 8040fae:	4293      	cmp	r3, r2
 8040fb0:	d02b      	beq.n	804100a <HAL_GPIO_Init+0x236>
 8040fb2:	687b      	ldr	r3, [r7, #4]
 8040fb4:	4a55      	ldr	r2, [pc, #340]	; (804110c <HAL_GPIO_Init+0x338>)
 8040fb6:	4293      	cmp	r3, r2
 8040fb8:	d025      	beq.n	8041006 <HAL_GPIO_Init+0x232>
 8040fba:	687b      	ldr	r3, [r7, #4]
 8040fbc:	4a54      	ldr	r2, [pc, #336]	; (8041110 <HAL_GPIO_Init+0x33c>)
 8040fbe:	4293      	cmp	r3, r2
 8040fc0:	d01f      	beq.n	8041002 <HAL_GPIO_Init+0x22e>
 8040fc2:	687b      	ldr	r3, [r7, #4]
 8040fc4:	4a53      	ldr	r2, [pc, #332]	; (8041114 <HAL_GPIO_Init+0x340>)
 8040fc6:	4293      	cmp	r3, r2
 8040fc8:	d019      	beq.n	8040ffe <HAL_GPIO_Init+0x22a>
 8040fca:	687b      	ldr	r3, [r7, #4]
 8040fcc:	4a52      	ldr	r2, [pc, #328]	; (8041118 <HAL_GPIO_Init+0x344>)
 8040fce:	4293      	cmp	r3, r2
 8040fd0:	d013      	beq.n	8040ffa <HAL_GPIO_Init+0x226>
 8040fd2:	687b      	ldr	r3, [r7, #4]
 8040fd4:	4a51      	ldr	r2, [pc, #324]	; (804111c <HAL_GPIO_Init+0x348>)
 8040fd6:	4293      	cmp	r3, r2
 8040fd8:	d00d      	beq.n	8040ff6 <HAL_GPIO_Init+0x222>
 8040fda:	687b      	ldr	r3, [r7, #4]
 8040fdc:	4a50      	ldr	r2, [pc, #320]	; (8041120 <HAL_GPIO_Init+0x34c>)
 8040fde:	4293      	cmp	r3, r2
 8040fe0:	d007      	beq.n	8040ff2 <HAL_GPIO_Init+0x21e>
 8040fe2:	687b      	ldr	r3, [r7, #4]
 8040fe4:	4a4f      	ldr	r2, [pc, #316]	; (8041124 <HAL_GPIO_Init+0x350>)
 8040fe6:	4293      	cmp	r3, r2
 8040fe8:	d101      	bne.n	8040fee <HAL_GPIO_Init+0x21a>
 8040fea:	2309      	movs	r3, #9
 8040fec:	e012      	b.n	8041014 <HAL_GPIO_Init+0x240>
 8040fee:	230a      	movs	r3, #10
 8040ff0:	e010      	b.n	8041014 <HAL_GPIO_Init+0x240>
 8040ff2:	2308      	movs	r3, #8
 8040ff4:	e00e      	b.n	8041014 <HAL_GPIO_Init+0x240>
 8040ff6:	2307      	movs	r3, #7
 8040ff8:	e00c      	b.n	8041014 <HAL_GPIO_Init+0x240>
 8040ffa:	2306      	movs	r3, #6
 8040ffc:	e00a      	b.n	8041014 <HAL_GPIO_Init+0x240>
 8040ffe:	2305      	movs	r3, #5
 8041000:	e008      	b.n	8041014 <HAL_GPIO_Init+0x240>
 8041002:	2304      	movs	r3, #4
 8041004:	e006      	b.n	8041014 <HAL_GPIO_Init+0x240>
 8041006:	2303      	movs	r3, #3
 8041008:	e004      	b.n	8041014 <HAL_GPIO_Init+0x240>
 804100a:	2302      	movs	r3, #2
 804100c:	e002      	b.n	8041014 <HAL_GPIO_Init+0x240>
 804100e:	2301      	movs	r3, #1
 8041010:	e000      	b.n	8041014 <HAL_GPIO_Init+0x240>
 8041012:	2300      	movs	r3, #0
 8041014:	69fa      	ldr	r2, [r7, #28]
 8041016:	f002 0203 	and.w	r2, r2, #3
 804101a:	0092      	lsls	r2, r2, #2
 804101c:	4093      	lsls	r3, r2
 804101e:	69ba      	ldr	r2, [r7, #24]
 8041020:	4313      	orrs	r3, r2
 8041022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8041024:	4935      	ldr	r1, [pc, #212]	; (80410fc <HAL_GPIO_Init+0x328>)
 8041026:	69fb      	ldr	r3, [r7, #28]
 8041028:	089b      	lsrs	r3, r3, #2
 804102a:	3302      	adds	r3, #2
 804102c:	69ba      	ldr	r2, [r7, #24]
 804102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8041032:	4b3d      	ldr	r3, [pc, #244]	; (8041128 <HAL_GPIO_Init+0x354>)
 8041034:	689b      	ldr	r3, [r3, #8]
 8041036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041038:	693b      	ldr	r3, [r7, #16]
 804103a:	43db      	mvns	r3, r3
 804103c:	69ba      	ldr	r2, [r7, #24]
 804103e:	4013      	ands	r3, r2
 8041040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8041042:	683b      	ldr	r3, [r7, #0]
 8041044:	685b      	ldr	r3, [r3, #4]
 8041046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804104a:	2b00      	cmp	r3, #0
 804104c:	d003      	beq.n	8041056 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 804104e:	69ba      	ldr	r2, [r7, #24]
 8041050:	693b      	ldr	r3, [r7, #16]
 8041052:	4313      	orrs	r3, r2
 8041054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8041056:	4a34      	ldr	r2, [pc, #208]	; (8041128 <HAL_GPIO_Init+0x354>)
 8041058:	69bb      	ldr	r3, [r7, #24]
 804105a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 804105c:	4b32      	ldr	r3, [pc, #200]	; (8041128 <HAL_GPIO_Init+0x354>)
 804105e:	68db      	ldr	r3, [r3, #12]
 8041060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041062:	693b      	ldr	r3, [r7, #16]
 8041064:	43db      	mvns	r3, r3
 8041066:	69ba      	ldr	r2, [r7, #24]
 8041068:	4013      	ands	r3, r2
 804106a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 804106c:	683b      	ldr	r3, [r7, #0]
 804106e:	685b      	ldr	r3, [r3, #4]
 8041070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041074:	2b00      	cmp	r3, #0
 8041076:	d003      	beq.n	8041080 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8041078:	69ba      	ldr	r2, [r7, #24]
 804107a:	693b      	ldr	r3, [r7, #16]
 804107c:	4313      	orrs	r3, r2
 804107e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8041080:	4a29      	ldr	r2, [pc, #164]	; (8041128 <HAL_GPIO_Init+0x354>)
 8041082:	69bb      	ldr	r3, [r7, #24]
 8041084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8041086:	4b28      	ldr	r3, [pc, #160]	; (8041128 <HAL_GPIO_Init+0x354>)
 8041088:	685b      	ldr	r3, [r3, #4]
 804108a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 804108c:	693b      	ldr	r3, [r7, #16]
 804108e:	43db      	mvns	r3, r3
 8041090:	69ba      	ldr	r2, [r7, #24]
 8041092:	4013      	ands	r3, r2
 8041094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8041096:	683b      	ldr	r3, [r7, #0]
 8041098:	685b      	ldr	r3, [r3, #4]
 804109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804109e:	2b00      	cmp	r3, #0
 80410a0:	d003      	beq.n	80410aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80410a2:	69ba      	ldr	r2, [r7, #24]
 80410a4:	693b      	ldr	r3, [r7, #16]
 80410a6:	4313      	orrs	r3, r2
 80410a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80410aa:	4a1f      	ldr	r2, [pc, #124]	; (8041128 <HAL_GPIO_Init+0x354>)
 80410ac:	69bb      	ldr	r3, [r7, #24]
 80410ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80410b0:	4b1d      	ldr	r3, [pc, #116]	; (8041128 <HAL_GPIO_Init+0x354>)
 80410b2:	681b      	ldr	r3, [r3, #0]
 80410b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80410b6:	693b      	ldr	r3, [r7, #16]
 80410b8:	43db      	mvns	r3, r3
 80410ba:	69ba      	ldr	r2, [r7, #24]
 80410bc:	4013      	ands	r3, r2
 80410be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80410c0:	683b      	ldr	r3, [r7, #0]
 80410c2:	685b      	ldr	r3, [r3, #4]
 80410c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80410c8:	2b00      	cmp	r3, #0
 80410ca:	d003      	beq.n	80410d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80410cc:	69ba      	ldr	r2, [r7, #24]
 80410ce:	693b      	ldr	r3, [r7, #16]
 80410d0:	4313      	orrs	r3, r2
 80410d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80410d4:	4a14      	ldr	r2, [pc, #80]	; (8041128 <HAL_GPIO_Init+0x354>)
 80410d6:	69bb      	ldr	r3, [r7, #24]
 80410d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80410da:	69fb      	ldr	r3, [r7, #28]
 80410dc:	3301      	adds	r3, #1
 80410de:	61fb      	str	r3, [r7, #28]
 80410e0:	69fb      	ldr	r3, [r7, #28]
 80410e2:	2b0f      	cmp	r3, #15
 80410e4:	f67f ae86 	bls.w	8040df4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80410e8:	bf00      	nop
 80410ea:	bf00      	nop
 80410ec:	3724      	adds	r7, #36	; 0x24
 80410ee:	46bd      	mov	sp, r7
 80410f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410f4:	4770      	bx	lr
 80410f6:	bf00      	nop
 80410f8:	40023800 	.word	0x40023800
 80410fc:	40013800 	.word	0x40013800
 8041100:	40020000 	.word	0x40020000
 8041104:	40020400 	.word	0x40020400
 8041108:	40020800 	.word	0x40020800
 804110c:	40020c00 	.word	0x40020c00
 8041110:	40021000 	.word	0x40021000
 8041114:	40021400 	.word	0x40021400
 8041118:	40021800 	.word	0x40021800
 804111c:	40021c00 	.word	0x40021c00
 8041120:	40022000 	.word	0x40022000
 8041124:	40022400 	.word	0x40022400
 8041128:	40013c00 	.word	0x40013c00

0804112c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 804112c:	b480      	push	{r7}
 804112e:	b083      	sub	sp, #12
 8041130:	af00      	add	r7, sp, #0
 8041132:	6078      	str	r0, [r7, #4]
 8041134:	460b      	mov	r3, r1
 8041136:	807b      	strh	r3, [r7, #2]
 8041138:	4613      	mov	r3, r2
 804113a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 804113c:	787b      	ldrb	r3, [r7, #1]
 804113e:	2b00      	cmp	r3, #0
 8041140:	d003      	beq.n	804114a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8041142:	887a      	ldrh	r2, [r7, #2]
 8041144:	687b      	ldr	r3, [r7, #4]
 8041146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8041148:	e003      	b.n	8041152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 804114a:	887b      	ldrh	r3, [r7, #2]
 804114c:	041a      	lsls	r2, r3, #16
 804114e:	687b      	ldr	r3, [r7, #4]
 8041150:	619a      	str	r2, [r3, #24]
}
 8041152:	bf00      	nop
 8041154:	370c      	adds	r7, #12
 8041156:	46bd      	mov	sp, r7
 8041158:	f85d 7b04 	ldr.w	r7, [sp], #4
 804115c:	4770      	bx	lr

0804115e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 804115e:	b480      	push	{r7}
 8041160:	b085      	sub	sp, #20
 8041162:	af00      	add	r7, sp, #0
 8041164:	6078      	str	r0, [r7, #4]
 8041166:	460b      	mov	r3, r1
 8041168:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 804116a:	687b      	ldr	r3, [r7, #4]
 804116c:	695b      	ldr	r3, [r3, #20]
 804116e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8041170:	887a      	ldrh	r2, [r7, #2]
 8041172:	68fb      	ldr	r3, [r7, #12]
 8041174:	4013      	ands	r3, r2
 8041176:	041a      	lsls	r2, r3, #16
 8041178:	68fb      	ldr	r3, [r7, #12]
 804117a:	43d9      	mvns	r1, r3
 804117c:	887b      	ldrh	r3, [r7, #2]
 804117e:	400b      	ands	r3, r1
 8041180:	431a      	orrs	r2, r3
 8041182:	687b      	ldr	r3, [r7, #4]
 8041184:	619a      	str	r2, [r3, #24]
}
 8041186:	bf00      	nop
 8041188:	3714      	adds	r7, #20
 804118a:	46bd      	mov	sp, r7
 804118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041190:	4770      	bx	lr
	...

08041194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8041194:	b580      	push	{r7, lr}
 8041196:	b086      	sub	sp, #24
 8041198:	af00      	add	r7, sp, #0
 804119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 804119c:	2300      	movs	r3, #0
 804119e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80411a0:	687b      	ldr	r3, [r7, #4]
 80411a2:	2b00      	cmp	r3, #0
 80411a4:	d101      	bne.n	80411aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80411a6:	2301      	movs	r3, #1
 80411a8:	e29b      	b.n	80416e2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80411aa:	687b      	ldr	r3, [r7, #4]
 80411ac:	681b      	ldr	r3, [r3, #0]
 80411ae:	f003 0301 	and.w	r3, r3, #1
 80411b2:	2b00      	cmp	r3, #0
 80411b4:	f000 8087 	beq.w	80412c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80411b8:	4b96      	ldr	r3, [pc, #600]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 80411ba:	689b      	ldr	r3, [r3, #8]
 80411bc:	f003 030c 	and.w	r3, r3, #12
 80411c0:	2b04      	cmp	r3, #4
 80411c2:	d00c      	beq.n	80411de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80411c4:	4b93      	ldr	r3, [pc, #588]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 80411c6:	689b      	ldr	r3, [r3, #8]
 80411c8:	f003 030c 	and.w	r3, r3, #12
 80411cc:	2b08      	cmp	r3, #8
 80411ce:	d112      	bne.n	80411f6 <HAL_RCC_OscConfig+0x62>
 80411d0:	4b90      	ldr	r3, [pc, #576]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 80411d2:	685b      	ldr	r3, [r3, #4]
 80411d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80411d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80411dc:	d10b      	bne.n	80411f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80411de:	4b8d      	ldr	r3, [pc, #564]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 80411e0:	681b      	ldr	r3, [r3, #0]
 80411e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80411e6:	2b00      	cmp	r3, #0
 80411e8:	d06c      	beq.n	80412c4 <HAL_RCC_OscConfig+0x130>
 80411ea:	687b      	ldr	r3, [r7, #4]
 80411ec:	685b      	ldr	r3, [r3, #4]
 80411ee:	2b00      	cmp	r3, #0
 80411f0:	d168      	bne.n	80412c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80411f2:	2301      	movs	r3, #1
 80411f4:	e275      	b.n	80416e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80411f6:	687b      	ldr	r3, [r7, #4]
 80411f8:	685b      	ldr	r3, [r3, #4]
 80411fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80411fe:	d106      	bne.n	804120e <HAL_RCC_OscConfig+0x7a>
 8041200:	4b84      	ldr	r3, [pc, #528]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 8041202:	681b      	ldr	r3, [r3, #0]
 8041204:	4a83      	ldr	r2, [pc, #524]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 8041206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804120a:	6013      	str	r3, [r2, #0]
 804120c:	e02e      	b.n	804126c <HAL_RCC_OscConfig+0xd8>
 804120e:	687b      	ldr	r3, [r7, #4]
 8041210:	685b      	ldr	r3, [r3, #4]
 8041212:	2b00      	cmp	r3, #0
 8041214:	d10c      	bne.n	8041230 <HAL_RCC_OscConfig+0x9c>
 8041216:	4b7f      	ldr	r3, [pc, #508]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 8041218:	681b      	ldr	r3, [r3, #0]
 804121a:	4a7e      	ldr	r2, [pc, #504]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 804121c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041220:	6013      	str	r3, [r2, #0]
 8041222:	4b7c      	ldr	r3, [pc, #496]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 8041224:	681b      	ldr	r3, [r3, #0]
 8041226:	4a7b      	ldr	r2, [pc, #492]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 8041228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804122c:	6013      	str	r3, [r2, #0]
 804122e:	e01d      	b.n	804126c <HAL_RCC_OscConfig+0xd8>
 8041230:	687b      	ldr	r3, [r7, #4]
 8041232:	685b      	ldr	r3, [r3, #4]
 8041234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8041238:	d10c      	bne.n	8041254 <HAL_RCC_OscConfig+0xc0>
 804123a:	4b76      	ldr	r3, [pc, #472]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 804123c:	681b      	ldr	r3, [r3, #0]
 804123e:	4a75      	ldr	r2, [pc, #468]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 8041240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041244:	6013      	str	r3, [r2, #0]
 8041246:	4b73      	ldr	r3, [pc, #460]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 8041248:	681b      	ldr	r3, [r3, #0]
 804124a:	4a72      	ldr	r2, [pc, #456]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 804124c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041250:	6013      	str	r3, [r2, #0]
 8041252:	e00b      	b.n	804126c <HAL_RCC_OscConfig+0xd8>
 8041254:	4b6f      	ldr	r3, [pc, #444]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 8041256:	681b      	ldr	r3, [r3, #0]
 8041258:	4a6e      	ldr	r2, [pc, #440]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 804125a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804125e:	6013      	str	r3, [r2, #0]
 8041260:	4b6c      	ldr	r3, [pc, #432]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 8041262:	681b      	ldr	r3, [r3, #0]
 8041264:	4a6b      	ldr	r2, [pc, #428]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 8041266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804126a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 804126c:	687b      	ldr	r3, [r7, #4]
 804126e:	685b      	ldr	r3, [r3, #4]
 8041270:	2b00      	cmp	r3, #0
 8041272:	d013      	beq.n	804129c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041274:	f7ff fc98 	bl	8040ba8 <HAL_GetTick>
 8041278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804127a:	e008      	b.n	804128e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 804127c:	f7ff fc94 	bl	8040ba8 <HAL_GetTick>
 8041280:	4602      	mov	r2, r0
 8041282:	693b      	ldr	r3, [r7, #16]
 8041284:	1ad3      	subs	r3, r2, r3
 8041286:	2b64      	cmp	r3, #100	; 0x64
 8041288:	d901      	bls.n	804128e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 804128a:	2303      	movs	r3, #3
 804128c:	e229      	b.n	80416e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804128e:	4b61      	ldr	r3, [pc, #388]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 8041290:	681b      	ldr	r3, [r3, #0]
 8041292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041296:	2b00      	cmp	r3, #0
 8041298:	d0f0      	beq.n	804127c <HAL_RCC_OscConfig+0xe8>
 804129a:	e014      	b.n	80412c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804129c:	f7ff fc84 	bl	8040ba8 <HAL_GetTick>
 80412a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80412a2:	e008      	b.n	80412b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80412a4:	f7ff fc80 	bl	8040ba8 <HAL_GetTick>
 80412a8:	4602      	mov	r2, r0
 80412aa:	693b      	ldr	r3, [r7, #16]
 80412ac:	1ad3      	subs	r3, r2, r3
 80412ae:	2b64      	cmp	r3, #100	; 0x64
 80412b0:	d901      	bls.n	80412b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80412b2:	2303      	movs	r3, #3
 80412b4:	e215      	b.n	80416e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80412b6:	4b57      	ldr	r3, [pc, #348]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 80412b8:	681b      	ldr	r3, [r3, #0]
 80412ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80412be:	2b00      	cmp	r3, #0
 80412c0:	d1f0      	bne.n	80412a4 <HAL_RCC_OscConfig+0x110>
 80412c2:	e000      	b.n	80412c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80412c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80412c6:	687b      	ldr	r3, [r7, #4]
 80412c8:	681b      	ldr	r3, [r3, #0]
 80412ca:	f003 0302 	and.w	r3, r3, #2
 80412ce:	2b00      	cmp	r3, #0
 80412d0:	d069      	beq.n	80413a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80412d2:	4b50      	ldr	r3, [pc, #320]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 80412d4:	689b      	ldr	r3, [r3, #8]
 80412d6:	f003 030c 	and.w	r3, r3, #12
 80412da:	2b00      	cmp	r3, #0
 80412dc:	d00b      	beq.n	80412f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80412de:	4b4d      	ldr	r3, [pc, #308]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 80412e0:	689b      	ldr	r3, [r3, #8]
 80412e2:	f003 030c 	and.w	r3, r3, #12
 80412e6:	2b08      	cmp	r3, #8
 80412e8:	d11c      	bne.n	8041324 <HAL_RCC_OscConfig+0x190>
 80412ea:	4b4a      	ldr	r3, [pc, #296]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 80412ec:	685b      	ldr	r3, [r3, #4]
 80412ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80412f2:	2b00      	cmp	r3, #0
 80412f4:	d116      	bne.n	8041324 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80412f6:	4b47      	ldr	r3, [pc, #284]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 80412f8:	681b      	ldr	r3, [r3, #0]
 80412fa:	f003 0302 	and.w	r3, r3, #2
 80412fe:	2b00      	cmp	r3, #0
 8041300:	d005      	beq.n	804130e <HAL_RCC_OscConfig+0x17a>
 8041302:	687b      	ldr	r3, [r7, #4]
 8041304:	68db      	ldr	r3, [r3, #12]
 8041306:	2b01      	cmp	r3, #1
 8041308:	d001      	beq.n	804130e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 804130a:	2301      	movs	r3, #1
 804130c:	e1e9      	b.n	80416e2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804130e:	4b41      	ldr	r3, [pc, #260]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 8041310:	681b      	ldr	r3, [r3, #0]
 8041312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8041316:	687b      	ldr	r3, [r7, #4]
 8041318:	691b      	ldr	r3, [r3, #16]
 804131a:	00db      	lsls	r3, r3, #3
 804131c:	493d      	ldr	r1, [pc, #244]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 804131e:	4313      	orrs	r3, r2
 8041320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041322:	e040      	b.n	80413a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8041324:	687b      	ldr	r3, [r7, #4]
 8041326:	68db      	ldr	r3, [r3, #12]
 8041328:	2b00      	cmp	r3, #0
 804132a:	d023      	beq.n	8041374 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 804132c:	4b39      	ldr	r3, [pc, #228]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 804132e:	681b      	ldr	r3, [r3, #0]
 8041330:	4a38      	ldr	r2, [pc, #224]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 8041332:	f043 0301 	orr.w	r3, r3, #1
 8041336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041338:	f7ff fc36 	bl	8040ba8 <HAL_GetTick>
 804133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804133e:	e008      	b.n	8041352 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041340:	f7ff fc32 	bl	8040ba8 <HAL_GetTick>
 8041344:	4602      	mov	r2, r0
 8041346:	693b      	ldr	r3, [r7, #16]
 8041348:	1ad3      	subs	r3, r2, r3
 804134a:	2b02      	cmp	r3, #2
 804134c:	d901      	bls.n	8041352 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 804134e:	2303      	movs	r3, #3
 8041350:	e1c7      	b.n	80416e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8041352:	4b30      	ldr	r3, [pc, #192]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 8041354:	681b      	ldr	r3, [r3, #0]
 8041356:	f003 0302 	and.w	r3, r3, #2
 804135a:	2b00      	cmp	r3, #0
 804135c:	d0f0      	beq.n	8041340 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804135e:	4b2d      	ldr	r3, [pc, #180]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 8041360:	681b      	ldr	r3, [r3, #0]
 8041362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8041366:	687b      	ldr	r3, [r7, #4]
 8041368:	691b      	ldr	r3, [r3, #16]
 804136a:	00db      	lsls	r3, r3, #3
 804136c:	4929      	ldr	r1, [pc, #164]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 804136e:	4313      	orrs	r3, r2
 8041370:	600b      	str	r3, [r1, #0]
 8041372:	e018      	b.n	80413a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8041374:	4b27      	ldr	r3, [pc, #156]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 8041376:	681b      	ldr	r3, [r3, #0]
 8041378:	4a26      	ldr	r2, [pc, #152]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 804137a:	f023 0301 	bic.w	r3, r3, #1
 804137e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041380:	f7ff fc12 	bl	8040ba8 <HAL_GetTick>
 8041384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8041386:	e008      	b.n	804139a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041388:	f7ff fc0e 	bl	8040ba8 <HAL_GetTick>
 804138c:	4602      	mov	r2, r0
 804138e:	693b      	ldr	r3, [r7, #16]
 8041390:	1ad3      	subs	r3, r2, r3
 8041392:	2b02      	cmp	r3, #2
 8041394:	d901      	bls.n	804139a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8041396:	2303      	movs	r3, #3
 8041398:	e1a3      	b.n	80416e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804139a:	4b1e      	ldr	r3, [pc, #120]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 804139c:	681b      	ldr	r3, [r3, #0]
 804139e:	f003 0302 	and.w	r3, r3, #2
 80413a2:	2b00      	cmp	r3, #0
 80413a4:	d1f0      	bne.n	8041388 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80413a6:	687b      	ldr	r3, [r7, #4]
 80413a8:	681b      	ldr	r3, [r3, #0]
 80413aa:	f003 0308 	and.w	r3, r3, #8
 80413ae:	2b00      	cmp	r3, #0
 80413b0:	d038      	beq.n	8041424 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80413b2:	687b      	ldr	r3, [r7, #4]
 80413b4:	695b      	ldr	r3, [r3, #20]
 80413b6:	2b00      	cmp	r3, #0
 80413b8:	d019      	beq.n	80413ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80413ba:	4b16      	ldr	r3, [pc, #88]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 80413bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80413be:	4a15      	ldr	r2, [pc, #84]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 80413c0:	f043 0301 	orr.w	r3, r3, #1
 80413c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80413c6:	f7ff fbef 	bl	8040ba8 <HAL_GetTick>
 80413ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80413cc:	e008      	b.n	80413e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80413ce:	f7ff fbeb 	bl	8040ba8 <HAL_GetTick>
 80413d2:	4602      	mov	r2, r0
 80413d4:	693b      	ldr	r3, [r7, #16]
 80413d6:	1ad3      	subs	r3, r2, r3
 80413d8:	2b02      	cmp	r3, #2
 80413da:	d901      	bls.n	80413e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80413dc:	2303      	movs	r3, #3
 80413de:	e180      	b.n	80416e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80413e0:	4b0c      	ldr	r3, [pc, #48]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 80413e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80413e4:	f003 0302 	and.w	r3, r3, #2
 80413e8:	2b00      	cmp	r3, #0
 80413ea:	d0f0      	beq.n	80413ce <HAL_RCC_OscConfig+0x23a>
 80413ec:	e01a      	b.n	8041424 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80413ee:	4b09      	ldr	r3, [pc, #36]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 80413f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80413f2:	4a08      	ldr	r2, [pc, #32]	; (8041414 <HAL_RCC_OscConfig+0x280>)
 80413f4:	f023 0301 	bic.w	r3, r3, #1
 80413f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80413fa:	f7ff fbd5 	bl	8040ba8 <HAL_GetTick>
 80413fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041400:	e00a      	b.n	8041418 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041402:	f7ff fbd1 	bl	8040ba8 <HAL_GetTick>
 8041406:	4602      	mov	r2, r0
 8041408:	693b      	ldr	r3, [r7, #16]
 804140a:	1ad3      	subs	r3, r2, r3
 804140c:	2b02      	cmp	r3, #2
 804140e:	d903      	bls.n	8041418 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8041410:	2303      	movs	r3, #3
 8041412:	e166      	b.n	80416e2 <HAL_RCC_OscConfig+0x54e>
 8041414:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041418:	4b92      	ldr	r3, [pc, #584]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 804141a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804141c:	f003 0302 	and.w	r3, r3, #2
 8041420:	2b00      	cmp	r3, #0
 8041422:	d1ee      	bne.n	8041402 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041424:	687b      	ldr	r3, [r7, #4]
 8041426:	681b      	ldr	r3, [r3, #0]
 8041428:	f003 0304 	and.w	r3, r3, #4
 804142c:	2b00      	cmp	r3, #0
 804142e:	f000 80a4 	beq.w	804157a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8041432:	4b8c      	ldr	r3, [pc, #560]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 8041434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804143a:	2b00      	cmp	r3, #0
 804143c:	d10d      	bne.n	804145a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 804143e:	4b89      	ldr	r3, [pc, #548]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 8041440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041442:	4a88      	ldr	r2, [pc, #544]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 8041444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041448:	6413      	str	r3, [r2, #64]	; 0x40
 804144a:	4b86      	ldr	r3, [pc, #536]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 804144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041452:	60bb      	str	r3, [r7, #8]
 8041454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8041456:	2301      	movs	r3, #1
 8041458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 804145a:	4b83      	ldr	r3, [pc, #524]	; (8041668 <HAL_RCC_OscConfig+0x4d4>)
 804145c:	681b      	ldr	r3, [r3, #0]
 804145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041462:	2b00      	cmp	r3, #0
 8041464:	d118      	bne.n	8041498 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8041466:	4b80      	ldr	r3, [pc, #512]	; (8041668 <HAL_RCC_OscConfig+0x4d4>)
 8041468:	681b      	ldr	r3, [r3, #0]
 804146a:	4a7f      	ldr	r2, [pc, #508]	; (8041668 <HAL_RCC_OscConfig+0x4d4>)
 804146c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8041472:	f7ff fb99 	bl	8040ba8 <HAL_GetTick>
 8041476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041478:	e008      	b.n	804148c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 804147a:	f7ff fb95 	bl	8040ba8 <HAL_GetTick>
 804147e:	4602      	mov	r2, r0
 8041480:	693b      	ldr	r3, [r7, #16]
 8041482:	1ad3      	subs	r3, r2, r3
 8041484:	2b64      	cmp	r3, #100	; 0x64
 8041486:	d901      	bls.n	804148c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8041488:	2303      	movs	r3, #3
 804148a:	e12a      	b.n	80416e2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 804148c:	4b76      	ldr	r3, [pc, #472]	; (8041668 <HAL_RCC_OscConfig+0x4d4>)
 804148e:	681b      	ldr	r3, [r3, #0]
 8041490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041494:	2b00      	cmp	r3, #0
 8041496:	d0f0      	beq.n	804147a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8041498:	687b      	ldr	r3, [r7, #4]
 804149a:	689b      	ldr	r3, [r3, #8]
 804149c:	2b01      	cmp	r3, #1
 804149e:	d106      	bne.n	80414ae <HAL_RCC_OscConfig+0x31a>
 80414a0:	4b70      	ldr	r3, [pc, #448]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 80414a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414a4:	4a6f      	ldr	r2, [pc, #444]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 80414a6:	f043 0301 	orr.w	r3, r3, #1
 80414aa:	6713      	str	r3, [r2, #112]	; 0x70
 80414ac:	e02d      	b.n	804150a <HAL_RCC_OscConfig+0x376>
 80414ae:	687b      	ldr	r3, [r7, #4]
 80414b0:	689b      	ldr	r3, [r3, #8]
 80414b2:	2b00      	cmp	r3, #0
 80414b4:	d10c      	bne.n	80414d0 <HAL_RCC_OscConfig+0x33c>
 80414b6:	4b6b      	ldr	r3, [pc, #428]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 80414b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414ba:	4a6a      	ldr	r2, [pc, #424]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 80414bc:	f023 0301 	bic.w	r3, r3, #1
 80414c0:	6713      	str	r3, [r2, #112]	; 0x70
 80414c2:	4b68      	ldr	r3, [pc, #416]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 80414c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414c6:	4a67      	ldr	r2, [pc, #412]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 80414c8:	f023 0304 	bic.w	r3, r3, #4
 80414cc:	6713      	str	r3, [r2, #112]	; 0x70
 80414ce:	e01c      	b.n	804150a <HAL_RCC_OscConfig+0x376>
 80414d0:	687b      	ldr	r3, [r7, #4]
 80414d2:	689b      	ldr	r3, [r3, #8]
 80414d4:	2b05      	cmp	r3, #5
 80414d6:	d10c      	bne.n	80414f2 <HAL_RCC_OscConfig+0x35e>
 80414d8:	4b62      	ldr	r3, [pc, #392]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 80414da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414dc:	4a61      	ldr	r2, [pc, #388]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 80414de:	f043 0304 	orr.w	r3, r3, #4
 80414e2:	6713      	str	r3, [r2, #112]	; 0x70
 80414e4:	4b5f      	ldr	r3, [pc, #380]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 80414e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414e8:	4a5e      	ldr	r2, [pc, #376]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 80414ea:	f043 0301 	orr.w	r3, r3, #1
 80414ee:	6713      	str	r3, [r2, #112]	; 0x70
 80414f0:	e00b      	b.n	804150a <HAL_RCC_OscConfig+0x376>
 80414f2:	4b5c      	ldr	r3, [pc, #368]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 80414f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414f6:	4a5b      	ldr	r2, [pc, #364]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 80414f8:	f023 0301 	bic.w	r3, r3, #1
 80414fc:	6713      	str	r3, [r2, #112]	; 0x70
 80414fe:	4b59      	ldr	r3, [pc, #356]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 8041500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041502:	4a58      	ldr	r2, [pc, #352]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 8041504:	f023 0304 	bic.w	r3, r3, #4
 8041508:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 804150a:	687b      	ldr	r3, [r7, #4]
 804150c:	689b      	ldr	r3, [r3, #8]
 804150e:	2b00      	cmp	r3, #0
 8041510:	d015      	beq.n	804153e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041512:	f7ff fb49 	bl	8040ba8 <HAL_GetTick>
 8041516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041518:	e00a      	b.n	8041530 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804151a:	f7ff fb45 	bl	8040ba8 <HAL_GetTick>
 804151e:	4602      	mov	r2, r0
 8041520:	693b      	ldr	r3, [r7, #16]
 8041522:	1ad3      	subs	r3, r2, r3
 8041524:	f241 3288 	movw	r2, #5000	; 0x1388
 8041528:	4293      	cmp	r3, r2
 804152a:	d901      	bls.n	8041530 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 804152c:	2303      	movs	r3, #3
 804152e:	e0d8      	b.n	80416e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041530:	4b4c      	ldr	r3, [pc, #304]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 8041532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041534:	f003 0302 	and.w	r3, r3, #2
 8041538:	2b00      	cmp	r3, #0
 804153a:	d0ee      	beq.n	804151a <HAL_RCC_OscConfig+0x386>
 804153c:	e014      	b.n	8041568 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804153e:	f7ff fb33 	bl	8040ba8 <HAL_GetTick>
 8041542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8041544:	e00a      	b.n	804155c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041546:	f7ff fb2f 	bl	8040ba8 <HAL_GetTick>
 804154a:	4602      	mov	r2, r0
 804154c:	693b      	ldr	r3, [r7, #16]
 804154e:	1ad3      	subs	r3, r2, r3
 8041550:	f241 3288 	movw	r2, #5000	; 0x1388
 8041554:	4293      	cmp	r3, r2
 8041556:	d901      	bls.n	804155c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8041558:	2303      	movs	r3, #3
 804155a:	e0c2      	b.n	80416e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 804155c:	4b41      	ldr	r3, [pc, #260]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 804155e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041560:	f003 0302 	and.w	r3, r3, #2
 8041564:	2b00      	cmp	r3, #0
 8041566:	d1ee      	bne.n	8041546 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8041568:	7dfb      	ldrb	r3, [r7, #23]
 804156a:	2b01      	cmp	r3, #1
 804156c:	d105      	bne.n	804157a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 804156e:	4b3d      	ldr	r3, [pc, #244]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 8041570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041572:	4a3c      	ldr	r2, [pc, #240]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 8041574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041578:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 804157a:	687b      	ldr	r3, [r7, #4]
 804157c:	699b      	ldr	r3, [r3, #24]
 804157e:	2b00      	cmp	r3, #0
 8041580:	f000 80ae 	beq.w	80416e0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8041584:	4b37      	ldr	r3, [pc, #220]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 8041586:	689b      	ldr	r3, [r3, #8]
 8041588:	f003 030c 	and.w	r3, r3, #12
 804158c:	2b08      	cmp	r3, #8
 804158e:	d06d      	beq.n	804166c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8041590:	687b      	ldr	r3, [r7, #4]
 8041592:	699b      	ldr	r3, [r3, #24]
 8041594:	2b02      	cmp	r3, #2
 8041596:	d14b      	bne.n	8041630 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041598:	4b32      	ldr	r3, [pc, #200]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 804159a:	681b      	ldr	r3, [r3, #0]
 804159c:	4a31      	ldr	r2, [pc, #196]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 804159e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80415a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80415a4:	f7ff fb00 	bl	8040ba8 <HAL_GetTick>
 80415a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80415aa:	e008      	b.n	80415be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80415ac:	f7ff fafc 	bl	8040ba8 <HAL_GetTick>
 80415b0:	4602      	mov	r2, r0
 80415b2:	693b      	ldr	r3, [r7, #16]
 80415b4:	1ad3      	subs	r3, r2, r3
 80415b6:	2b02      	cmp	r3, #2
 80415b8:	d901      	bls.n	80415be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80415ba:	2303      	movs	r3, #3
 80415bc:	e091      	b.n	80416e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80415be:	4b29      	ldr	r3, [pc, #164]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 80415c0:	681b      	ldr	r3, [r3, #0]
 80415c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80415c6:	2b00      	cmp	r3, #0
 80415c8:	d1f0      	bne.n	80415ac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80415ca:	687b      	ldr	r3, [r7, #4]
 80415cc:	69da      	ldr	r2, [r3, #28]
 80415ce:	687b      	ldr	r3, [r7, #4]
 80415d0:	6a1b      	ldr	r3, [r3, #32]
 80415d2:	431a      	orrs	r2, r3
 80415d4:	687b      	ldr	r3, [r7, #4]
 80415d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80415d8:	019b      	lsls	r3, r3, #6
 80415da:	431a      	orrs	r2, r3
 80415dc:	687b      	ldr	r3, [r7, #4]
 80415de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80415e0:	085b      	lsrs	r3, r3, #1
 80415e2:	3b01      	subs	r3, #1
 80415e4:	041b      	lsls	r3, r3, #16
 80415e6:	431a      	orrs	r2, r3
 80415e8:	687b      	ldr	r3, [r7, #4]
 80415ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80415ec:	061b      	lsls	r3, r3, #24
 80415ee:	431a      	orrs	r2, r3
 80415f0:	687b      	ldr	r3, [r7, #4]
 80415f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80415f4:	071b      	lsls	r3, r3, #28
 80415f6:	491b      	ldr	r1, [pc, #108]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 80415f8:	4313      	orrs	r3, r2
 80415fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80415fc:	4b19      	ldr	r3, [pc, #100]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 80415fe:	681b      	ldr	r3, [r3, #0]
 8041600:	4a18      	ldr	r2, [pc, #96]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 8041602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8041606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041608:	f7ff face 	bl	8040ba8 <HAL_GetTick>
 804160c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804160e:	e008      	b.n	8041622 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041610:	f7ff faca 	bl	8040ba8 <HAL_GetTick>
 8041614:	4602      	mov	r2, r0
 8041616:	693b      	ldr	r3, [r7, #16]
 8041618:	1ad3      	subs	r3, r2, r3
 804161a:	2b02      	cmp	r3, #2
 804161c:	d901      	bls.n	8041622 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 804161e:	2303      	movs	r3, #3
 8041620:	e05f      	b.n	80416e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041622:	4b10      	ldr	r3, [pc, #64]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 8041624:	681b      	ldr	r3, [r3, #0]
 8041626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804162a:	2b00      	cmp	r3, #0
 804162c:	d0f0      	beq.n	8041610 <HAL_RCC_OscConfig+0x47c>
 804162e:	e057      	b.n	80416e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041630:	4b0c      	ldr	r3, [pc, #48]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 8041632:	681b      	ldr	r3, [r3, #0]
 8041634:	4a0b      	ldr	r2, [pc, #44]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 8041636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 804163a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804163c:	f7ff fab4 	bl	8040ba8 <HAL_GetTick>
 8041640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041642:	e008      	b.n	8041656 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041644:	f7ff fab0 	bl	8040ba8 <HAL_GetTick>
 8041648:	4602      	mov	r2, r0
 804164a:	693b      	ldr	r3, [r7, #16]
 804164c:	1ad3      	subs	r3, r2, r3
 804164e:	2b02      	cmp	r3, #2
 8041650:	d901      	bls.n	8041656 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8041652:	2303      	movs	r3, #3
 8041654:	e045      	b.n	80416e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041656:	4b03      	ldr	r3, [pc, #12]	; (8041664 <HAL_RCC_OscConfig+0x4d0>)
 8041658:	681b      	ldr	r3, [r3, #0]
 804165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804165e:	2b00      	cmp	r3, #0
 8041660:	d1f0      	bne.n	8041644 <HAL_RCC_OscConfig+0x4b0>
 8041662:	e03d      	b.n	80416e0 <HAL_RCC_OscConfig+0x54c>
 8041664:	40023800 	.word	0x40023800
 8041668:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 804166c:	4b1f      	ldr	r3, [pc, #124]	; (80416ec <HAL_RCC_OscConfig+0x558>)
 804166e:	685b      	ldr	r3, [r3, #4]
 8041670:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041672:	687b      	ldr	r3, [r7, #4]
 8041674:	699b      	ldr	r3, [r3, #24]
 8041676:	2b01      	cmp	r3, #1
 8041678:	d030      	beq.n	80416dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804167a:	68fb      	ldr	r3, [r7, #12]
 804167c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8041680:	687b      	ldr	r3, [r7, #4]
 8041682:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041684:	429a      	cmp	r2, r3
 8041686:	d129      	bne.n	80416dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8041688:	68fb      	ldr	r3, [r7, #12]
 804168a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 804168e:	687b      	ldr	r3, [r7, #4]
 8041690:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041692:	429a      	cmp	r2, r3
 8041694:	d122      	bne.n	80416dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8041696:	68fa      	ldr	r2, [r7, #12]
 8041698:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 804169c:	4013      	ands	r3, r2
 804169e:	687a      	ldr	r2, [r7, #4]
 80416a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80416a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80416a4:	4293      	cmp	r3, r2
 80416a6:	d119      	bne.n	80416dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80416a8:	68fb      	ldr	r3, [r7, #12]
 80416aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80416ae:	687b      	ldr	r3, [r7, #4]
 80416b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80416b2:	085b      	lsrs	r3, r3, #1
 80416b4:	3b01      	subs	r3, #1
 80416b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80416b8:	429a      	cmp	r2, r3
 80416ba:	d10f      	bne.n	80416dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80416bc:	68fb      	ldr	r3, [r7, #12]
 80416be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80416c2:	687b      	ldr	r3, [r7, #4]
 80416c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80416c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80416c8:	429a      	cmp	r2, r3
 80416ca:	d107      	bne.n	80416dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80416cc:	68fb      	ldr	r3, [r7, #12]
 80416ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80416d2:	687b      	ldr	r3, [r7, #4]
 80416d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416d6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80416d8:	429a      	cmp	r2, r3
 80416da:	d001      	beq.n	80416e0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80416dc:	2301      	movs	r3, #1
 80416de:	e000      	b.n	80416e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80416e0:	2300      	movs	r3, #0
}
 80416e2:	4618      	mov	r0, r3
 80416e4:	3718      	adds	r7, #24
 80416e6:	46bd      	mov	sp, r7
 80416e8:	bd80      	pop	{r7, pc}
 80416ea:	bf00      	nop
 80416ec:	40023800 	.word	0x40023800

080416f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80416f0:	b580      	push	{r7, lr}
 80416f2:	b084      	sub	sp, #16
 80416f4:	af00      	add	r7, sp, #0
 80416f6:	6078      	str	r0, [r7, #4]
 80416f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80416fa:	2300      	movs	r3, #0
 80416fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80416fe:	687b      	ldr	r3, [r7, #4]
 8041700:	2b00      	cmp	r3, #0
 8041702:	d101      	bne.n	8041708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8041704:	2301      	movs	r3, #1
 8041706:	e0d0      	b.n	80418aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8041708:	4b6a      	ldr	r3, [pc, #424]	; (80418b4 <HAL_RCC_ClockConfig+0x1c4>)
 804170a:	681b      	ldr	r3, [r3, #0]
 804170c:	f003 030f 	and.w	r3, r3, #15
 8041710:	683a      	ldr	r2, [r7, #0]
 8041712:	429a      	cmp	r2, r3
 8041714:	d910      	bls.n	8041738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041716:	4b67      	ldr	r3, [pc, #412]	; (80418b4 <HAL_RCC_ClockConfig+0x1c4>)
 8041718:	681b      	ldr	r3, [r3, #0]
 804171a:	f023 020f 	bic.w	r2, r3, #15
 804171e:	4965      	ldr	r1, [pc, #404]	; (80418b4 <HAL_RCC_ClockConfig+0x1c4>)
 8041720:	683b      	ldr	r3, [r7, #0]
 8041722:	4313      	orrs	r3, r2
 8041724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041726:	4b63      	ldr	r3, [pc, #396]	; (80418b4 <HAL_RCC_ClockConfig+0x1c4>)
 8041728:	681b      	ldr	r3, [r3, #0]
 804172a:	f003 030f 	and.w	r3, r3, #15
 804172e:	683a      	ldr	r2, [r7, #0]
 8041730:	429a      	cmp	r2, r3
 8041732:	d001      	beq.n	8041738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8041734:	2301      	movs	r3, #1
 8041736:	e0b8      	b.n	80418aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041738:	687b      	ldr	r3, [r7, #4]
 804173a:	681b      	ldr	r3, [r3, #0]
 804173c:	f003 0302 	and.w	r3, r3, #2
 8041740:	2b00      	cmp	r3, #0
 8041742:	d020      	beq.n	8041786 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041744:	687b      	ldr	r3, [r7, #4]
 8041746:	681b      	ldr	r3, [r3, #0]
 8041748:	f003 0304 	and.w	r3, r3, #4
 804174c:	2b00      	cmp	r3, #0
 804174e:	d005      	beq.n	804175c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8041750:	4b59      	ldr	r3, [pc, #356]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 8041752:	689b      	ldr	r3, [r3, #8]
 8041754:	4a58      	ldr	r2, [pc, #352]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 8041756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 804175a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 804175c:	687b      	ldr	r3, [r7, #4]
 804175e:	681b      	ldr	r3, [r3, #0]
 8041760:	f003 0308 	and.w	r3, r3, #8
 8041764:	2b00      	cmp	r3, #0
 8041766:	d005      	beq.n	8041774 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8041768:	4b53      	ldr	r3, [pc, #332]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 804176a:	689b      	ldr	r3, [r3, #8]
 804176c:	4a52      	ldr	r2, [pc, #328]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 804176e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8041772:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041774:	4b50      	ldr	r3, [pc, #320]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 8041776:	689b      	ldr	r3, [r3, #8]
 8041778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 804177c:	687b      	ldr	r3, [r7, #4]
 804177e:	689b      	ldr	r3, [r3, #8]
 8041780:	494d      	ldr	r1, [pc, #308]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 8041782:	4313      	orrs	r3, r2
 8041784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8041786:	687b      	ldr	r3, [r7, #4]
 8041788:	681b      	ldr	r3, [r3, #0]
 804178a:	f003 0301 	and.w	r3, r3, #1
 804178e:	2b00      	cmp	r3, #0
 8041790:	d040      	beq.n	8041814 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8041792:	687b      	ldr	r3, [r7, #4]
 8041794:	685b      	ldr	r3, [r3, #4]
 8041796:	2b01      	cmp	r3, #1
 8041798:	d107      	bne.n	80417aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804179a:	4b47      	ldr	r3, [pc, #284]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 804179c:	681b      	ldr	r3, [r3, #0]
 804179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80417a2:	2b00      	cmp	r3, #0
 80417a4:	d115      	bne.n	80417d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80417a6:	2301      	movs	r3, #1
 80417a8:	e07f      	b.n	80418aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80417aa:	687b      	ldr	r3, [r7, #4]
 80417ac:	685b      	ldr	r3, [r3, #4]
 80417ae:	2b02      	cmp	r3, #2
 80417b0:	d107      	bne.n	80417c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80417b2:	4b41      	ldr	r3, [pc, #260]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 80417b4:	681b      	ldr	r3, [r3, #0]
 80417b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80417ba:	2b00      	cmp	r3, #0
 80417bc:	d109      	bne.n	80417d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80417be:	2301      	movs	r3, #1
 80417c0:	e073      	b.n	80418aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80417c2:	4b3d      	ldr	r3, [pc, #244]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 80417c4:	681b      	ldr	r3, [r3, #0]
 80417c6:	f003 0302 	and.w	r3, r3, #2
 80417ca:	2b00      	cmp	r3, #0
 80417cc:	d101      	bne.n	80417d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80417ce:	2301      	movs	r3, #1
 80417d0:	e06b      	b.n	80418aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80417d2:	4b39      	ldr	r3, [pc, #228]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 80417d4:	689b      	ldr	r3, [r3, #8]
 80417d6:	f023 0203 	bic.w	r2, r3, #3
 80417da:	687b      	ldr	r3, [r7, #4]
 80417dc:	685b      	ldr	r3, [r3, #4]
 80417de:	4936      	ldr	r1, [pc, #216]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 80417e0:	4313      	orrs	r3, r2
 80417e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80417e4:	f7ff f9e0 	bl	8040ba8 <HAL_GetTick>
 80417e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80417ea:	e00a      	b.n	8041802 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80417ec:	f7ff f9dc 	bl	8040ba8 <HAL_GetTick>
 80417f0:	4602      	mov	r2, r0
 80417f2:	68fb      	ldr	r3, [r7, #12]
 80417f4:	1ad3      	subs	r3, r2, r3
 80417f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80417fa:	4293      	cmp	r3, r2
 80417fc:	d901      	bls.n	8041802 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80417fe:	2303      	movs	r3, #3
 8041800:	e053      	b.n	80418aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041802:	4b2d      	ldr	r3, [pc, #180]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 8041804:	689b      	ldr	r3, [r3, #8]
 8041806:	f003 020c 	and.w	r2, r3, #12
 804180a:	687b      	ldr	r3, [r7, #4]
 804180c:	685b      	ldr	r3, [r3, #4]
 804180e:	009b      	lsls	r3, r3, #2
 8041810:	429a      	cmp	r2, r3
 8041812:	d1eb      	bne.n	80417ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8041814:	4b27      	ldr	r3, [pc, #156]	; (80418b4 <HAL_RCC_ClockConfig+0x1c4>)
 8041816:	681b      	ldr	r3, [r3, #0]
 8041818:	f003 030f 	and.w	r3, r3, #15
 804181c:	683a      	ldr	r2, [r7, #0]
 804181e:	429a      	cmp	r2, r3
 8041820:	d210      	bcs.n	8041844 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041822:	4b24      	ldr	r3, [pc, #144]	; (80418b4 <HAL_RCC_ClockConfig+0x1c4>)
 8041824:	681b      	ldr	r3, [r3, #0]
 8041826:	f023 020f 	bic.w	r2, r3, #15
 804182a:	4922      	ldr	r1, [pc, #136]	; (80418b4 <HAL_RCC_ClockConfig+0x1c4>)
 804182c:	683b      	ldr	r3, [r7, #0]
 804182e:	4313      	orrs	r3, r2
 8041830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041832:	4b20      	ldr	r3, [pc, #128]	; (80418b4 <HAL_RCC_ClockConfig+0x1c4>)
 8041834:	681b      	ldr	r3, [r3, #0]
 8041836:	f003 030f 	and.w	r3, r3, #15
 804183a:	683a      	ldr	r2, [r7, #0]
 804183c:	429a      	cmp	r2, r3
 804183e:	d001      	beq.n	8041844 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8041840:	2301      	movs	r3, #1
 8041842:	e032      	b.n	80418aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041844:	687b      	ldr	r3, [r7, #4]
 8041846:	681b      	ldr	r3, [r3, #0]
 8041848:	f003 0304 	and.w	r3, r3, #4
 804184c:	2b00      	cmp	r3, #0
 804184e:	d008      	beq.n	8041862 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8041850:	4b19      	ldr	r3, [pc, #100]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 8041852:	689b      	ldr	r3, [r3, #8]
 8041854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8041858:	687b      	ldr	r3, [r7, #4]
 804185a:	68db      	ldr	r3, [r3, #12]
 804185c:	4916      	ldr	r1, [pc, #88]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 804185e:	4313      	orrs	r3, r2
 8041860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041862:	687b      	ldr	r3, [r7, #4]
 8041864:	681b      	ldr	r3, [r3, #0]
 8041866:	f003 0308 	and.w	r3, r3, #8
 804186a:	2b00      	cmp	r3, #0
 804186c:	d009      	beq.n	8041882 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 804186e:	4b12      	ldr	r3, [pc, #72]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 8041870:	689b      	ldr	r3, [r3, #8]
 8041872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8041876:	687b      	ldr	r3, [r7, #4]
 8041878:	691b      	ldr	r3, [r3, #16]
 804187a:	00db      	lsls	r3, r3, #3
 804187c:	490e      	ldr	r1, [pc, #56]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 804187e:	4313      	orrs	r3, r2
 8041880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8041882:	f000 f821 	bl	80418c8 <HAL_RCC_GetSysClockFreq>
 8041886:	4602      	mov	r2, r0
 8041888:	4b0b      	ldr	r3, [pc, #44]	; (80418b8 <HAL_RCC_ClockConfig+0x1c8>)
 804188a:	689b      	ldr	r3, [r3, #8]
 804188c:	091b      	lsrs	r3, r3, #4
 804188e:	f003 030f 	and.w	r3, r3, #15
 8041892:	490a      	ldr	r1, [pc, #40]	; (80418bc <HAL_RCC_ClockConfig+0x1cc>)
 8041894:	5ccb      	ldrb	r3, [r1, r3]
 8041896:	fa22 f303 	lsr.w	r3, r2, r3
 804189a:	4a09      	ldr	r2, [pc, #36]	; (80418c0 <HAL_RCC_ClockConfig+0x1d0>)
 804189c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 804189e:	4b09      	ldr	r3, [pc, #36]	; (80418c4 <HAL_RCC_ClockConfig+0x1d4>)
 80418a0:	681b      	ldr	r3, [r3, #0]
 80418a2:	4618      	mov	r0, r3
 80418a4:	f7ff f93c 	bl	8040b20 <HAL_InitTick>

  return HAL_OK;
 80418a8:	2300      	movs	r3, #0
}
 80418aa:	4618      	mov	r0, r3
 80418ac:	3710      	adds	r7, #16
 80418ae:	46bd      	mov	sp, r7
 80418b0:	bd80      	pop	{r7, pc}
 80418b2:	bf00      	nop
 80418b4:	40023c00 	.word	0x40023c00
 80418b8:	40023800 	.word	0x40023800
 80418bc:	08043ca0 	.word	0x08043ca0
 80418c0:	20000000 	.word	0x20000000
 80418c4:	20000004 	.word	0x20000004

080418c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80418c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80418cc:	b090      	sub	sp, #64	; 0x40
 80418ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80418d0:	2300      	movs	r3, #0
 80418d2:	637b      	str	r3, [r7, #52]	; 0x34
 80418d4:	2300      	movs	r3, #0
 80418d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80418d8:	2300      	movs	r3, #0
 80418da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80418dc:	2300      	movs	r3, #0
 80418de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80418e0:	4b59      	ldr	r3, [pc, #356]	; (8041a48 <HAL_RCC_GetSysClockFreq+0x180>)
 80418e2:	689b      	ldr	r3, [r3, #8]
 80418e4:	f003 030c 	and.w	r3, r3, #12
 80418e8:	2b08      	cmp	r3, #8
 80418ea:	d00d      	beq.n	8041908 <HAL_RCC_GetSysClockFreq+0x40>
 80418ec:	2b08      	cmp	r3, #8
 80418ee:	f200 80a1 	bhi.w	8041a34 <HAL_RCC_GetSysClockFreq+0x16c>
 80418f2:	2b00      	cmp	r3, #0
 80418f4:	d002      	beq.n	80418fc <HAL_RCC_GetSysClockFreq+0x34>
 80418f6:	2b04      	cmp	r3, #4
 80418f8:	d003      	beq.n	8041902 <HAL_RCC_GetSysClockFreq+0x3a>
 80418fa:	e09b      	b.n	8041a34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80418fc:	4b53      	ldr	r3, [pc, #332]	; (8041a4c <HAL_RCC_GetSysClockFreq+0x184>)
 80418fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8041900:	e09b      	b.n	8041a3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8041902:	4b53      	ldr	r3, [pc, #332]	; (8041a50 <HAL_RCC_GetSysClockFreq+0x188>)
 8041904:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8041906:	e098      	b.n	8041a3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8041908:	4b4f      	ldr	r3, [pc, #316]	; (8041a48 <HAL_RCC_GetSysClockFreq+0x180>)
 804190a:	685b      	ldr	r3, [r3, #4]
 804190c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8041910:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8041912:	4b4d      	ldr	r3, [pc, #308]	; (8041a48 <HAL_RCC_GetSysClockFreq+0x180>)
 8041914:	685b      	ldr	r3, [r3, #4]
 8041916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804191a:	2b00      	cmp	r3, #0
 804191c:	d028      	beq.n	8041970 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804191e:	4b4a      	ldr	r3, [pc, #296]	; (8041a48 <HAL_RCC_GetSysClockFreq+0x180>)
 8041920:	685b      	ldr	r3, [r3, #4]
 8041922:	099b      	lsrs	r3, r3, #6
 8041924:	2200      	movs	r2, #0
 8041926:	623b      	str	r3, [r7, #32]
 8041928:	627a      	str	r2, [r7, #36]	; 0x24
 804192a:	6a3b      	ldr	r3, [r7, #32]
 804192c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8041930:	2100      	movs	r1, #0
 8041932:	4b47      	ldr	r3, [pc, #284]	; (8041a50 <HAL_RCC_GetSysClockFreq+0x188>)
 8041934:	fb03 f201 	mul.w	r2, r3, r1
 8041938:	2300      	movs	r3, #0
 804193a:	fb00 f303 	mul.w	r3, r0, r3
 804193e:	4413      	add	r3, r2
 8041940:	4a43      	ldr	r2, [pc, #268]	; (8041a50 <HAL_RCC_GetSysClockFreq+0x188>)
 8041942:	fba0 1202 	umull	r1, r2, r0, r2
 8041946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8041948:	460a      	mov	r2, r1
 804194a:	62ba      	str	r2, [r7, #40]	; 0x28
 804194c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804194e:	4413      	add	r3, r2
 8041950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8041952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041954:	2200      	movs	r2, #0
 8041956:	61bb      	str	r3, [r7, #24]
 8041958:	61fa      	str	r2, [r7, #28]
 804195a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 804195e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8041962:	f7fe fcbd 	bl	80402e0 <__aeabi_uldivmod>
 8041966:	4602      	mov	r2, r0
 8041968:	460b      	mov	r3, r1
 804196a:	4613      	mov	r3, r2
 804196c:	63fb      	str	r3, [r7, #60]	; 0x3c
 804196e:	e053      	b.n	8041a18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8041970:	4b35      	ldr	r3, [pc, #212]	; (8041a48 <HAL_RCC_GetSysClockFreq+0x180>)
 8041972:	685b      	ldr	r3, [r3, #4]
 8041974:	099b      	lsrs	r3, r3, #6
 8041976:	2200      	movs	r2, #0
 8041978:	613b      	str	r3, [r7, #16]
 804197a:	617a      	str	r2, [r7, #20]
 804197c:	693b      	ldr	r3, [r7, #16]
 804197e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8041982:	f04f 0b00 	mov.w	fp, #0
 8041986:	4652      	mov	r2, sl
 8041988:	465b      	mov	r3, fp
 804198a:	f04f 0000 	mov.w	r0, #0
 804198e:	f04f 0100 	mov.w	r1, #0
 8041992:	0159      	lsls	r1, r3, #5
 8041994:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8041998:	0150      	lsls	r0, r2, #5
 804199a:	4602      	mov	r2, r0
 804199c:	460b      	mov	r3, r1
 804199e:	ebb2 080a 	subs.w	r8, r2, sl
 80419a2:	eb63 090b 	sbc.w	r9, r3, fp
 80419a6:	f04f 0200 	mov.w	r2, #0
 80419aa:	f04f 0300 	mov.w	r3, #0
 80419ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80419b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80419b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80419ba:	ebb2 0408 	subs.w	r4, r2, r8
 80419be:	eb63 0509 	sbc.w	r5, r3, r9
 80419c2:	f04f 0200 	mov.w	r2, #0
 80419c6:	f04f 0300 	mov.w	r3, #0
 80419ca:	00eb      	lsls	r3, r5, #3
 80419cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80419d0:	00e2      	lsls	r2, r4, #3
 80419d2:	4614      	mov	r4, r2
 80419d4:	461d      	mov	r5, r3
 80419d6:	eb14 030a 	adds.w	r3, r4, sl
 80419da:	603b      	str	r3, [r7, #0]
 80419dc:	eb45 030b 	adc.w	r3, r5, fp
 80419e0:	607b      	str	r3, [r7, #4]
 80419e2:	f04f 0200 	mov.w	r2, #0
 80419e6:	f04f 0300 	mov.w	r3, #0
 80419ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80419ee:	4629      	mov	r1, r5
 80419f0:	028b      	lsls	r3, r1, #10
 80419f2:	4621      	mov	r1, r4
 80419f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80419f8:	4621      	mov	r1, r4
 80419fa:	028a      	lsls	r2, r1, #10
 80419fc:	4610      	mov	r0, r2
 80419fe:	4619      	mov	r1, r3
 8041a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041a02:	2200      	movs	r2, #0
 8041a04:	60bb      	str	r3, [r7, #8]
 8041a06:	60fa      	str	r2, [r7, #12]
 8041a08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8041a0c:	f7fe fc68 	bl	80402e0 <__aeabi_uldivmod>
 8041a10:	4602      	mov	r2, r0
 8041a12:	460b      	mov	r3, r1
 8041a14:	4613      	mov	r3, r2
 8041a16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8041a18:	4b0b      	ldr	r3, [pc, #44]	; (8041a48 <HAL_RCC_GetSysClockFreq+0x180>)
 8041a1a:	685b      	ldr	r3, [r3, #4]
 8041a1c:	0c1b      	lsrs	r3, r3, #16
 8041a1e:	f003 0303 	and.w	r3, r3, #3
 8041a22:	3301      	adds	r3, #1
 8041a24:	005b      	lsls	r3, r3, #1
 8041a26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8041a28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8041a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8041a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8041a30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8041a32:	e002      	b.n	8041a3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8041a34:	4b05      	ldr	r3, [pc, #20]	; (8041a4c <HAL_RCC_GetSysClockFreq+0x184>)
 8041a36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8041a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8041a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8041a3c:	4618      	mov	r0, r3
 8041a3e:	3740      	adds	r7, #64	; 0x40
 8041a40:	46bd      	mov	sp, r7
 8041a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8041a46:	bf00      	nop
 8041a48:	40023800 	.word	0x40023800
 8041a4c:	00f42400 	.word	0x00f42400
 8041a50:	017d7840 	.word	0x017d7840

08041a54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8041a54:	b480      	push	{r7}
 8041a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8041a58:	4b03      	ldr	r3, [pc, #12]	; (8041a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8041a5a:	681b      	ldr	r3, [r3, #0]
}
 8041a5c:	4618      	mov	r0, r3
 8041a5e:	46bd      	mov	sp, r7
 8041a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a64:	4770      	bx	lr
 8041a66:	bf00      	nop
 8041a68:	20000000 	.word	0x20000000

08041a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8041a6c:	b580      	push	{r7, lr}
 8041a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8041a70:	f7ff fff0 	bl	8041a54 <HAL_RCC_GetHCLKFreq>
 8041a74:	4602      	mov	r2, r0
 8041a76:	4b05      	ldr	r3, [pc, #20]	; (8041a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8041a78:	689b      	ldr	r3, [r3, #8]
 8041a7a:	0a9b      	lsrs	r3, r3, #10
 8041a7c:	f003 0307 	and.w	r3, r3, #7
 8041a80:	4903      	ldr	r1, [pc, #12]	; (8041a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8041a82:	5ccb      	ldrb	r3, [r1, r3]
 8041a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041a88:	4618      	mov	r0, r3
 8041a8a:	bd80      	pop	{r7, pc}
 8041a8c:	40023800 	.word	0x40023800
 8041a90:	08043cb0 	.word	0x08043cb0

08041a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8041a94:	b580      	push	{r7, lr}
 8041a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8041a98:	f7ff ffdc 	bl	8041a54 <HAL_RCC_GetHCLKFreq>
 8041a9c:	4602      	mov	r2, r0
 8041a9e:	4b05      	ldr	r3, [pc, #20]	; (8041ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8041aa0:	689b      	ldr	r3, [r3, #8]
 8041aa2:	0b5b      	lsrs	r3, r3, #13
 8041aa4:	f003 0307 	and.w	r3, r3, #7
 8041aa8:	4903      	ldr	r1, [pc, #12]	; (8041ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8041aaa:	5ccb      	ldrb	r3, [r1, r3]
 8041aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041ab0:	4618      	mov	r0, r3
 8041ab2:	bd80      	pop	{r7, pc}
 8041ab4:	40023800 	.word	0x40023800
 8041ab8:	08043cb0 	.word	0x08043cb0

08041abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8041abc:	b580      	push	{r7, lr}
 8041abe:	b088      	sub	sp, #32
 8041ac0:	af00      	add	r7, sp, #0
 8041ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8041ac4:	2300      	movs	r3, #0
 8041ac6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8041ac8:	2300      	movs	r3, #0
 8041aca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8041acc:	2300      	movs	r3, #0
 8041ace:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8041ad0:	2300      	movs	r3, #0
 8041ad2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8041ad4:	2300      	movs	r3, #0
 8041ad6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8041ad8:	687b      	ldr	r3, [r7, #4]
 8041ada:	681b      	ldr	r3, [r3, #0]
 8041adc:	f003 0301 	and.w	r3, r3, #1
 8041ae0:	2b00      	cmp	r3, #0
 8041ae2:	d012      	beq.n	8041b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8041ae4:	4b69      	ldr	r3, [pc, #420]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041ae6:	689b      	ldr	r3, [r3, #8]
 8041ae8:	4a68      	ldr	r2, [pc, #416]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041aea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8041aee:	6093      	str	r3, [r2, #8]
 8041af0:	4b66      	ldr	r3, [pc, #408]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041af2:	689a      	ldr	r2, [r3, #8]
 8041af4:	687b      	ldr	r3, [r7, #4]
 8041af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041af8:	4964      	ldr	r1, [pc, #400]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041afa:	4313      	orrs	r3, r2
 8041afc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8041afe:	687b      	ldr	r3, [r7, #4]
 8041b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041b02:	2b00      	cmp	r3, #0
 8041b04:	d101      	bne.n	8041b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8041b06:	2301      	movs	r3, #1
 8041b08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8041b0a:	687b      	ldr	r3, [r7, #4]
 8041b0c:	681b      	ldr	r3, [r3, #0]
 8041b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8041b12:	2b00      	cmp	r3, #0
 8041b14:	d017      	beq.n	8041b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8041b16:	4b5d      	ldr	r3, [pc, #372]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041b1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8041b20:	687b      	ldr	r3, [r7, #4]
 8041b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041b24:	4959      	ldr	r1, [pc, #356]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b26:	4313      	orrs	r3, r2
 8041b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8041b2c:	687b      	ldr	r3, [r7, #4]
 8041b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8041b34:	d101      	bne.n	8041b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8041b36:	2301      	movs	r3, #1
 8041b38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8041b3a:	687b      	ldr	r3, [r7, #4]
 8041b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041b3e:	2b00      	cmp	r3, #0
 8041b40:	d101      	bne.n	8041b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8041b42:	2301      	movs	r3, #1
 8041b44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8041b46:	687b      	ldr	r3, [r7, #4]
 8041b48:	681b      	ldr	r3, [r3, #0]
 8041b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041b4e:	2b00      	cmp	r3, #0
 8041b50:	d017      	beq.n	8041b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8041b52:	4b4e      	ldr	r3, [pc, #312]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041b58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8041b5c:	687b      	ldr	r3, [r7, #4]
 8041b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b60:	494a      	ldr	r1, [pc, #296]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b62:	4313      	orrs	r3, r2
 8041b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8041b68:	687b      	ldr	r3, [r7, #4]
 8041b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8041b70:	d101      	bne.n	8041b76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8041b72:	2301      	movs	r3, #1
 8041b74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8041b76:	687b      	ldr	r3, [r7, #4]
 8041b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b7a:	2b00      	cmp	r3, #0
 8041b7c:	d101      	bne.n	8041b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8041b7e:	2301      	movs	r3, #1
 8041b80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8041b82:	687b      	ldr	r3, [r7, #4]
 8041b84:	681b      	ldr	r3, [r3, #0]
 8041b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8041b8a:	2b00      	cmp	r3, #0
 8041b8c:	d001      	beq.n	8041b92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8041b8e:	2301      	movs	r3, #1
 8041b90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8041b92:	687b      	ldr	r3, [r7, #4]
 8041b94:	681b      	ldr	r3, [r3, #0]
 8041b96:	f003 0320 	and.w	r3, r3, #32
 8041b9a:	2b00      	cmp	r3, #0
 8041b9c:	f000 808b 	beq.w	8041cb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8041ba0:	4b3a      	ldr	r3, [pc, #232]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041ba4:	4a39      	ldr	r2, [pc, #228]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041baa:	6413      	str	r3, [r2, #64]	; 0x40
 8041bac:	4b37      	ldr	r3, [pc, #220]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041bb4:	60bb      	str	r3, [r7, #8]
 8041bb6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8041bb8:	4b35      	ldr	r3, [pc, #212]	; (8041c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8041bba:	681b      	ldr	r3, [r3, #0]
 8041bbc:	4a34      	ldr	r2, [pc, #208]	; (8041c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8041bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041bc4:	f7fe fff0 	bl	8040ba8 <HAL_GetTick>
 8041bc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8041bca:	e008      	b.n	8041bde <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041bcc:	f7fe ffec 	bl	8040ba8 <HAL_GetTick>
 8041bd0:	4602      	mov	r2, r0
 8041bd2:	697b      	ldr	r3, [r7, #20]
 8041bd4:	1ad3      	subs	r3, r2, r3
 8041bd6:	2b64      	cmp	r3, #100	; 0x64
 8041bd8:	d901      	bls.n	8041bde <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8041bda:	2303      	movs	r3, #3
 8041bdc:	e38f      	b.n	80422fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8041bde:	4b2c      	ldr	r3, [pc, #176]	; (8041c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8041be0:	681b      	ldr	r3, [r3, #0]
 8041be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041be6:	2b00      	cmp	r3, #0
 8041be8:	d0f0      	beq.n	8041bcc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8041bea:	4b28      	ldr	r3, [pc, #160]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041bf2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8041bf4:	693b      	ldr	r3, [r7, #16]
 8041bf6:	2b00      	cmp	r3, #0
 8041bf8:	d035      	beq.n	8041c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8041bfa:	687b      	ldr	r3, [r7, #4]
 8041bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041c02:	693a      	ldr	r2, [r7, #16]
 8041c04:	429a      	cmp	r2, r3
 8041c06:	d02e      	beq.n	8041c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8041c08:	4b20      	ldr	r3, [pc, #128]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8041c10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8041c12:	4b1e      	ldr	r3, [pc, #120]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c16:	4a1d      	ldr	r2, [pc, #116]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041c1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8041c1e:	4b1b      	ldr	r3, [pc, #108]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c22:	4a1a      	ldr	r2, [pc, #104]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041c28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8041c2a:	4a18      	ldr	r2, [pc, #96]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c2c:	693b      	ldr	r3, [r7, #16]
 8041c2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8041c30:	4b16      	ldr	r3, [pc, #88]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c34:	f003 0301 	and.w	r3, r3, #1
 8041c38:	2b01      	cmp	r3, #1
 8041c3a:	d114      	bne.n	8041c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041c3c:	f7fe ffb4 	bl	8040ba8 <HAL_GetTick>
 8041c40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041c42:	e00a      	b.n	8041c5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8041c44:	f7fe ffb0 	bl	8040ba8 <HAL_GetTick>
 8041c48:	4602      	mov	r2, r0
 8041c4a:	697b      	ldr	r3, [r7, #20]
 8041c4c:	1ad3      	subs	r3, r2, r3
 8041c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8041c52:	4293      	cmp	r3, r2
 8041c54:	d901      	bls.n	8041c5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8041c56:	2303      	movs	r3, #3
 8041c58:	e351      	b.n	80422fe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041c5a:	4b0c      	ldr	r3, [pc, #48]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c5e:	f003 0302 	and.w	r3, r3, #2
 8041c62:	2b00      	cmp	r3, #0
 8041c64:	d0ee      	beq.n	8041c44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8041c66:	687b      	ldr	r3, [r7, #4]
 8041c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8041c72:	d111      	bne.n	8041c98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8041c74:	4b05      	ldr	r3, [pc, #20]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c76:	689b      	ldr	r3, [r3, #8]
 8041c78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8041c7c:	687b      	ldr	r3, [r7, #4]
 8041c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8041c80:	4b04      	ldr	r3, [pc, #16]	; (8041c94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8041c82:	400b      	ands	r3, r1
 8041c84:	4901      	ldr	r1, [pc, #4]	; (8041c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c86:	4313      	orrs	r3, r2
 8041c88:	608b      	str	r3, [r1, #8]
 8041c8a:	e00b      	b.n	8041ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8041c8c:	40023800 	.word	0x40023800
 8041c90:	40007000 	.word	0x40007000
 8041c94:	0ffffcff 	.word	0x0ffffcff
 8041c98:	4bac      	ldr	r3, [pc, #688]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041c9a:	689b      	ldr	r3, [r3, #8]
 8041c9c:	4aab      	ldr	r2, [pc, #684]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041c9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8041ca2:	6093      	str	r3, [r2, #8]
 8041ca4:	4ba9      	ldr	r3, [pc, #676]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041ca6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8041ca8:	687b      	ldr	r3, [r7, #4]
 8041caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8041cb0:	49a6      	ldr	r1, [pc, #664]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cb2:	4313      	orrs	r3, r2
 8041cb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8041cb6:	687b      	ldr	r3, [r7, #4]
 8041cb8:	681b      	ldr	r3, [r3, #0]
 8041cba:	f003 0310 	and.w	r3, r3, #16
 8041cbe:	2b00      	cmp	r3, #0
 8041cc0:	d010      	beq.n	8041ce4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8041cc2:	4ba2      	ldr	r3, [pc, #648]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041cc8:	4aa0      	ldr	r2, [pc, #640]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041cce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8041cd2:	4b9e      	ldr	r3, [pc, #632]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8041cd8:	687b      	ldr	r3, [r7, #4]
 8041cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041cdc:	499b      	ldr	r1, [pc, #620]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cde:	4313      	orrs	r3, r2
 8041ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8041ce4:	687b      	ldr	r3, [r7, #4]
 8041ce6:	681b      	ldr	r3, [r3, #0]
 8041ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8041cec:	2b00      	cmp	r3, #0
 8041cee:	d00a      	beq.n	8041d06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8041cf0:	4b96      	ldr	r3, [pc, #600]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041cf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8041cfa:	687b      	ldr	r3, [r7, #4]
 8041cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8041cfe:	4993      	ldr	r1, [pc, #588]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d00:	4313      	orrs	r3, r2
 8041d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8041d06:	687b      	ldr	r3, [r7, #4]
 8041d08:	681b      	ldr	r3, [r3, #0]
 8041d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8041d0e:	2b00      	cmp	r3, #0
 8041d10:	d00a      	beq.n	8041d28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8041d12:	4b8e      	ldr	r3, [pc, #568]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8041d1c:	687b      	ldr	r3, [r7, #4]
 8041d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8041d20:	498a      	ldr	r1, [pc, #552]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d22:	4313      	orrs	r3, r2
 8041d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8041d28:	687b      	ldr	r3, [r7, #4]
 8041d2a:	681b      	ldr	r3, [r3, #0]
 8041d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041d30:	2b00      	cmp	r3, #0
 8041d32:	d00a      	beq.n	8041d4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8041d34:	4b85      	ldr	r3, [pc, #532]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8041d3e:	687b      	ldr	r3, [r7, #4]
 8041d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8041d42:	4982      	ldr	r1, [pc, #520]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d44:	4313      	orrs	r3, r2
 8041d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8041d4a:	687b      	ldr	r3, [r7, #4]
 8041d4c:	681b      	ldr	r3, [r3, #0]
 8041d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041d52:	2b00      	cmp	r3, #0
 8041d54:	d00a      	beq.n	8041d6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8041d56:	4b7d      	ldr	r3, [pc, #500]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8041d60:	687b      	ldr	r3, [r7, #4]
 8041d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041d64:	4979      	ldr	r1, [pc, #484]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d66:	4313      	orrs	r3, r2
 8041d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8041d6c:	687b      	ldr	r3, [r7, #4]
 8041d6e:	681b      	ldr	r3, [r3, #0]
 8041d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041d74:	2b00      	cmp	r3, #0
 8041d76:	d00a      	beq.n	8041d8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8041d78:	4b74      	ldr	r3, [pc, #464]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d7e:	f023 0203 	bic.w	r2, r3, #3
 8041d82:	687b      	ldr	r3, [r7, #4]
 8041d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041d86:	4971      	ldr	r1, [pc, #452]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d88:	4313      	orrs	r3, r2
 8041d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8041d8e:	687b      	ldr	r3, [r7, #4]
 8041d90:	681b      	ldr	r3, [r3, #0]
 8041d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041d96:	2b00      	cmp	r3, #0
 8041d98:	d00a      	beq.n	8041db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8041d9a:	4b6c      	ldr	r3, [pc, #432]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041da0:	f023 020c 	bic.w	r2, r3, #12
 8041da4:	687b      	ldr	r3, [r7, #4]
 8041da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041da8:	4968      	ldr	r1, [pc, #416]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041daa:	4313      	orrs	r3, r2
 8041dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8041db0:	687b      	ldr	r3, [r7, #4]
 8041db2:	681b      	ldr	r3, [r3, #0]
 8041db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041db8:	2b00      	cmp	r3, #0
 8041dba:	d00a      	beq.n	8041dd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8041dbc:	4b63      	ldr	r3, [pc, #396]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041dc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8041dc6:	687b      	ldr	r3, [r7, #4]
 8041dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041dca:	4960      	ldr	r1, [pc, #384]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041dcc:	4313      	orrs	r3, r2
 8041dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8041dd2:	687b      	ldr	r3, [r7, #4]
 8041dd4:	681b      	ldr	r3, [r3, #0]
 8041dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8041dda:	2b00      	cmp	r3, #0
 8041ddc:	d00a      	beq.n	8041df4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8041dde:	4b5b      	ldr	r3, [pc, #364]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041de4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8041de8:	687b      	ldr	r3, [r7, #4]
 8041dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041dec:	4957      	ldr	r1, [pc, #348]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041dee:	4313      	orrs	r3, r2
 8041df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8041df4:	687b      	ldr	r3, [r7, #4]
 8041df6:	681b      	ldr	r3, [r3, #0]
 8041df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041dfc:	2b00      	cmp	r3, #0
 8041dfe:	d00a      	beq.n	8041e16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8041e00:	4b52      	ldr	r3, [pc, #328]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041e06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8041e0a:	687b      	ldr	r3, [r7, #4]
 8041e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041e0e:	494f      	ldr	r1, [pc, #316]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e10:	4313      	orrs	r3, r2
 8041e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8041e16:	687b      	ldr	r3, [r7, #4]
 8041e18:	681b      	ldr	r3, [r3, #0]
 8041e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041e1e:	2b00      	cmp	r3, #0
 8041e20:	d00a      	beq.n	8041e38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8041e22:	4b4a      	ldr	r3, [pc, #296]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041e28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8041e2c:	687b      	ldr	r3, [r7, #4]
 8041e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041e30:	4946      	ldr	r1, [pc, #280]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e32:	4313      	orrs	r3, r2
 8041e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8041e38:	687b      	ldr	r3, [r7, #4]
 8041e3a:	681b      	ldr	r3, [r3, #0]
 8041e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8041e40:	2b00      	cmp	r3, #0
 8041e42:	d00a      	beq.n	8041e5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8041e44:	4b41      	ldr	r3, [pc, #260]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041e4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8041e4e:	687b      	ldr	r3, [r7, #4]
 8041e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041e52:	493e      	ldr	r1, [pc, #248]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e54:	4313      	orrs	r3, r2
 8041e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8041e5a:	687b      	ldr	r3, [r7, #4]
 8041e5c:	681b      	ldr	r3, [r3, #0]
 8041e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8041e62:	2b00      	cmp	r3, #0
 8041e64:	d00a      	beq.n	8041e7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8041e66:	4b39      	ldr	r3, [pc, #228]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041e6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8041e70:	687b      	ldr	r3, [r7, #4]
 8041e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041e74:	4935      	ldr	r1, [pc, #212]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e76:	4313      	orrs	r3, r2
 8041e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8041e7c:	687b      	ldr	r3, [r7, #4]
 8041e7e:	681b      	ldr	r3, [r3, #0]
 8041e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041e84:	2b00      	cmp	r3, #0
 8041e86:	d00a      	beq.n	8041e9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8041e88:	4b30      	ldr	r3, [pc, #192]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041e8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8041e92:	687b      	ldr	r3, [r7, #4]
 8041e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041e96:	492d      	ldr	r1, [pc, #180]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e98:	4313      	orrs	r3, r2
 8041e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8041e9e:	687b      	ldr	r3, [r7, #4]
 8041ea0:	681b      	ldr	r3, [r3, #0]
 8041ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041ea6:	2b00      	cmp	r3, #0
 8041ea8:	d011      	beq.n	8041ece <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8041eaa:	4b28      	ldr	r3, [pc, #160]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041eb0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8041eb4:	687b      	ldr	r3, [r7, #4]
 8041eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8041eb8:	4924      	ldr	r1, [pc, #144]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041eba:	4313      	orrs	r3, r2
 8041ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8041ec0:	687b      	ldr	r3, [r7, #4]
 8041ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8041ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8041ec8:	d101      	bne.n	8041ece <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8041eca:	2301      	movs	r3, #1
 8041ecc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8041ece:	687b      	ldr	r3, [r7, #4]
 8041ed0:	681b      	ldr	r3, [r3, #0]
 8041ed2:	f003 0308 	and.w	r3, r3, #8
 8041ed6:	2b00      	cmp	r3, #0
 8041ed8:	d001      	beq.n	8041ede <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8041eda:	2301      	movs	r3, #1
 8041edc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8041ede:	687b      	ldr	r3, [r7, #4]
 8041ee0:	681b      	ldr	r3, [r3, #0]
 8041ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8041ee6:	2b00      	cmp	r3, #0
 8041ee8:	d00a      	beq.n	8041f00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8041eea:	4b18      	ldr	r3, [pc, #96]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041ef0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8041ef4:	687b      	ldr	r3, [r7, #4]
 8041ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041ef8:	4914      	ldr	r1, [pc, #80]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041efa:	4313      	orrs	r3, r2
 8041efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8041f00:	687b      	ldr	r3, [r7, #4]
 8041f02:	681b      	ldr	r3, [r3, #0]
 8041f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8041f08:	2b00      	cmp	r3, #0
 8041f0a:	d00b      	beq.n	8041f24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8041f0c:	4b0f      	ldr	r3, [pc, #60]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041f12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8041f16:	687b      	ldr	r3, [r7, #4]
 8041f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041f1c:	490b      	ldr	r1, [pc, #44]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f1e:	4313      	orrs	r3, r2
 8041f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8041f24:	687b      	ldr	r3, [r7, #4]
 8041f26:	681b      	ldr	r3, [r3, #0]
 8041f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8041f2c:	2b00      	cmp	r3, #0
 8041f2e:	d00f      	beq.n	8041f50 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8041f30:	4b06      	ldr	r3, [pc, #24]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041f36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8041f3a:	687b      	ldr	r3, [r7, #4]
 8041f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041f40:	4902      	ldr	r1, [pc, #8]	; (8041f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f42:	4313      	orrs	r3, r2
 8041f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8041f48:	e002      	b.n	8041f50 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8041f4a:	bf00      	nop
 8041f4c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8041f50:	687b      	ldr	r3, [r7, #4]
 8041f52:	681b      	ldr	r3, [r3, #0]
 8041f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041f58:	2b00      	cmp	r3, #0
 8041f5a:	d00b      	beq.n	8041f74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8041f5c:	4b8a      	ldr	r3, [pc, #552]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041f62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8041f66:	687b      	ldr	r3, [r7, #4]
 8041f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041f6c:	4986      	ldr	r1, [pc, #536]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f6e:	4313      	orrs	r3, r2
 8041f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8041f74:	687b      	ldr	r3, [r7, #4]
 8041f76:	681b      	ldr	r3, [r3, #0]
 8041f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041f7c:	2b00      	cmp	r3, #0
 8041f7e:	d00b      	beq.n	8041f98 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8041f80:	4b81      	ldr	r3, [pc, #516]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041f86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8041f8a:	687b      	ldr	r3, [r7, #4]
 8041f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041f90:	497d      	ldr	r1, [pc, #500]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f92:	4313      	orrs	r3, r2
 8041f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8041f98:	69fb      	ldr	r3, [r7, #28]
 8041f9a:	2b01      	cmp	r3, #1
 8041f9c:	d006      	beq.n	8041fac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8041f9e:	687b      	ldr	r3, [r7, #4]
 8041fa0:	681b      	ldr	r3, [r3, #0]
 8041fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041fa6:	2b00      	cmp	r3, #0
 8041fa8:	f000 80d6 	beq.w	8042158 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8041fac:	4b76      	ldr	r3, [pc, #472]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041fae:	681b      	ldr	r3, [r3, #0]
 8041fb0:	4a75      	ldr	r2, [pc, #468]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041fb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8041fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041fb8:	f7fe fdf6 	bl	8040ba8 <HAL_GetTick>
 8041fbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8041fbe:	e008      	b.n	8041fd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8041fc0:	f7fe fdf2 	bl	8040ba8 <HAL_GetTick>
 8041fc4:	4602      	mov	r2, r0
 8041fc6:	697b      	ldr	r3, [r7, #20]
 8041fc8:	1ad3      	subs	r3, r2, r3
 8041fca:	2b64      	cmp	r3, #100	; 0x64
 8041fcc:	d901      	bls.n	8041fd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8041fce:	2303      	movs	r3, #3
 8041fd0:	e195      	b.n	80422fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8041fd2:	4b6d      	ldr	r3, [pc, #436]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041fd4:	681b      	ldr	r3, [r3, #0]
 8041fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041fda:	2b00      	cmp	r3, #0
 8041fdc:	d1f0      	bne.n	8041fc0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8041fde:	687b      	ldr	r3, [r7, #4]
 8041fe0:	681b      	ldr	r3, [r3, #0]
 8041fe2:	f003 0301 	and.w	r3, r3, #1
 8041fe6:	2b00      	cmp	r3, #0
 8041fe8:	d021      	beq.n	804202e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8041fea:	687b      	ldr	r3, [r7, #4]
 8041fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041fee:	2b00      	cmp	r3, #0
 8041ff0:	d11d      	bne.n	804202e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8041ff2:	4b65      	ldr	r3, [pc, #404]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041ff8:	0c1b      	lsrs	r3, r3, #16
 8041ffa:	f003 0303 	and.w	r3, r3, #3
 8041ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8042000:	4b61      	ldr	r3, [pc, #388]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042006:	0e1b      	lsrs	r3, r3, #24
 8042008:	f003 030f 	and.w	r3, r3, #15
 804200c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 804200e:	687b      	ldr	r3, [r7, #4]
 8042010:	685b      	ldr	r3, [r3, #4]
 8042012:	019a      	lsls	r2, r3, #6
 8042014:	693b      	ldr	r3, [r7, #16]
 8042016:	041b      	lsls	r3, r3, #16
 8042018:	431a      	orrs	r2, r3
 804201a:	68fb      	ldr	r3, [r7, #12]
 804201c:	061b      	lsls	r3, r3, #24
 804201e:	431a      	orrs	r2, r3
 8042020:	687b      	ldr	r3, [r7, #4]
 8042022:	689b      	ldr	r3, [r3, #8]
 8042024:	071b      	lsls	r3, r3, #28
 8042026:	4958      	ldr	r1, [pc, #352]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042028:	4313      	orrs	r3, r2
 804202a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 804202e:	687b      	ldr	r3, [r7, #4]
 8042030:	681b      	ldr	r3, [r3, #0]
 8042032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8042036:	2b00      	cmp	r3, #0
 8042038:	d004      	beq.n	8042044 <HAL_RCCEx_PeriphCLKConfig+0x588>
 804203a:	687b      	ldr	r3, [r7, #4]
 804203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804203e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042042:	d00a      	beq.n	804205a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8042044:	687b      	ldr	r3, [r7, #4]
 8042046:	681b      	ldr	r3, [r3, #0]
 8042048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 804204c:	2b00      	cmp	r3, #0
 804204e:	d02e      	beq.n	80420ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8042050:	687b      	ldr	r3, [r7, #4]
 8042052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042058:	d129      	bne.n	80420ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 804205a:	4b4b      	ldr	r3, [pc, #300]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804205c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042060:	0c1b      	lsrs	r3, r3, #16
 8042062:	f003 0303 	and.w	r3, r3, #3
 8042066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8042068:	4b47      	ldr	r3, [pc, #284]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804206a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804206e:	0f1b      	lsrs	r3, r3, #28
 8042070:	f003 0307 	and.w	r3, r3, #7
 8042074:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8042076:	687b      	ldr	r3, [r7, #4]
 8042078:	685b      	ldr	r3, [r3, #4]
 804207a:	019a      	lsls	r2, r3, #6
 804207c:	693b      	ldr	r3, [r7, #16]
 804207e:	041b      	lsls	r3, r3, #16
 8042080:	431a      	orrs	r2, r3
 8042082:	687b      	ldr	r3, [r7, #4]
 8042084:	68db      	ldr	r3, [r3, #12]
 8042086:	061b      	lsls	r3, r3, #24
 8042088:	431a      	orrs	r2, r3
 804208a:	68fb      	ldr	r3, [r7, #12]
 804208c:	071b      	lsls	r3, r3, #28
 804208e:	493e      	ldr	r1, [pc, #248]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042090:	4313      	orrs	r3, r2
 8042092:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8042096:	4b3c      	ldr	r3, [pc, #240]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804209c:	f023 021f 	bic.w	r2, r3, #31
 80420a0:	687b      	ldr	r3, [r7, #4]
 80420a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80420a4:	3b01      	subs	r3, #1
 80420a6:	4938      	ldr	r1, [pc, #224]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420a8:	4313      	orrs	r3, r2
 80420aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80420ae:	687b      	ldr	r3, [r7, #4]
 80420b0:	681b      	ldr	r3, [r3, #0]
 80420b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80420b6:	2b00      	cmp	r3, #0
 80420b8:	d01d      	beq.n	80420f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80420ba:	4b33      	ldr	r3, [pc, #204]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80420c0:	0e1b      	lsrs	r3, r3, #24
 80420c2:	f003 030f 	and.w	r3, r3, #15
 80420c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80420c8:	4b2f      	ldr	r3, [pc, #188]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80420ce:	0f1b      	lsrs	r3, r3, #28
 80420d0:	f003 0307 	and.w	r3, r3, #7
 80420d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80420d6:	687b      	ldr	r3, [r7, #4]
 80420d8:	685b      	ldr	r3, [r3, #4]
 80420da:	019a      	lsls	r2, r3, #6
 80420dc:	687b      	ldr	r3, [r7, #4]
 80420de:	691b      	ldr	r3, [r3, #16]
 80420e0:	041b      	lsls	r3, r3, #16
 80420e2:	431a      	orrs	r2, r3
 80420e4:	693b      	ldr	r3, [r7, #16]
 80420e6:	061b      	lsls	r3, r3, #24
 80420e8:	431a      	orrs	r2, r3
 80420ea:	68fb      	ldr	r3, [r7, #12]
 80420ec:	071b      	lsls	r3, r3, #28
 80420ee:	4926      	ldr	r1, [pc, #152]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420f0:	4313      	orrs	r3, r2
 80420f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80420f6:	687b      	ldr	r3, [r7, #4]
 80420f8:	681b      	ldr	r3, [r3, #0]
 80420fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80420fe:	2b00      	cmp	r3, #0
 8042100:	d011      	beq.n	8042126 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8042102:	687b      	ldr	r3, [r7, #4]
 8042104:	685b      	ldr	r3, [r3, #4]
 8042106:	019a      	lsls	r2, r3, #6
 8042108:	687b      	ldr	r3, [r7, #4]
 804210a:	691b      	ldr	r3, [r3, #16]
 804210c:	041b      	lsls	r3, r3, #16
 804210e:	431a      	orrs	r2, r3
 8042110:	687b      	ldr	r3, [r7, #4]
 8042112:	68db      	ldr	r3, [r3, #12]
 8042114:	061b      	lsls	r3, r3, #24
 8042116:	431a      	orrs	r2, r3
 8042118:	687b      	ldr	r3, [r7, #4]
 804211a:	689b      	ldr	r3, [r3, #8]
 804211c:	071b      	lsls	r3, r3, #28
 804211e:	491a      	ldr	r1, [pc, #104]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042120:	4313      	orrs	r3, r2
 8042122:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8042126:	4b18      	ldr	r3, [pc, #96]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042128:	681b      	ldr	r3, [r3, #0]
 804212a:	4a17      	ldr	r2, [pc, #92]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804212c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8042130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042132:	f7fe fd39 	bl	8040ba8 <HAL_GetTick>
 8042136:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8042138:	e008      	b.n	804214c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 804213a:	f7fe fd35 	bl	8040ba8 <HAL_GetTick>
 804213e:	4602      	mov	r2, r0
 8042140:	697b      	ldr	r3, [r7, #20]
 8042142:	1ad3      	subs	r3, r2, r3
 8042144:	2b64      	cmp	r3, #100	; 0x64
 8042146:	d901      	bls.n	804214c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8042148:	2303      	movs	r3, #3
 804214a:	e0d8      	b.n	80422fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 804214c:	4b0e      	ldr	r3, [pc, #56]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804214e:	681b      	ldr	r3, [r3, #0]
 8042150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8042154:	2b00      	cmp	r3, #0
 8042156:	d0f0      	beq.n	804213a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8042158:	69bb      	ldr	r3, [r7, #24]
 804215a:	2b01      	cmp	r3, #1
 804215c:	f040 80ce 	bne.w	80422fc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8042160:	4b09      	ldr	r3, [pc, #36]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042162:	681b      	ldr	r3, [r3, #0]
 8042164:	4a08      	ldr	r2, [pc, #32]	; (8042188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804216a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804216c:	f7fe fd1c 	bl	8040ba8 <HAL_GetTick>
 8042170:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8042172:	e00b      	b.n	804218c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8042174:	f7fe fd18 	bl	8040ba8 <HAL_GetTick>
 8042178:	4602      	mov	r2, r0
 804217a:	697b      	ldr	r3, [r7, #20]
 804217c:	1ad3      	subs	r3, r2, r3
 804217e:	2b64      	cmp	r3, #100	; 0x64
 8042180:	d904      	bls.n	804218c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8042182:	2303      	movs	r3, #3
 8042184:	e0bb      	b.n	80422fe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8042186:	bf00      	nop
 8042188:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 804218c:	4b5e      	ldr	r3, [pc, #376]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804218e:	681b      	ldr	r3, [r3, #0]
 8042190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8042194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042198:	d0ec      	beq.n	8042174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 804219a:	687b      	ldr	r3, [r7, #4]
 804219c:	681b      	ldr	r3, [r3, #0]
 804219e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80421a2:	2b00      	cmp	r3, #0
 80421a4:	d003      	beq.n	80421ae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80421a6:	687b      	ldr	r3, [r7, #4]
 80421a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80421aa:	2b00      	cmp	r3, #0
 80421ac:	d009      	beq.n	80421c2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80421ae:	687b      	ldr	r3, [r7, #4]
 80421b0:	681b      	ldr	r3, [r3, #0]
 80421b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80421b6:	2b00      	cmp	r3, #0
 80421b8:	d02e      	beq.n	8042218 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80421ba:	687b      	ldr	r3, [r7, #4]
 80421bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80421be:	2b00      	cmp	r3, #0
 80421c0:	d12a      	bne.n	8042218 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80421c2:	4b51      	ldr	r3, [pc, #324]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80421c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80421c8:	0c1b      	lsrs	r3, r3, #16
 80421ca:	f003 0303 	and.w	r3, r3, #3
 80421ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80421d0:	4b4d      	ldr	r3, [pc, #308]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80421d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80421d6:	0f1b      	lsrs	r3, r3, #28
 80421d8:	f003 0307 	and.w	r3, r3, #7
 80421dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80421de:	687b      	ldr	r3, [r7, #4]
 80421e0:	695b      	ldr	r3, [r3, #20]
 80421e2:	019a      	lsls	r2, r3, #6
 80421e4:	693b      	ldr	r3, [r7, #16]
 80421e6:	041b      	lsls	r3, r3, #16
 80421e8:	431a      	orrs	r2, r3
 80421ea:	687b      	ldr	r3, [r7, #4]
 80421ec:	699b      	ldr	r3, [r3, #24]
 80421ee:	061b      	lsls	r3, r3, #24
 80421f0:	431a      	orrs	r2, r3
 80421f2:	68fb      	ldr	r3, [r7, #12]
 80421f4:	071b      	lsls	r3, r3, #28
 80421f6:	4944      	ldr	r1, [pc, #272]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80421f8:	4313      	orrs	r3, r2
 80421fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80421fe:	4b42      	ldr	r3, [pc, #264]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042204:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8042208:	687b      	ldr	r3, [r7, #4]
 804220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804220c:	3b01      	subs	r3, #1
 804220e:	021b      	lsls	r3, r3, #8
 8042210:	493d      	ldr	r1, [pc, #244]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042212:	4313      	orrs	r3, r2
 8042214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8042218:	687b      	ldr	r3, [r7, #4]
 804221a:	681b      	ldr	r3, [r3, #0]
 804221c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8042220:	2b00      	cmp	r3, #0
 8042222:	d022      	beq.n	804226a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8042224:	687b      	ldr	r3, [r7, #4]
 8042226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 804222c:	d11d      	bne.n	804226a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 804222e:	4b36      	ldr	r3, [pc, #216]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042234:	0e1b      	lsrs	r3, r3, #24
 8042236:	f003 030f 	and.w	r3, r3, #15
 804223a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 804223c:	4b32      	ldr	r3, [pc, #200]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042242:	0f1b      	lsrs	r3, r3, #28
 8042244:	f003 0307 	and.w	r3, r3, #7
 8042248:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 804224a:	687b      	ldr	r3, [r7, #4]
 804224c:	695b      	ldr	r3, [r3, #20]
 804224e:	019a      	lsls	r2, r3, #6
 8042250:	687b      	ldr	r3, [r7, #4]
 8042252:	6a1b      	ldr	r3, [r3, #32]
 8042254:	041b      	lsls	r3, r3, #16
 8042256:	431a      	orrs	r2, r3
 8042258:	693b      	ldr	r3, [r7, #16]
 804225a:	061b      	lsls	r3, r3, #24
 804225c:	431a      	orrs	r2, r3
 804225e:	68fb      	ldr	r3, [r7, #12]
 8042260:	071b      	lsls	r3, r3, #28
 8042262:	4929      	ldr	r1, [pc, #164]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042264:	4313      	orrs	r3, r2
 8042266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 804226a:	687b      	ldr	r3, [r7, #4]
 804226c:	681b      	ldr	r3, [r3, #0]
 804226e:	f003 0308 	and.w	r3, r3, #8
 8042272:	2b00      	cmp	r3, #0
 8042274:	d028      	beq.n	80422c8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8042276:	4b24      	ldr	r3, [pc, #144]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804227c:	0e1b      	lsrs	r3, r3, #24
 804227e:	f003 030f 	and.w	r3, r3, #15
 8042282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8042284:	4b20      	ldr	r3, [pc, #128]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804228a:	0c1b      	lsrs	r3, r3, #16
 804228c:	f003 0303 	and.w	r3, r3, #3
 8042290:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8042292:	687b      	ldr	r3, [r7, #4]
 8042294:	695b      	ldr	r3, [r3, #20]
 8042296:	019a      	lsls	r2, r3, #6
 8042298:	68fb      	ldr	r3, [r7, #12]
 804229a:	041b      	lsls	r3, r3, #16
 804229c:	431a      	orrs	r2, r3
 804229e:	693b      	ldr	r3, [r7, #16]
 80422a0:	061b      	lsls	r3, r3, #24
 80422a2:	431a      	orrs	r2, r3
 80422a4:	687b      	ldr	r3, [r7, #4]
 80422a6:	69db      	ldr	r3, [r3, #28]
 80422a8:	071b      	lsls	r3, r3, #28
 80422aa:	4917      	ldr	r1, [pc, #92]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422ac:	4313      	orrs	r3, r2
 80422ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80422b2:	4b15      	ldr	r3, [pc, #84]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80422b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80422bc:	687b      	ldr	r3, [r7, #4]
 80422be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80422c0:	4911      	ldr	r1, [pc, #68]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422c2:	4313      	orrs	r3, r2
 80422c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80422c8:	4b0f      	ldr	r3, [pc, #60]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422ca:	681b      	ldr	r3, [r3, #0]
 80422cc:	4a0e      	ldr	r2, [pc, #56]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80422d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80422d4:	f7fe fc68 	bl	8040ba8 <HAL_GetTick>
 80422d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80422da:	e008      	b.n	80422ee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80422dc:	f7fe fc64 	bl	8040ba8 <HAL_GetTick>
 80422e0:	4602      	mov	r2, r0
 80422e2:	697b      	ldr	r3, [r7, #20]
 80422e4:	1ad3      	subs	r3, r2, r3
 80422e6:	2b64      	cmp	r3, #100	; 0x64
 80422e8:	d901      	bls.n	80422ee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80422ea:	2303      	movs	r3, #3
 80422ec:	e007      	b.n	80422fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80422ee:	4b06      	ldr	r3, [pc, #24]	; (8042308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422f0:	681b      	ldr	r3, [r3, #0]
 80422f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80422f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80422fa:	d1ef      	bne.n	80422dc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80422fc:	2300      	movs	r3, #0
}
 80422fe:	4618      	mov	r0, r3
 8042300:	3720      	adds	r7, #32
 8042302:	46bd      	mov	sp, r7
 8042304:	bd80      	pop	{r7, pc}
 8042306:	bf00      	nop
 8042308:	40023800 	.word	0x40023800

0804230c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 804230c:	b580      	push	{r7, lr}
 804230e:	b082      	sub	sp, #8
 8042310:	af00      	add	r7, sp, #0
 8042312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8042314:	687b      	ldr	r3, [r7, #4]
 8042316:	2b00      	cmp	r3, #0
 8042318:	d101      	bne.n	804231e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 804231a:	2301      	movs	r3, #1
 804231c:	e040      	b.n	80423a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 804231e:	687b      	ldr	r3, [r7, #4]
 8042320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042322:	2b00      	cmp	r3, #0
 8042324:	d106      	bne.n	8042334 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8042326:	687b      	ldr	r3, [r7, #4]
 8042328:	2200      	movs	r2, #0
 804232a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 804232e:	6878      	ldr	r0, [r7, #4]
 8042330:	f7fe fa7c 	bl	804082c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8042334:	687b      	ldr	r3, [r7, #4]
 8042336:	2224      	movs	r2, #36	; 0x24
 8042338:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 804233a:	687b      	ldr	r3, [r7, #4]
 804233c:	681b      	ldr	r3, [r3, #0]
 804233e:	681a      	ldr	r2, [r3, #0]
 8042340:	687b      	ldr	r3, [r7, #4]
 8042342:	681b      	ldr	r3, [r3, #0]
 8042344:	f022 0201 	bic.w	r2, r2, #1
 8042348:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 804234a:	6878      	ldr	r0, [r7, #4]
 804234c:	f000 f8b0 	bl	80424b0 <UART_SetConfig>
 8042350:	4603      	mov	r3, r0
 8042352:	2b01      	cmp	r3, #1
 8042354:	d101      	bne.n	804235a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8042356:	2301      	movs	r3, #1
 8042358:	e022      	b.n	80423a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 804235a:	687b      	ldr	r3, [r7, #4]
 804235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804235e:	2b00      	cmp	r3, #0
 8042360:	d002      	beq.n	8042368 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8042362:	6878      	ldr	r0, [r7, #4]
 8042364:	f000 fb08 	bl	8042978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8042368:	687b      	ldr	r3, [r7, #4]
 804236a:	681b      	ldr	r3, [r3, #0]
 804236c:	685a      	ldr	r2, [r3, #4]
 804236e:	687b      	ldr	r3, [r7, #4]
 8042370:	681b      	ldr	r3, [r3, #0]
 8042372:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8042376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8042378:	687b      	ldr	r3, [r7, #4]
 804237a:	681b      	ldr	r3, [r3, #0]
 804237c:	689a      	ldr	r2, [r3, #8]
 804237e:	687b      	ldr	r3, [r7, #4]
 8042380:	681b      	ldr	r3, [r3, #0]
 8042382:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8042386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8042388:	687b      	ldr	r3, [r7, #4]
 804238a:	681b      	ldr	r3, [r3, #0]
 804238c:	681a      	ldr	r2, [r3, #0]
 804238e:	687b      	ldr	r3, [r7, #4]
 8042390:	681b      	ldr	r3, [r3, #0]
 8042392:	f042 0201 	orr.w	r2, r2, #1
 8042396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8042398:	6878      	ldr	r0, [r7, #4]
 804239a:	f000 fb8f 	bl	8042abc <UART_CheckIdleState>
 804239e:	4603      	mov	r3, r0
}
 80423a0:	4618      	mov	r0, r3
 80423a2:	3708      	adds	r7, #8
 80423a4:	46bd      	mov	sp, r7
 80423a6:	bd80      	pop	{r7, pc}

080423a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80423a8:	b580      	push	{r7, lr}
 80423aa:	b08a      	sub	sp, #40	; 0x28
 80423ac:	af02      	add	r7, sp, #8
 80423ae:	60f8      	str	r0, [r7, #12]
 80423b0:	60b9      	str	r1, [r7, #8]
 80423b2:	603b      	str	r3, [r7, #0]
 80423b4:	4613      	mov	r3, r2
 80423b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80423b8:	68fb      	ldr	r3, [r7, #12]
 80423ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80423bc:	2b20      	cmp	r3, #32
 80423be:	d171      	bne.n	80424a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80423c0:	68bb      	ldr	r3, [r7, #8]
 80423c2:	2b00      	cmp	r3, #0
 80423c4:	d002      	beq.n	80423cc <HAL_UART_Transmit+0x24>
 80423c6:	88fb      	ldrh	r3, [r7, #6]
 80423c8:	2b00      	cmp	r3, #0
 80423ca:	d101      	bne.n	80423d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80423cc:	2301      	movs	r3, #1
 80423ce:	e06a      	b.n	80424a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80423d0:	68fb      	ldr	r3, [r7, #12]
 80423d2:	2200      	movs	r2, #0
 80423d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80423d8:	68fb      	ldr	r3, [r7, #12]
 80423da:	2221      	movs	r2, #33	; 0x21
 80423dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80423de:	f7fe fbe3 	bl	8040ba8 <HAL_GetTick>
 80423e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80423e4:	68fb      	ldr	r3, [r7, #12]
 80423e6:	88fa      	ldrh	r2, [r7, #6]
 80423e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80423ec:	68fb      	ldr	r3, [r7, #12]
 80423ee:	88fa      	ldrh	r2, [r7, #6]
 80423f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80423f4:	68fb      	ldr	r3, [r7, #12]
 80423f6:	689b      	ldr	r3, [r3, #8]
 80423f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80423fc:	d108      	bne.n	8042410 <HAL_UART_Transmit+0x68>
 80423fe:	68fb      	ldr	r3, [r7, #12]
 8042400:	691b      	ldr	r3, [r3, #16]
 8042402:	2b00      	cmp	r3, #0
 8042404:	d104      	bne.n	8042410 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8042406:	2300      	movs	r3, #0
 8042408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 804240a:	68bb      	ldr	r3, [r7, #8]
 804240c:	61bb      	str	r3, [r7, #24]
 804240e:	e003      	b.n	8042418 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8042410:	68bb      	ldr	r3, [r7, #8]
 8042412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8042414:	2300      	movs	r3, #0
 8042416:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8042418:	e02c      	b.n	8042474 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 804241a:	683b      	ldr	r3, [r7, #0]
 804241c:	9300      	str	r3, [sp, #0]
 804241e:	697b      	ldr	r3, [r7, #20]
 8042420:	2200      	movs	r2, #0
 8042422:	2180      	movs	r1, #128	; 0x80
 8042424:	68f8      	ldr	r0, [r7, #12]
 8042426:	f000 fb96 	bl	8042b56 <UART_WaitOnFlagUntilTimeout>
 804242a:	4603      	mov	r3, r0
 804242c:	2b00      	cmp	r3, #0
 804242e:	d001      	beq.n	8042434 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8042430:	2303      	movs	r3, #3
 8042432:	e038      	b.n	80424a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8042434:	69fb      	ldr	r3, [r7, #28]
 8042436:	2b00      	cmp	r3, #0
 8042438:	d10b      	bne.n	8042452 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 804243a:	69bb      	ldr	r3, [r7, #24]
 804243c:	881b      	ldrh	r3, [r3, #0]
 804243e:	461a      	mov	r2, r3
 8042440:	68fb      	ldr	r3, [r7, #12]
 8042442:	681b      	ldr	r3, [r3, #0]
 8042444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8042448:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 804244a:	69bb      	ldr	r3, [r7, #24]
 804244c:	3302      	adds	r3, #2
 804244e:	61bb      	str	r3, [r7, #24]
 8042450:	e007      	b.n	8042462 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8042452:	69fb      	ldr	r3, [r7, #28]
 8042454:	781a      	ldrb	r2, [r3, #0]
 8042456:	68fb      	ldr	r3, [r7, #12]
 8042458:	681b      	ldr	r3, [r3, #0]
 804245a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 804245c:	69fb      	ldr	r3, [r7, #28]
 804245e:	3301      	adds	r3, #1
 8042460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8042462:	68fb      	ldr	r3, [r7, #12]
 8042464:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8042468:	b29b      	uxth	r3, r3
 804246a:	3b01      	subs	r3, #1
 804246c:	b29a      	uxth	r2, r3
 804246e:	68fb      	ldr	r3, [r7, #12]
 8042470:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8042474:	68fb      	ldr	r3, [r7, #12]
 8042476:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 804247a:	b29b      	uxth	r3, r3
 804247c:	2b00      	cmp	r3, #0
 804247e:	d1cc      	bne.n	804241a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8042480:	683b      	ldr	r3, [r7, #0]
 8042482:	9300      	str	r3, [sp, #0]
 8042484:	697b      	ldr	r3, [r7, #20]
 8042486:	2200      	movs	r2, #0
 8042488:	2140      	movs	r1, #64	; 0x40
 804248a:	68f8      	ldr	r0, [r7, #12]
 804248c:	f000 fb63 	bl	8042b56 <UART_WaitOnFlagUntilTimeout>
 8042490:	4603      	mov	r3, r0
 8042492:	2b00      	cmp	r3, #0
 8042494:	d001      	beq.n	804249a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8042496:	2303      	movs	r3, #3
 8042498:	e005      	b.n	80424a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 804249a:	68fb      	ldr	r3, [r7, #12]
 804249c:	2220      	movs	r2, #32
 804249e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80424a0:	2300      	movs	r3, #0
 80424a2:	e000      	b.n	80424a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80424a4:	2302      	movs	r3, #2
  }
}
 80424a6:	4618      	mov	r0, r3
 80424a8:	3720      	adds	r7, #32
 80424aa:	46bd      	mov	sp, r7
 80424ac:	bd80      	pop	{r7, pc}
	...

080424b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80424b0:	b580      	push	{r7, lr}
 80424b2:	b088      	sub	sp, #32
 80424b4:	af00      	add	r7, sp, #0
 80424b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80424b8:	2300      	movs	r3, #0
 80424ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80424bc:	687b      	ldr	r3, [r7, #4]
 80424be:	689a      	ldr	r2, [r3, #8]
 80424c0:	687b      	ldr	r3, [r7, #4]
 80424c2:	691b      	ldr	r3, [r3, #16]
 80424c4:	431a      	orrs	r2, r3
 80424c6:	687b      	ldr	r3, [r7, #4]
 80424c8:	695b      	ldr	r3, [r3, #20]
 80424ca:	431a      	orrs	r2, r3
 80424cc:	687b      	ldr	r3, [r7, #4]
 80424ce:	69db      	ldr	r3, [r3, #28]
 80424d0:	4313      	orrs	r3, r2
 80424d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80424d4:	687b      	ldr	r3, [r7, #4]
 80424d6:	681b      	ldr	r3, [r3, #0]
 80424d8:	681a      	ldr	r2, [r3, #0]
 80424da:	4ba6      	ldr	r3, [pc, #664]	; (8042774 <UART_SetConfig+0x2c4>)
 80424dc:	4013      	ands	r3, r2
 80424de:	687a      	ldr	r2, [r7, #4]
 80424e0:	6812      	ldr	r2, [r2, #0]
 80424e2:	6979      	ldr	r1, [r7, #20]
 80424e4:	430b      	orrs	r3, r1
 80424e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80424e8:	687b      	ldr	r3, [r7, #4]
 80424ea:	681b      	ldr	r3, [r3, #0]
 80424ec:	685b      	ldr	r3, [r3, #4]
 80424ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80424f2:	687b      	ldr	r3, [r7, #4]
 80424f4:	68da      	ldr	r2, [r3, #12]
 80424f6:	687b      	ldr	r3, [r7, #4]
 80424f8:	681b      	ldr	r3, [r3, #0]
 80424fa:	430a      	orrs	r2, r1
 80424fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80424fe:	687b      	ldr	r3, [r7, #4]
 8042500:	699b      	ldr	r3, [r3, #24]
 8042502:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8042504:	687b      	ldr	r3, [r7, #4]
 8042506:	6a1b      	ldr	r3, [r3, #32]
 8042508:	697a      	ldr	r2, [r7, #20]
 804250a:	4313      	orrs	r3, r2
 804250c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 804250e:	687b      	ldr	r3, [r7, #4]
 8042510:	681b      	ldr	r3, [r3, #0]
 8042512:	689b      	ldr	r3, [r3, #8]
 8042514:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8042518:	687b      	ldr	r3, [r7, #4]
 804251a:	681b      	ldr	r3, [r3, #0]
 804251c:	697a      	ldr	r2, [r7, #20]
 804251e:	430a      	orrs	r2, r1
 8042520:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8042522:	687b      	ldr	r3, [r7, #4]
 8042524:	681b      	ldr	r3, [r3, #0]
 8042526:	4a94      	ldr	r2, [pc, #592]	; (8042778 <UART_SetConfig+0x2c8>)
 8042528:	4293      	cmp	r3, r2
 804252a:	d120      	bne.n	804256e <UART_SetConfig+0xbe>
 804252c:	4b93      	ldr	r3, [pc, #588]	; (804277c <UART_SetConfig+0x2cc>)
 804252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042532:	f003 0303 	and.w	r3, r3, #3
 8042536:	2b03      	cmp	r3, #3
 8042538:	d816      	bhi.n	8042568 <UART_SetConfig+0xb8>
 804253a:	a201      	add	r2, pc, #4	; (adr r2, 8042540 <UART_SetConfig+0x90>)
 804253c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042540:	08042551 	.word	0x08042551
 8042544:	0804255d 	.word	0x0804255d
 8042548:	08042557 	.word	0x08042557
 804254c:	08042563 	.word	0x08042563
 8042550:	2301      	movs	r3, #1
 8042552:	77fb      	strb	r3, [r7, #31]
 8042554:	e150      	b.n	80427f8 <UART_SetConfig+0x348>
 8042556:	2302      	movs	r3, #2
 8042558:	77fb      	strb	r3, [r7, #31]
 804255a:	e14d      	b.n	80427f8 <UART_SetConfig+0x348>
 804255c:	2304      	movs	r3, #4
 804255e:	77fb      	strb	r3, [r7, #31]
 8042560:	e14a      	b.n	80427f8 <UART_SetConfig+0x348>
 8042562:	2308      	movs	r3, #8
 8042564:	77fb      	strb	r3, [r7, #31]
 8042566:	e147      	b.n	80427f8 <UART_SetConfig+0x348>
 8042568:	2310      	movs	r3, #16
 804256a:	77fb      	strb	r3, [r7, #31]
 804256c:	e144      	b.n	80427f8 <UART_SetConfig+0x348>
 804256e:	687b      	ldr	r3, [r7, #4]
 8042570:	681b      	ldr	r3, [r3, #0]
 8042572:	4a83      	ldr	r2, [pc, #524]	; (8042780 <UART_SetConfig+0x2d0>)
 8042574:	4293      	cmp	r3, r2
 8042576:	d132      	bne.n	80425de <UART_SetConfig+0x12e>
 8042578:	4b80      	ldr	r3, [pc, #512]	; (804277c <UART_SetConfig+0x2cc>)
 804257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804257e:	f003 030c 	and.w	r3, r3, #12
 8042582:	2b0c      	cmp	r3, #12
 8042584:	d828      	bhi.n	80425d8 <UART_SetConfig+0x128>
 8042586:	a201      	add	r2, pc, #4	; (adr r2, 804258c <UART_SetConfig+0xdc>)
 8042588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804258c:	080425c1 	.word	0x080425c1
 8042590:	080425d9 	.word	0x080425d9
 8042594:	080425d9 	.word	0x080425d9
 8042598:	080425d9 	.word	0x080425d9
 804259c:	080425cd 	.word	0x080425cd
 80425a0:	080425d9 	.word	0x080425d9
 80425a4:	080425d9 	.word	0x080425d9
 80425a8:	080425d9 	.word	0x080425d9
 80425ac:	080425c7 	.word	0x080425c7
 80425b0:	080425d9 	.word	0x080425d9
 80425b4:	080425d9 	.word	0x080425d9
 80425b8:	080425d9 	.word	0x080425d9
 80425bc:	080425d3 	.word	0x080425d3
 80425c0:	2300      	movs	r3, #0
 80425c2:	77fb      	strb	r3, [r7, #31]
 80425c4:	e118      	b.n	80427f8 <UART_SetConfig+0x348>
 80425c6:	2302      	movs	r3, #2
 80425c8:	77fb      	strb	r3, [r7, #31]
 80425ca:	e115      	b.n	80427f8 <UART_SetConfig+0x348>
 80425cc:	2304      	movs	r3, #4
 80425ce:	77fb      	strb	r3, [r7, #31]
 80425d0:	e112      	b.n	80427f8 <UART_SetConfig+0x348>
 80425d2:	2308      	movs	r3, #8
 80425d4:	77fb      	strb	r3, [r7, #31]
 80425d6:	e10f      	b.n	80427f8 <UART_SetConfig+0x348>
 80425d8:	2310      	movs	r3, #16
 80425da:	77fb      	strb	r3, [r7, #31]
 80425dc:	e10c      	b.n	80427f8 <UART_SetConfig+0x348>
 80425de:	687b      	ldr	r3, [r7, #4]
 80425e0:	681b      	ldr	r3, [r3, #0]
 80425e2:	4a68      	ldr	r2, [pc, #416]	; (8042784 <UART_SetConfig+0x2d4>)
 80425e4:	4293      	cmp	r3, r2
 80425e6:	d120      	bne.n	804262a <UART_SetConfig+0x17a>
 80425e8:	4b64      	ldr	r3, [pc, #400]	; (804277c <UART_SetConfig+0x2cc>)
 80425ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80425ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80425f2:	2b30      	cmp	r3, #48	; 0x30
 80425f4:	d013      	beq.n	804261e <UART_SetConfig+0x16e>
 80425f6:	2b30      	cmp	r3, #48	; 0x30
 80425f8:	d814      	bhi.n	8042624 <UART_SetConfig+0x174>
 80425fa:	2b20      	cmp	r3, #32
 80425fc:	d009      	beq.n	8042612 <UART_SetConfig+0x162>
 80425fe:	2b20      	cmp	r3, #32
 8042600:	d810      	bhi.n	8042624 <UART_SetConfig+0x174>
 8042602:	2b00      	cmp	r3, #0
 8042604:	d002      	beq.n	804260c <UART_SetConfig+0x15c>
 8042606:	2b10      	cmp	r3, #16
 8042608:	d006      	beq.n	8042618 <UART_SetConfig+0x168>
 804260a:	e00b      	b.n	8042624 <UART_SetConfig+0x174>
 804260c:	2300      	movs	r3, #0
 804260e:	77fb      	strb	r3, [r7, #31]
 8042610:	e0f2      	b.n	80427f8 <UART_SetConfig+0x348>
 8042612:	2302      	movs	r3, #2
 8042614:	77fb      	strb	r3, [r7, #31]
 8042616:	e0ef      	b.n	80427f8 <UART_SetConfig+0x348>
 8042618:	2304      	movs	r3, #4
 804261a:	77fb      	strb	r3, [r7, #31]
 804261c:	e0ec      	b.n	80427f8 <UART_SetConfig+0x348>
 804261e:	2308      	movs	r3, #8
 8042620:	77fb      	strb	r3, [r7, #31]
 8042622:	e0e9      	b.n	80427f8 <UART_SetConfig+0x348>
 8042624:	2310      	movs	r3, #16
 8042626:	77fb      	strb	r3, [r7, #31]
 8042628:	e0e6      	b.n	80427f8 <UART_SetConfig+0x348>
 804262a:	687b      	ldr	r3, [r7, #4]
 804262c:	681b      	ldr	r3, [r3, #0]
 804262e:	4a56      	ldr	r2, [pc, #344]	; (8042788 <UART_SetConfig+0x2d8>)
 8042630:	4293      	cmp	r3, r2
 8042632:	d120      	bne.n	8042676 <UART_SetConfig+0x1c6>
 8042634:	4b51      	ldr	r3, [pc, #324]	; (804277c <UART_SetConfig+0x2cc>)
 8042636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804263a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 804263e:	2bc0      	cmp	r3, #192	; 0xc0
 8042640:	d013      	beq.n	804266a <UART_SetConfig+0x1ba>
 8042642:	2bc0      	cmp	r3, #192	; 0xc0
 8042644:	d814      	bhi.n	8042670 <UART_SetConfig+0x1c0>
 8042646:	2b80      	cmp	r3, #128	; 0x80
 8042648:	d009      	beq.n	804265e <UART_SetConfig+0x1ae>
 804264a:	2b80      	cmp	r3, #128	; 0x80
 804264c:	d810      	bhi.n	8042670 <UART_SetConfig+0x1c0>
 804264e:	2b00      	cmp	r3, #0
 8042650:	d002      	beq.n	8042658 <UART_SetConfig+0x1a8>
 8042652:	2b40      	cmp	r3, #64	; 0x40
 8042654:	d006      	beq.n	8042664 <UART_SetConfig+0x1b4>
 8042656:	e00b      	b.n	8042670 <UART_SetConfig+0x1c0>
 8042658:	2300      	movs	r3, #0
 804265a:	77fb      	strb	r3, [r7, #31]
 804265c:	e0cc      	b.n	80427f8 <UART_SetConfig+0x348>
 804265e:	2302      	movs	r3, #2
 8042660:	77fb      	strb	r3, [r7, #31]
 8042662:	e0c9      	b.n	80427f8 <UART_SetConfig+0x348>
 8042664:	2304      	movs	r3, #4
 8042666:	77fb      	strb	r3, [r7, #31]
 8042668:	e0c6      	b.n	80427f8 <UART_SetConfig+0x348>
 804266a:	2308      	movs	r3, #8
 804266c:	77fb      	strb	r3, [r7, #31]
 804266e:	e0c3      	b.n	80427f8 <UART_SetConfig+0x348>
 8042670:	2310      	movs	r3, #16
 8042672:	77fb      	strb	r3, [r7, #31]
 8042674:	e0c0      	b.n	80427f8 <UART_SetConfig+0x348>
 8042676:	687b      	ldr	r3, [r7, #4]
 8042678:	681b      	ldr	r3, [r3, #0]
 804267a:	4a44      	ldr	r2, [pc, #272]	; (804278c <UART_SetConfig+0x2dc>)
 804267c:	4293      	cmp	r3, r2
 804267e:	d125      	bne.n	80426cc <UART_SetConfig+0x21c>
 8042680:	4b3e      	ldr	r3, [pc, #248]	; (804277c <UART_SetConfig+0x2cc>)
 8042682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804268a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804268e:	d017      	beq.n	80426c0 <UART_SetConfig+0x210>
 8042690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042694:	d817      	bhi.n	80426c6 <UART_SetConfig+0x216>
 8042696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804269a:	d00b      	beq.n	80426b4 <UART_SetConfig+0x204>
 804269c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80426a0:	d811      	bhi.n	80426c6 <UART_SetConfig+0x216>
 80426a2:	2b00      	cmp	r3, #0
 80426a4:	d003      	beq.n	80426ae <UART_SetConfig+0x1fe>
 80426a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80426aa:	d006      	beq.n	80426ba <UART_SetConfig+0x20a>
 80426ac:	e00b      	b.n	80426c6 <UART_SetConfig+0x216>
 80426ae:	2300      	movs	r3, #0
 80426b0:	77fb      	strb	r3, [r7, #31]
 80426b2:	e0a1      	b.n	80427f8 <UART_SetConfig+0x348>
 80426b4:	2302      	movs	r3, #2
 80426b6:	77fb      	strb	r3, [r7, #31]
 80426b8:	e09e      	b.n	80427f8 <UART_SetConfig+0x348>
 80426ba:	2304      	movs	r3, #4
 80426bc:	77fb      	strb	r3, [r7, #31]
 80426be:	e09b      	b.n	80427f8 <UART_SetConfig+0x348>
 80426c0:	2308      	movs	r3, #8
 80426c2:	77fb      	strb	r3, [r7, #31]
 80426c4:	e098      	b.n	80427f8 <UART_SetConfig+0x348>
 80426c6:	2310      	movs	r3, #16
 80426c8:	77fb      	strb	r3, [r7, #31]
 80426ca:	e095      	b.n	80427f8 <UART_SetConfig+0x348>
 80426cc:	687b      	ldr	r3, [r7, #4]
 80426ce:	681b      	ldr	r3, [r3, #0]
 80426d0:	4a2f      	ldr	r2, [pc, #188]	; (8042790 <UART_SetConfig+0x2e0>)
 80426d2:	4293      	cmp	r3, r2
 80426d4:	d125      	bne.n	8042722 <UART_SetConfig+0x272>
 80426d6:	4b29      	ldr	r3, [pc, #164]	; (804277c <UART_SetConfig+0x2cc>)
 80426d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80426dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80426e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80426e4:	d017      	beq.n	8042716 <UART_SetConfig+0x266>
 80426e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80426ea:	d817      	bhi.n	804271c <UART_SetConfig+0x26c>
 80426ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80426f0:	d00b      	beq.n	804270a <UART_SetConfig+0x25a>
 80426f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80426f6:	d811      	bhi.n	804271c <UART_SetConfig+0x26c>
 80426f8:	2b00      	cmp	r3, #0
 80426fa:	d003      	beq.n	8042704 <UART_SetConfig+0x254>
 80426fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8042700:	d006      	beq.n	8042710 <UART_SetConfig+0x260>
 8042702:	e00b      	b.n	804271c <UART_SetConfig+0x26c>
 8042704:	2301      	movs	r3, #1
 8042706:	77fb      	strb	r3, [r7, #31]
 8042708:	e076      	b.n	80427f8 <UART_SetConfig+0x348>
 804270a:	2302      	movs	r3, #2
 804270c:	77fb      	strb	r3, [r7, #31]
 804270e:	e073      	b.n	80427f8 <UART_SetConfig+0x348>
 8042710:	2304      	movs	r3, #4
 8042712:	77fb      	strb	r3, [r7, #31]
 8042714:	e070      	b.n	80427f8 <UART_SetConfig+0x348>
 8042716:	2308      	movs	r3, #8
 8042718:	77fb      	strb	r3, [r7, #31]
 804271a:	e06d      	b.n	80427f8 <UART_SetConfig+0x348>
 804271c:	2310      	movs	r3, #16
 804271e:	77fb      	strb	r3, [r7, #31]
 8042720:	e06a      	b.n	80427f8 <UART_SetConfig+0x348>
 8042722:	687b      	ldr	r3, [r7, #4]
 8042724:	681b      	ldr	r3, [r3, #0]
 8042726:	4a1b      	ldr	r2, [pc, #108]	; (8042794 <UART_SetConfig+0x2e4>)
 8042728:	4293      	cmp	r3, r2
 804272a:	d138      	bne.n	804279e <UART_SetConfig+0x2ee>
 804272c:	4b13      	ldr	r3, [pc, #76]	; (804277c <UART_SetConfig+0x2cc>)
 804272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042732:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8042736:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 804273a:	d017      	beq.n	804276c <UART_SetConfig+0x2bc>
 804273c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8042740:	d82a      	bhi.n	8042798 <UART_SetConfig+0x2e8>
 8042742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8042746:	d00b      	beq.n	8042760 <UART_SetConfig+0x2b0>
 8042748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804274c:	d824      	bhi.n	8042798 <UART_SetConfig+0x2e8>
 804274e:	2b00      	cmp	r3, #0
 8042750:	d003      	beq.n	804275a <UART_SetConfig+0x2aa>
 8042752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8042756:	d006      	beq.n	8042766 <UART_SetConfig+0x2b6>
 8042758:	e01e      	b.n	8042798 <UART_SetConfig+0x2e8>
 804275a:	2300      	movs	r3, #0
 804275c:	77fb      	strb	r3, [r7, #31]
 804275e:	e04b      	b.n	80427f8 <UART_SetConfig+0x348>
 8042760:	2302      	movs	r3, #2
 8042762:	77fb      	strb	r3, [r7, #31]
 8042764:	e048      	b.n	80427f8 <UART_SetConfig+0x348>
 8042766:	2304      	movs	r3, #4
 8042768:	77fb      	strb	r3, [r7, #31]
 804276a:	e045      	b.n	80427f8 <UART_SetConfig+0x348>
 804276c:	2308      	movs	r3, #8
 804276e:	77fb      	strb	r3, [r7, #31]
 8042770:	e042      	b.n	80427f8 <UART_SetConfig+0x348>
 8042772:	bf00      	nop
 8042774:	efff69f3 	.word	0xefff69f3
 8042778:	40011000 	.word	0x40011000
 804277c:	40023800 	.word	0x40023800
 8042780:	40004400 	.word	0x40004400
 8042784:	40004800 	.word	0x40004800
 8042788:	40004c00 	.word	0x40004c00
 804278c:	40005000 	.word	0x40005000
 8042790:	40011400 	.word	0x40011400
 8042794:	40007800 	.word	0x40007800
 8042798:	2310      	movs	r3, #16
 804279a:	77fb      	strb	r3, [r7, #31]
 804279c:	e02c      	b.n	80427f8 <UART_SetConfig+0x348>
 804279e:	687b      	ldr	r3, [r7, #4]
 80427a0:	681b      	ldr	r3, [r3, #0]
 80427a2:	4a72      	ldr	r2, [pc, #456]	; (804296c <UART_SetConfig+0x4bc>)
 80427a4:	4293      	cmp	r3, r2
 80427a6:	d125      	bne.n	80427f4 <UART_SetConfig+0x344>
 80427a8:	4b71      	ldr	r3, [pc, #452]	; (8042970 <UART_SetConfig+0x4c0>)
 80427aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80427ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80427b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80427b6:	d017      	beq.n	80427e8 <UART_SetConfig+0x338>
 80427b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80427bc:	d817      	bhi.n	80427ee <UART_SetConfig+0x33e>
 80427be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80427c2:	d00b      	beq.n	80427dc <UART_SetConfig+0x32c>
 80427c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80427c8:	d811      	bhi.n	80427ee <UART_SetConfig+0x33e>
 80427ca:	2b00      	cmp	r3, #0
 80427cc:	d003      	beq.n	80427d6 <UART_SetConfig+0x326>
 80427ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80427d2:	d006      	beq.n	80427e2 <UART_SetConfig+0x332>
 80427d4:	e00b      	b.n	80427ee <UART_SetConfig+0x33e>
 80427d6:	2300      	movs	r3, #0
 80427d8:	77fb      	strb	r3, [r7, #31]
 80427da:	e00d      	b.n	80427f8 <UART_SetConfig+0x348>
 80427dc:	2302      	movs	r3, #2
 80427de:	77fb      	strb	r3, [r7, #31]
 80427e0:	e00a      	b.n	80427f8 <UART_SetConfig+0x348>
 80427e2:	2304      	movs	r3, #4
 80427e4:	77fb      	strb	r3, [r7, #31]
 80427e6:	e007      	b.n	80427f8 <UART_SetConfig+0x348>
 80427e8:	2308      	movs	r3, #8
 80427ea:	77fb      	strb	r3, [r7, #31]
 80427ec:	e004      	b.n	80427f8 <UART_SetConfig+0x348>
 80427ee:	2310      	movs	r3, #16
 80427f0:	77fb      	strb	r3, [r7, #31]
 80427f2:	e001      	b.n	80427f8 <UART_SetConfig+0x348>
 80427f4:	2310      	movs	r3, #16
 80427f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80427f8:	687b      	ldr	r3, [r7, #4]
 80427fa:	69db      	ldr	r3, [r3, #28]
 80427fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8042800:	d15b      	bne.n	80428ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8042802:	7ffb      	ldrb	r3, [r7, #31]
 8042804:	2b08      	cmp	r3, #8
 8042806:	d828      	bhi.n	804285a <UART_SetConfig+0x3aa>
 8042808:	a201      	add	r2, pc, #4	; (adr r2, 8042810 <UART_SetConfig+0x360>)
 804280a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804280e:	bf00      	nop
 8042810:	08042835 	.word	0x08042835
 8042814:	0804283d 	.word	0x0804283d
 8042818:	08042845 	.word	0x08042845
 804281c:	0804285b 	.word	0x0804285b
 8042820:	0804284b 	.word	0x0804284b
 8042824:	0804285b 	.word	0x0804285b
 8042828:	0804285b 	.word	0x0804285b
 804282c:	0804285b 	.word	0x0804285b
 8042830:	08042853 	.word	0x08042853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042834:	f7ff f91a 	bl	8041a6c <HAL_RCC_GetPCLK1Freq>
 8042838:	61b8      	str	r0, [r7, #24]
        break;
 804283a:	e013      	b.n	8042864 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804283c:	f7ff f92a 	bl	8041a94 <HAL_RCC_GetPCLK2Freq>
 8042840:	61b8      	str	r0, [r7, #24]
        break;
 8042842:	e00f      	b.n	8042864 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042844:	4b4b      	ldr	r3, [pc, #300]	; (8042974 <UART_SetConfig+0x4c4>)
 8042846:	61bb      	str	r3, [r7, #24]
        break;
 8042848:	e00c      	b.n	8042864 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804284a:	f7ff f83d 	bl	80418c8 <HAL_RCC_GetSysClockFreq>
 804284e:	61b8      	str	r0, [r7, #24]
        break;
 8042850:	e008      	b.n	8042864 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8042856:	61bb      	str	r3, [r7, #24]
        break;
 8042858:	e004      	b.n	8042864 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 804285a:	2300      	movs	r3, #0
 804285c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 804285e:	2301      	movs	r3, #1
 8042860:	77bb      	strb	r3, [r7, #30]
        break;
 8042862:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8042864:	69bb      	ldr	r3, [r7, #24]
 8042866:	2b00      	cmp	r3, #0
 8042868:	d074      	beq.n	8042954 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 804286a:	69bb      	ldr	r3, [r7, #24]
 804286c:	005a      	lsls	r2, r3, #1
 804286e:	687b      	ldr	r3, [r7, #4]
 8042870:	685b      	ldr	r3, [r3, #4]
 8042872:	085b      	lsrs	r3, r3, #1
 8042874:	441a      	add	r2, r3
 8042876:	687b      	ldr	r3, [r7, #4]
 8042878:	685b      	ldr	r3, [r3, #4]
 804287a:	fbb2 f3f3 	udiv	r3, r2, r3
 804287e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8042880:	693b      	ldr	r3, [r7, #16]
 8042882:	2b0f      	cmp	r3, #15
 8042884:	d916      	bls.n	80428b4 <UART_SetConfig+0x404>
 8042886:	693b      	ldr	r3, [r7, #16]
 8042888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804288c:	d212      	bcs.n	80428b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 804288e:	693b      	ldr	r3, [r7, #16]
 8042890:	b29b      	uxth	r3, r3
 8042892:	f023 030f 	bic.w	r3, r3, #15
 8042896:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8042898:	693b      	ldr	r3, [r7, #16]
 804289a:	085b      	lsrs	r3, r3, #1
 804289c:	b29b      	uxth	r3, r3
 804289e:	f003 0307 	and.w	r3, r3, #7
 80428a2:	b29a      	uxth	r2, r3
 80428a4:	89fb      	ldrh	r3, [r7, #14]
 80428a6:	4313      	orrs	r3, r2
 80428a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80428aa:	687b      	ldr	r3, [r7, #4]
 80428ac:	681b      	ldr	r3, [r3, #0]
 80428ae:	89fa      	ldrh	r2, [r7, #14]
 80428b0:	60da      	str	r2, [r3, #12]
 80428b2:	e04f      	b.n	8042954 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80428b4:	2301      	movs	r3, #1
 80428b6:	77bb      	strb	r3, [r7, #30]
 80428b8:	e04c      	b.n	8042954 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80428ba:	7ffb      	ldrb	r3, [r7, #31]
 80428bc:	2b08      	cmp	r3, #8
 80428be:	d828      	bhi.n	8042912 <UART_SetConfig+0x462>
 80428c0:	a201      	add	r2, pc, #4	; (adr r2, 80428c8 <UART_SetConfig+0x418>)
 80428c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80428c6:	bf00      	nop
 80428c8:	080428ed 	.word	0x080428ed
 80428cc:	080428f5 	.word	0x080428f5
 80428d0:	080428fd 	.word	0x080428fd
 80428d4:	08042913 	.word	0x08042913
 80428d8:	08042903 	.word	0x08042903
 80428dc:	08042913 	.word	0x08042913
 80428e0:	08042913 	.word	0x08042913
 80428e4:	08042913 	.word	0x08042913
 80428e8:	0804290b 	.word	0x0804290b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80428ec:	f7ff f8be 	bl	8041a6c <HAL_RCC_GetPCLK1Freq>
 80428f0:	61b8      	str	r0, [r7, #24]
        break;
 80428f2:	e013      	b.n	804291c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80428f4:	f7ff f8ce 	bl	8041a94 <HAL_RCC_GetPCLK2Freq>
 80428f8:	61b8      	str	r0, [r7, #24]
        break;
 80428fa:	e00f      	b.n	804291c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80428fc:	4b1d      	ldr	r3, [pc, #116]	; (8042974 <UART_SetConfig+0x4c4>)
 80428fe:	61bb      	str	r3, [r7, #24]
        break;
 8042900:	e00c      	b.n	804291c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8042902:	f7fe ffe1 	bl	80418c8 <HAL_RCC_GetSysClockFreq>
 8042906:	61b8      	str	r0, [r7, #24]
        break;
 8042908:	e008      	b.n	804291c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804290a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804290e:	61bb      	str	r3, [r7, #24]
        break;
 8042910:	e004      	b.n	804291c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8042912:	2300      	movs	r3, #0
 8042914:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8042916:	2301      	movs	r3, #1
 8042918:	77bb      	strb	r3, [r7, #30]
        break;
 804291a:	bf00      	nop
    }

    if (pclk != 0U)
 804291c:	69bb      	ldr	r3, [r7, #24]
 804291e:	2b00      	cmp	r3, #0
 8042920:	d018      	beq.n	8042954 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8042922:	687b      	ldr	r3, [r7, #4]
 8042924:	685b      	ldr	r3, [r3, #4]
 8042926:	085a      	lsrs	r2, r3, #1
 8042928:	69bb      	ldr	r3, [r7, #24]
 804292a:	441a      	add	r2, r3
 804292c:	687b      	ldr	r3, [r7, #4]
 804292e:	685b      	ldr	r3, [r3, #4]
 8042930:	fbb2 f3f3 	udiv	r3, r2, r3
 8042934:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8042936:	693b      	ldr	r3, [r7, #16]
 8042938:	2b0f      	cmp	r3, #15
 804293a:	d909      	bls.n	8042950 <UART_SetConfig+0x4a0>
 804293c:	693b      	ldr	r3, [r7, #16]
 804293e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042942:	d205      	bcs.n	8042950 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8042944:	693b      	ldr	r3, [r7, #16]
 8042946:	b29a      	uxth	r2, r3
 8042948:	687b      	ldr	r3, [r7, #4]
 804294a:	681b      	ldr	r3, [r3, #0]
 804294c:	60da      	str	r2, [r3, #12]
 804294e:	e001      	b.n	8042954 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8042950:	2301      	movs	r3, #1
 8042952:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8042954:	687b      	ldr	r3, [r7, #4]
 8042956:	2200      	movs	r2, #0
 8042958:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 804295a:	687b      	ldr	r3, [r7, #4]
 804295c:	2200      	movs	r2, #0
 804295e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8042960:	7fbb      	ldrb	r3, [r7, #30]
}
 8042962:	4618      	mov	r0, r3
 8042964:	3720      	adds	r7, #32
 8042966:	46bd      	mov	sp, r7
 8042968:	bd80      	pop	{r7, pc}
 804296a:	bf00      	nop
 804296c:	40007c00 	.word	0x40007c00
 8042970:	40023800 	.word	0x40023800
 8042974:	00f42400 	.word	0x00f42400

08042978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8042978:	b480      	push	{r7}
 804297a:	b083      	sub	sp, #12
 804297c:	af00      	add	r7, sp, #0
 804297e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8042980:	687b      	ldr	r3, [r7, #4]
 8042982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042984:	f003 0301 	and.w	r3, r3, #1
 8042988:	2b00      	cmp	r3, #0
 804298a:	d00a      	beq.n	80429a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 804298c:	687b      	ldr	r3, [r7, #4]
 804298e:	681b      	ldr	r3, [r3, #0]
 8042990:	685b      	ldr	r3, [r3, #4]
 8042992:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8042996:	687b      	ldr	r3, [r7, #4]
 8042998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804299a:	687b      	ldr	r3, [r7, #4]
 804299c:	681b      	ldr	r3, [r3, #0]
 804299e:	430a      	orrs	r2, r1
 80429a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80429a2:	687b      	ldr	r3, [r7, #4]
 80429a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80429a6:	f003 0302 	and.w	r3, r3, #2
 80429aa:	2b00      	cmp	r3, #0
 80429ac:	d00a      	beq.n	80429c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80429ae:	687b      	ldr	r3, [r7, #4]
 80429b0:	681b      	ldr	r3, [r3, #0]
 80429b2:	685b      	ldr	r3, [r3, #4]
 80429b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80429b8:	687b      	ldr	r3, [r7, #4]
 80429ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80429bc:	687b      	ldr	r3, [r7, #4]
 80429be:	681b      	ldr	r3, [r3, #0]
 80429c0:	430a      	orrs	r2, r1
 80429c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80429c4:	687b      	ldr	r3, [r7, #4]
 80429c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80429c8:	f003 0304 	and.w	r3, r3, #4
 80429cc:	2b00      	cmp	r3, #0
 80429ce:	d00a      	beq.n	80429e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80429d0:	687b      	ldr	r3, [r7, #4]
 80429d2:	681b      	ldr	r3, [r3, #0]
 80429d4:	685b      	ldr	r3, [r3, #4]
 80429d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80429da:	687b      	ldr	r3, [r7, #4]
 80429dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80429de:	687b      	ldr	r3, [r7, #4]
 80429e0:	681b      	ldr	r3, [r3, #0]
 80429e2:	430a      	orrs	r2, r1
 80429e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80429e6:	687b      	ldr	r3, [r7, #4]
 80429e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80429ea:	f003 0308 	and.w	r3, r3, #8
 80429ee:	2b00      	cmp	r3, #0
 80429f0:	d00a      	beq.n	8042a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80429f2:	687b      	ldr	r3, [r7, #4]
 80429f4:	681b      	ldr	r3, [r3, #0]
 80429f6:	685b      	ldr	r3, [r3, #4]
 80429f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80429fc:	687b      	ldr	r3, [r7, #4]
 80429fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8042a00:	687b      	ldr	r3, [r7, #4]
 8042a02:	681b      	ldr	r3, [r3, #0]
 8042a04:	430a      	orrs	r2, r1
 8042a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8042a08:	687b      	ldr	r3, [r7, #4]
 8042a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042a0c:	f003 0310 	and.w	r3, r3, #16
 8042a10:	2b00      	cmp	r3, #0
 8042a12:	d00a      	beq.n	8042a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8042a14:	687b      	ldr	r3, [r7, #4]
 8042a16:	681b      	ldr	r3, [r3, #0]
 8042a18:	689b      	ldr	r3, [r3, #8]
 8042a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8042a1e:	687b      	ldr	r3, [r7, #4]
 8042a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8042a22:	687b      	ldr	r3, [r7, #4]
 8042a24:	681b      	ldr	r3, [r3, #0]
 8042a26:	430a      	orrs	r2, r1
 8042a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8042a2a:	687b      	ldr	r3, [r7, #4]
 8042a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042a2e:	f003 0320 	and.w	r3, r3, #32
 8042a32:	2b00      	cmp	r3, #0
 8042a34:	d00a      	beq.n	8042a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8042a36:	687b      	ldr	r3, [r7, #4]
 8042a38:	681b      	ldr	r3, [r3, #0]
 8042a3a:	689b      	ldr	r3, [r3, #8]
 8042a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8042a40:	687b      	ldr	r3, [r7, #4]
 8042a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8042a44:	687b      	ldr	r3, [r7, #4]
 8042a46:	681b      	ldr	r3, [r3, #0]
 8042a48:	430a      	orrs	r2, r1
 8042a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8042a4c:	687b      	ldr	r3, [r7, #4]
 8042a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042a54:	2b00      	cmp	r3, #0
 8042a56:	d01a      	beq.n	8042a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8042a58:	687b      	ldr	r3, [r7, #4]
 8042a5a:	681b      	ldr	r3, [r3, #0]
 8042a5c:	685b      	ldr	r3, [r3, #4]
 8042a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8042a62:	687b      	ldr	r3, [r7, #4]
 8042a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8042a66:	687b      	ldr	r3, [r7, #4]
 8042a68:	681b      	ldr	r3, [r3, #0]
 8042a6a:	430a      	orrs	r2, r1
 8042a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8042a6e:	687b      	ldr	r3, [r7, #4]
 8042a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042a76:	d10a      	bne.n	8042a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8042a78:	687b      	ldr	r3, [r7, #4]
 8042a7a:	681b      	ldr	r3, [r3, #0]
 8042a7c:	685b      	ldr	r3, [r3, #4]
 8042a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8042a82:	687b      	ldr	r3, [r7, #4]
 8042a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8042a86:	687b      	ldr	r3, [r7, #4]
 8042a88:	681b      	ldr	r3, [r3, #0]
 8042a8a:	430a      	orrs	r2, r1
 8042a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8042a8e:	687b      	ldr	r3, [r7, #4]
 8042a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042a96:	2b00      	cmp	r3, #0
 8042a98:	d00a      	beq.n	8042ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8042a9a:	687b      	ldr	r3, [r7, #4]
 8042a9c:	681b      	ldr	r3, [r3, #0]
 8042a9e:	685b      	ldr	r3, [r3, #4]
 8042aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8042aa4:	687b      	ldr	r3, [r7, #4]
 8042aa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8042aa8:	687b      	ldr	r3, [r7, #4]
 8042aaa:	681b      	ldr	r3, [r3, #0]
 8042aac:	430a      	orrs	r2, r1
 8042aae:	605a      	str	r2, [r3, #4]
  }
}
 8042ab0:	bf00      	nop
 8042ab2:	370c      	adds	r7, #12
 8042ab4:	46bd      	mov	sp, r7
 8042ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042aba:	4770      	bx	lr

08042abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8042abc:	b580      	push	{r7, lr}
 8042abe:	b086      	sub	sp, #24
 8042ac0:	af02      	add	r7, sp, #8
 8042ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042ac4:	687b      	ldr	r3, [r7, #4]
 8042ac6:	2200      	movs	r2, #0
 8042ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8042acc:	f7fe f86c 	bl	8040ba8 <HAL_GetTick>
 8042ad0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8042ad2:	687b      	ldr	r3, [r7, #4]
 8042ad4:	681b      	ldr	r3, [r3, #0]
 8042ad6:	681b      	ldr	r3, [r3, #0]
 8042ad8:	f003 0308 	and.w	r3, r3, #8
 8042adc:	2b08      	cmp	r3, #8
 8042ade:	d10e      	bne.n	8042afe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8042ae4:	9300      	str	r3, [sp, #0]
 8042ae6:	68fb      	ldr	r3, [r7, #12]
 8042ae8:	2200      	movs	r2, #0
 8042aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8042aee:	6878      	ldr	r0, [r7, #4]
 8042af0:	f000 f831 	bl	8042b56 <UART_WaitOnFlagUntilTimeout>
 8042af4:	4603      	mov	r3, r0
 8042af6:	2b00      	cmp	r3, #0
 8042af8:	d001      	beq.n	8042afe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042afa:	2303      	movs	r3, #3
 8042afc:	e027      	b.n	8042b4e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8042afe:	687b      	ldr	r3, [r7, #4]
 8042b00:	681b      	ldr	r3, [r3, #0]
 8042b02:	681b      	ldr	r3, [r3, #0]
 8042b04:	f003 0304 	and.w	r3, r3, #4
 8042b08:	2b04      	cmp	r3, #4
 8042b0a:	d10e      	bne.n	8042b2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042b0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8042b10:	9300      	str	r3, [sp, #0]
 8042b12:	68fb      	ldr	r3, [r7, #12]
 8042b14:	2200      	movs	r2, #0
 8042b16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8042b1a:	6878      	ldr	r0, [r7, #4]
 8042b1c:	f000 f81b 	bl	8042b56 <UART_WaitOnFlagUntilTimeout>
 8042b20:	4603      	mov	r3, r0
 8042b22:	2b00      	cmp	r3, #0
 8042b24:	d001      	beq.n	8042b2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042b26:	2303      	movs	r3, #3
 8042b28:	e011      	b.n	8042b4e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8042b2a:	687b      	ldr	r3, [r7, #4]
 8042b2c:	2220      	movs	r2, #32
 8042b2e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8042b30:	687b      	ldr	r3, [r7, #4]
 8042b32:	2220      	movs	r2, #32
 8042b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042b38:	687b      	ldr	r3, [r7, #4]
 8042b3a:	2200      	movs	r2, #0
 8042b3c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8042b3e:	687b      	ldr	r3, [r7, #4]
 8042b40:	2200      	movs	r2, #0
 8042b42:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8042b44:	687b      	ldr	r3, [r7, #4]
 8042b46:	2200      	movs	r2, #0
 8042b48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8042b4c:	2300      	movs	r3, #0
}
 8042b4e:	4618      	mov	r0, r3
 8042b50:	3710      	adds	r7, #16
 8042b52:	46bd      	mov	sp, r7
 8042b54:	bd80      	pop	{r7, pc}

08042b56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8042b56:	b580      	push	{r7, lr}
 8042b58:	b09c      	sub	sp, #112	; 0x70
 8042b5a:	af00      	add	r7, sp, #0
 8042b5c:	60f8      	str	r0, [r7, #12]
 8042b5e:	60b9      	str	r1, [r7, #8]
 8042b60:	603b      	str	r3, [r7, #0]
 8042b62:	4613      	mov	r3, r2
 8042b64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042b66:	e0a7      	b.n	8042cb8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8042b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042b6e:	f000 80a3 	beq.w	8042cb8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8042b72:	f7fe f819 	bl	8040ba8 <HAL_GetTick>
 8042b76:	4602      	mov	r2, r0
 8042b78:	683b      	ldr	r3, [r7, #0]
 8042b7a:	1ad3      	subs	r3, r2, r3
 8042b7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8042b7e:	429a      	cmp	r2, r3
 8042b80:	d302      	bcc.n	8042b88 <UART_WaitOnFlagUntilTimeout+0x32>
 8042b82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8042b84:	2b00      	cmp	r3, #0
 8042b86:	d13f      	bne.n	8042c08 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8042b88:	68fb      	ldr	r3, [r7, #12]
 8042b8a:	681b      	ldr	r3, [r3, #0]
 8042b8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8042b90:	e853 3f00 	ldrex	r3, [r3]
 8042b94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8042b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8042b98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8042b9c:	667b      	str	r3, [r7, #100]	; 0x64
 8042b9e:	68fb      	ldr	r3, [r7, #12]
 8042ba0:	681b      	ldr	r3, [r3, #0]
 8042ba2:	461a      	mov	r2, r3
 8042ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8042ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8042ba8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042baa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8042bac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8042bae:	e841 2300 	strex	r3, r2, [r1]
 8042bb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8042bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8042bb6:	2b00      	cmp	r3, #0
 8042bb8:	d1e6      	bne.n	8042b88 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042bba:	68fb      	ldr	r3, [r7, #12]
 8042bbc:	681b      	ldr	r3, [r3, #0]
 8042bbe:	3308      	adds	r3, #8
 8042bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8042bc4:	e853 3f00 	ldrex	r3, [r3]
 8042bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8042bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8042bcc:	f023 0301 	bic.w	r3, r3, #1
 8042bd0:	663b      	str	r3, [r7, #96]	; 0x60
 8042bd2:	68fb      	ldr	r3, [r7, #12]
 8042bd4:	681b      	ldr	r3, [r3, #0]
 8042bd6:	3308      	adds	r3, #8
 8042bd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8042bda:	64ba      	str	r2, [r7, #72]	; 0x48
 8042bdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042bde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8042be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8042be2:	e841 2300 	strex	r3, r2, [r1]
 8042be6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8042be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8042bea:	2b00      	cmp	r3, #0
 8042bec:	d1e5      	bne.n	8042bba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8042bee:	68fb      	ldr	r3, [r7, #12]
 8042bf0:	2220      	movs	r2, #32
 8042bf2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8042bf4:	68fb      	ldr	r3, [r7, #12]
 8042bf6:	2220      	movs	r2, #32
 8042bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8042bfc:	68fb      	ldr	r3, [r7, #12]
 8042bfe:	2200      	movs	r2, #0
 8042c00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8042c04:	2303      	movs	r3, #3
 8042c06:	e068      	b.n	8042cda <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8042c08:	68fb      	ldr	r3, [r7, #12]
 8042c0a:	681b      	ldr	r3, [r3, #0]
 8042c0c:	681b      	ldr	r3, [r3, #0]
 8042c0e:	f003 0304 	and.w	r3, r3, #4
 8042c12:	2b00      	cmp	r3, #0
 8042c14:	d050      	beq.n	8042cb8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8042c16:	68fb      	ldr	r3, [r7, #12]
 8042c18:	681b      	ldr	r3, [r3, #0]
 8042c1a:	69db      	ldr	r3, [r3, #28]
 8042c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8042c24:	d148      	bne.n	8042cb8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8042c26:	68fb      	ldr	r3, [r7, #12]
 8042c28:	681b      	ldr	r3, [r3, #0]
 8042c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042c2e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8042c30:	68fb      	ldr	r3, [r7, #12]
 8042c32:	681b      	ldr	r3, [r3, #0]
 8042c34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8042c38:	e853 3f00 	ldrex	r3, [r3]
 8042c3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8042c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042c40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8042c44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8042c46:	68fb      	ldr	r3, [r7, #12]
 8042c48:	681b      	ldr	r3, [r3, #0]
 8042c4a:	461a      	mov	r2, r3
 8042c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8042c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8042c50:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042c52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8042c54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8042c56:	e841 2300 	strex	r3, r2, [r1]
 8042c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8042c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8042c5e:	2b00      	cmp	r3, #0
 8042c60:	d1e6      	bne.n	8042c30 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042c62:	68fb      	ldr	r3, [r7, #12]
 8042c64:	681b      	ldr	r3, [r3, #0]
 8042c66:	3308      	adds	r3, #8
 8042c68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042c6a:	697b      	ldr	r3, [r7, #20]
 8042c6c:	e853 3f00 	ldrex	r3, [r3]
 8042c70:	613b      	str	r3, [r7, #16]
   return(result);
 8042c72:	693b      	ldr	r3, [r7, #16]
 8042c74:	f023 0301 	bic.w	r3, r3, #1
 8042c78:	66bb      	str	r3, [r7, #104]	; 0x68
 8042c7a:	68fb      	ldr	r3, [r7, #12]
 8042c7c:	681b      	ldr	r3, [r3, #0]
 8042c7e:	3308      	adds	r3, #8
 8042c80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8042c82:	623a      	str	r2, [r7, #32]
 8042c84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042c86:	69f9      	ldr	r1, [r7, #28]
 8042c88:	6a3a      	ldr	r2, [r7, #32]
 8042c8a:	e841 2300 	strex	r3, r2, [r1]
 8042c8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8042c90:	69bb      	ldr	r3, [r7, #24]
 8042c92:	2b00      	cmp	r3, #0
 8042c94:	d1e5      	bne.n	8042c62 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8042c96:	68fb      	ldr	r3, [r7, #12]
 8042c98:	2220      	movs	r2, #32
 8042c9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8042c9c:	68fb      	ldr	r3, [r7, #12]
 8042c9e:	2220      	movs	r2, #32
 8042ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8042ca4:	68fb      	ldr	r3, [r7, #12]
 8042ca6:	2220      	movs	r2, #32
 8042ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8042cac:	68fb      	ldr	r3, [r7, #12]
 8042cae:	2200      	movs	r2, #0
 8042cb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8042cb4:	2303      	movs	r3, #3
 8042cb6:	e010      	b.n	8042cda <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042cb8:	68fb      	ldr	r3, [r7, #12]
 8042cba:	681b      	ldr	r3, [r3, #0]
 8042cbc:	69da      	ldr	r2, [r3, #28]
 8042cbe:	68bb      	ldr	r3, [r7, #8]
 8042cc0:	4013      	ands	r3, r2
 8042cc2:	68ba      	ldr	r2, [r7, #8]
 8042cc4:	429a      	cmp	r2, r3
 8042cc6:	bf0c      	ite	eq
 8042cc8:	2301      	moveq	r3, #1
 8042cca:	2300      	movne	r3, #0
 8042ccc:	b2db      	uxtb	r3, r3
 8042cce:	461a      	mov	r2, r3
 8042cd0:	79fb      	ldrb	r3, [r7, #7]
 8042cd2:	429a      	cmp	r2, r3
 8042cd4:	f43f af48 	beq.w	8042b68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8042cd8:	2300      	movs	r3, #0
}
 8042cda:	4618      	mov	r0, r3
 8042cdc:	3770      	adds	r7, #112	; 0x70
 8042cde:	46bd      	mov	sp, r7
 8042ce0:	bd80      	pop	{r7, pc}
	...

08042ce4 <__errno>:
 8042ce4:	4b01      	ldr	r3, [pc, #4]	; (8042cec <__errno+0x8>)
 8042ce6:	6818      	ldr	r0, [r3, #0]
 8042ce8:	4770      	bx	lr
 8042cea:	bf00      	nop
 8042cec:	2000000c 	.word	0x2000000c

08042cf0 <__libc_init_array>:
 8042cf0:	b570      	push	{r4, r5, r6, lr}
 8042cf2:	4d0d      	ldr	r5, [pc, #52]	; (8042d28 <__libc_init_array+0x38>)
 8042cf4:	4c0d      	ldr	r4, [pc, #52]	; (8042d2c <__libc_init_array+0x3c>)
 8042cf6:	1b64      	subs	r4, r4, r5
 8042cf8:	10a4      	asrs	r4, r4, #2
 8042cfa:	2600      	movs	r6, #0
 8042cfc:	42a6      	cmp	r6, r4
 8042cfe:	d109      	bne.n	8042d14 <__libc_init_array+0x24>
 8042d00:	4d0b      	ldr	r5, [pc, #44]	; (8042d30 <__libc_init_array+0x40>)
 8042d02:	4c0c      	ldr	r4, [pc, #48]	; (8042d34 <__libc_init_array+0x44>)
 8042d04:	f000 ffae 	bl	8043c64 <_init>
 8042d08:	1b64      	subs	r4, r4, r5
 8042d0a:	10a4      	asrs	r4, r4, #2
 8042d0c:	2600      	movs	r6, #0
 8042d0e:	42a6      	cmp	r6, r4
 8042d10:	d105      	bne.n	8042d1e <__libc_init_array+0x2e>
 8042d12:	bd70      	pop	{r4, r5, r6, pc}
 8042d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8042d18:	4798      	blx	r3
 8042d1a:	3601      	adds	r6, #1
 8042d1c:	e7ee      	b.n	8042cfc <__libc_init_array+0xc>
 8042d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8042d22:	4798      	blx	r3
 8042d24:	3601      	adds	r6, #1
 8042d26:	e7f2      	b.n	8042d0e <__libc_init_array+0x1e>
 8042d28:	08043d58 	.word	0x08043d58
 8042d2c:	08043d58 	.word	0x08043d58
 8042d30:	08043d58 	.word	0x08043d58
 8042d34:	08043d5c 	.word	0x08043d5c

08042d38 <memset>:
 8042d38:	4402      	add	r2, r0
 8042d3a:	4603      	mov	r3, r0
 8042d3c:	4293      	cmp	r3, r2
 8042d3e:	d100      	bne.n	8042d42 <memset+0xa>
 8042d40:	4770      	bx	lr
 8042d42:	f803 1b01 	strb.w	r1, [r3], #1
 8042d46:	e7f9      	b.n	8042d3c <memset+0x4>

08042d48 <iprintf>:
 8042d48:	b40f      	push	{r0, r1, r2, r3}
 8042d4a:	4b0a      	ldr	r3, [pc, #40]	; (8042d74 <iprintf+0x2c>)
 8042d4c:	b513      	push	{r0, r1, r4, lr}
 8042d4e:	681c      	ldr	r4, [r3, #0]
 8042d50:	b124      	cbz	r4, 8042d5c <iprintf+0x14>
 8042d52:	69a3      	ldr	r3, [r4, #24]
 8042d54:	b913      	cbnz	r3, 8042d5c <iprintf+0x14>
 8042d56:	4620      	mov	r0, r4
 8042d58:	f000 f866 	bl	8042e28 <__sinit>
 8042d5c:	ab05      	add	r3, sp, #20
 8042d5e:	9a04      	ldr	r2, [sp, #16]
 8042d60:	68a1      	ldr	r1, [r4, #8]
 8042d62:	9301      	str	r3, [sp, #4]
 8042d64:	4620      	mov	r0, r4
 8042d66:	f000 f9bd 	bl	80430e4 <_vfiprintf_r>
 8042d6a:	b002      	add	sp, #8
 8042d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8042d70:	b004      	add	sp, #16
 8042d72:	4770      	bx	lr
 8042d74:	2000000c 	.word	0x2000000c

08042d78 <std>:
 8042d78:	2300      	movs	r3, #0
 8042d7a:	b510      	push	{r4, lr}
 8042d7c:	4604      	mov	r4, r0
 8042d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8042d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8042d86:	6083      	str	r3, [r0, #8]
 8042d88:	8181      	strh	r1, [r0, #12]
 8042d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8042d8c:	81c2      	strh	r2, [r0, #14]
 8042d8e:	6183      	str	r3, [r0, #24]
 8042d90:	4619      	mov	r1, r3
 8042d92:	2208      	movs	r2, #8
 8042d94:	305c      	adds	r0, #92	; 0x5c
 8042d96:	f7ff ffcf 	bl	8042d38 <memset>
 8042d9a:	4b05      	ldr	r3, [pc, #20]	; (8042db0 <std+0x38>)
 8042d9c:	6263      	str	r3, [r4, #36]	; 0x24
 8042d9e:	4b05      	ldr	r3, [pc, #20]	; (8042db4 <std+0x3c>)
 8042da0:	62a3      	str	r3, [r4, #40]	; 0x28
 8042da2:	4b05      	ldr	r3, [pc, #20]	; (8042db8 <std+0x40>)
 8042da4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8042da6:	4b05      	ldr	r3, [pc, #20]	; (8042dbc <std+0x44>)
 8042da8:	6224      	str	r4, [r4, #32]
 8042daa:	6323      	str	r3, [r4, #48]	; 0x30
 8042dac:	bd10      	pop	{r4, pc}
 8042dae:	bf00      	nop
 8042db0:	0804368d 	.word	0x0804368d
 8042db4:	080436af 	.word	0x080436af
 8042db8:	080436e7 	.word	0x080436e7
 8042dbc:	0804370b 	.word	0x0804370b

08042dc0 <_cleanup_r>:
 8042dc0:	4901      	ldr	r1, [pc, #4]	; (8042dc8 <_cleanup_r+0x8>)
 8042dc2:	f000 b8af 	b.w	8042f24 <_fwalk_reent>
 8042dc6:	bf00      	nop
 8042dc8:	080439e5 	.word	0x080439e5

08042dcc <__sfmoreglue>:
 8042dcc:	b570      	push	{r4, r5, r6, lr}
 8042dce:	2268      	movs	r2, #104	; 0x68
 8042dd0:	1e4d      	subs	r5, r1, #1
 8042dd2:	4355      	muls	r5, r2
 8042dd4:	460e      	mov	r6, r1
 8042dd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8042dda:	f000 f8e5 	bl	8042fa8 <_malloc_r>
 8042dde:	4604      	mov	r4, r0
 8042de0:	b140      	cbz	r0, 8042df4 <__sfmoreglue+0x28>
 8042de2:	2100      	movs	r1, #0
 8042de4:	e9c0 1600 	strd	r1, r6, [r0]
 8042de8:	300c      	adds	r0, #12
 8042dea:	60a0      	str	r0, [r4, #8]
 8042dec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8042df0:	f7ff ffa2 	bl	8042d38 <memset>
 8042df4:	4620      	mov	r0, r4
 8042df6:	bd70      	pop	{r4, r5, r6, pc}

08042df8 <__sfp_lock_acquire>:
 8042df8:	4801      	ldr	r0, [pc, #4]	; (8042e00 <__sfp_lock_acquire+0x8>)
 8042dfa:	f000 b8b3 	b.w	8042f64 <__retarget_lock_acquire_recursive>
 8042dfe:	bf00      	nop
 8042e00:	2000011d 	.word	0x2000011d

08042e04 <__sfp_lock_release>:
 8042e04:	4801      	ldr	r0, [pc, #4]	; (8042e0c <__sfp_lock_release+0x8>)
 8042e06:	f000 b8ae 	b.w	8042f66 <__retarget_lock_release_recursive>
 8042e0a:	bf00      	nop
 8042e0c:	2000011d 	.word	0x2000011d

08042e10 <__sinit_lock_acquire>:
 8042e10:	4801      	ldr	r0, [pc, #4]	; (8042e18 <__sinit_lock_acquire+0x8>)
 8042e12:	f000 b8a7 	b.w	8042f64 <__retarget_lock_acquire_recursive>
 8042e16:	bf00      	nop
 8042e18:	2000011e 	.word	0x2000011e

08042e1c <__sinit_lock_release>:
 8042e1c:	4801      	ldr	r0, [pc, #4]	; (8042e24 <__sinit_lock_release+0x8>)
 8042e1e:	f000 b8a2 	b.w	8042f66 <__retarget_lock_release_recursive>
 8042e22:	bf00      	nop
 8042e24:	2000011e 	.word	0x2000011e

08042e28 <__sinit>:
 8042e28:	b510      	push	{r4, lr}
 8042e2a:	4604      	mov	r4, r0
 8042e2c:	f7ff fff0 	bl	8042e10 <__sinit_lock_acquire>
 8042e30:	69a3      	ldr	r3, [r4, #24]
 8042e32:	b11b      	cbz	r3, 8042e3c <__sinit+0x14>
 8042e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8042e38:	f7ff bff0 	b.w	8042e1c <__sinit_lock_release>
 8042e3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8042e40:	6523      	str	r3, [r4, #80]	; 0x50
 8042e42:	4b13      	ldr	r3, [pc, #76]	; (8042e90 <__sinit+0x68>)
 8042e44:	4a13      	ldr	r2, [pc, #76]	; (8042e94 <__sinit+0x6c>)
 8042e46:	681b      	ldr	r3, [r3, #0]
 8042e48:	62a2      	str	r2, [r4, #40]	; 0x28
 8042e4a:	42a3      	cmp	r3, r4
 8042e4c:	bf04      	itt	eq
 8042e4e:	2301      	moveq	r3, #1
 8042e50:	61a3      	streq	r3, [r4, #24]
 8042e52:	4620      	mov	r0, r4
 8042e54:	f000 f820 	bl	8042e98 <__sfp>
 8042e58:	6060      	str	r0, [r4, #4]
 8042e5a:	4620      	mov	r0, r4
 8042e5c:	f000 f81c 	bl	8042e98 <__sfp>
 8042e60:	60a0      	str	r0, [r4, #8]
 8042e62:	4620      	mov	r0, r4
 8042e64:	f000 f818 	bl	8042e98 <__sfp>
 8042e68:	2200      	movs	r2, #0
 8042e6a:	60e0      	str	r0, [r4, #12]
 8042e6c:	2104      	movs	r1, #4
 8042e6e:	6860      	ldr	r0, [r4, #4]
 8042e70:	f7ff ff82 	bl	8042d78 <std>
 8042e74:	68a0      	ldr	r0, [r4, #8]
 8042e76:	2201      	movs	r2, #1
 8042e78:	2109      	movs	r1, #9
 8042e7a:	f7ff ff7d 	bl	8042d78 <std>
 8042e7e:	68e0      	ldr	r0, [r4, #12]
 8042e80:	2202      	movs	r2, #2
 8042e82:	2112      	movs	r1, #18
 8042e84:	f7ff ff78 	bl	8042d78 <std>
 8042e88:	2301      	movs	r3, #1
 8042e8a:	61a3      	str	r3, [r4, #24]
 8042e8c:	e7d2      	b.n	8042e34 <__sinit+0xc>
 8042e8e:	bf00      	nop
 8042e90:	08043cb8 	.word	0x08043cb8
 8042e94:	08042dc1 	.word	0x08042dc1

08042e98 <__sfp>:
 8042e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042e9a:	4607      	mov	r7, r0
 8042e9c:	f7ff ffac 	bl	8042df8 <__sfp_lock_acquire>
 8042ea0:	4b1e      	ldr	r3, [pc, #120]	; (8042f1c <__sfp+0x84>)
 8042ea2:	681e      	ldr	r6, [r3, #0]
 8042ea4:	69b3      	ldr	r3, [r6, #24]
 8042ea6:	b913      	cbnz	r3, 8042eae <__sfp+0x16>
 8042ea8:	4630      	mov	r0, r6
 8042eaa:	f7ff ffbd 	bl	8042e28 <__sinit>
 8042eae:	3648      	adds	r6, #72	; 0x48
 8042eb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8042eb4:	3b01      	subs	r3, #1
 8042eb6:	d503      	bpl.n	8042ec0 <__sfp+0x28>
 8042eb8:	6833      	ldr	r3, [r6, #0]
 8042eba:	b30b      	cbz	r3, 8042f00 <__sfp+0x68>
 8042ebc:	6836      	ldr	r6, [r6, #0]
 8042ebe:	e7f7      	b.n	8042eb0 <__sfp+0x18>
 8042ec0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8042ec4:	b9d5      	cbnz	r5, 8042efc <__sfp+0x64>
 8042ec6:	4b16      	ldr	r3, [pc, #88]	; (8042f20 <__sfp+0x88>)
 8042ec8:	60e3      	str	r3, [r4, #12]
 8042eca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8042ece:	6665      	str	r5, [r4, #100]	; 0x64
 8042ed0:	f000 f847 	bl	8042f62 <__retarget_lock_init_recursive>
 8042ed4:	f7ff ff96 	bl	8042e04 <__sfp_lock_release>
 8042ed8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8042edc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8042ee0:	6025      	str	r5, [r4, #0]
 8042ee2:	61a5      	str	r5, [r4, #24]
 8042ee4:	2208      	movs	r2, #8
 8042ee6:	4629      	mov	r1, r5
 8042ee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8042eec:	f7ff ff24 	bl	8042d38 <memset>
 8042ef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8042ef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8042ef8:	4620      	mov	r0, r4
 8042efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8042efc:	3468      	adds	r4, #104	; 0x68
 8042efe:	e7d9      	b.n	8042eb4 <__sfp+0x1c>
 8042f00:	2104      	movs	r1, #4
 8042f02:	4638      	mov	r0, r7
 8042f04:	f7ff ff62 	bl	8042dcc <__sfmoreglue>
 8042f08:	4604      	mov	r4, r0
 8042f0a:	6030      	str	r0, [r6, #0]
 8042f0c:	2800      	cmp	r0, #0
 8042f0e:	d1d5      	bne.n	8042ebc <__sfp+0x24>
 8042f10:	f7ff ff78 	bl	8042e04 <__sfp_lock_release>
 8042f14:	230c      	movs	r3, #12
 8042f16:	603b      	str	r3, [r7, #0]
 8042f18:	e7ee      	b.n	8042ef8 <__sfp+0x60>
 8042f1a:	bf00      	nop
 8042f1c:	08043cb8 	.word	0x08043cb8
 8042f20:	ffff0001 	.word	0xffff0001

08042f24 <_fwalk_reent>:
 8042f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8042f28:	4606      	mov	r6, r0
 8042f2a:	4688      	mov	r8, r1
 8042f2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8042f30:	2700      	movs	r7, #0
 8042f32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8042f36:	f1b9 0901 	subs.w	r9, r9, #1
 8042f3a:	d505      	bpl.n	8042f48 <_fwalk_reent+0x24>
 8042f3c:	6824      	ldr	r4, [r4, #0]
 8042f3e:	2c00      	cmp	r4, #0
 8042f40:	d1f7      	bne.n	8042f32 <_fwalk_reent+0xe>
 8042f42:	4638      	mov	r0, r7
 8042f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8042f48:	89ab      	ldrh	r3, [r5, #12]
 8042f4a:	2b01      	cmp	r3, #1
 8042f4c:	d907      	bls.n	8042f5e <_fwalk_reent+0x3a>
 8042f4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8042f52:	3301      	adds	r3, #1
 8042f54:	d003      	beq.n	8042f5e <_fwalk_reent+0x3a>
 8042f56:	4629      	mov	r1, r5
 8042f58:	4630      	mov	r0, r6
 8042f5a:	47c0      	blx	r8
 8042f5c:	4307      	orrs	r7, r0
 8042f5e:	3568      	adds	r5, #104	; 0x68
 8042f60:	e7e9      	b.n	8042f36 <_fwalk_reent+0x12>

08042f62 <__retarget_lock_init_recursive>:
 8042f62:	4770      	bx	lr

08042f64 <__retarget_lock_acquire_recursive>:
 8042f64:	4770      	bx	lr

08042f66 <__retarget_lock_release_recursive>:
 8042f66:	4770      	bx	lr

08042f68 <sbrk_aligned>:
 8042f68:	b570      	push	{r4, r5, r6, lr}
 8042f6a:	4e0e      	ldr	r6, [pc, #56]	; (8042fa4 <sbrk_aligned+0x3c>)
 8042f6c:	460c      	mov	r4, r1
 8042f6e:	6831      	ldr	r1, [r6, #0]
 8042f70:	4605      	mov	r5, r0
 8042f72:	b911      	cbnz	r1, 8042f7a <sbrk_aligned+0x12>
 8042f74:	f000 fb7a 	bl	804366c <_sbrk_r>
 8042f78:	6030      	str	r0, [r6, #0]
 8042f7a:	4621      	mov	r1, r4
 8042f7c:	4628      	mov	r0, r5
 8042f7e:	f000 fb75 	bl	804366c <_sbrk_r>
 8042f82:	1c43      	adds	r3, r0, #1
 8042f84:	d00a      	beq.n	8042f9c <sbrk_aligned+0x34>
 8042f86:	1cc4      	adds	r4, r0, #3
 8042f88:	f024 0403 	bic.w	r4, r4, #3
 8042f8c:	42a0      	cmp	r0, r4
 8042f8e:	d007      	beq.n	8042fa0 <sbrk_aligned+0x38>
 8042f90:	1a21      	subs	r1, r4, r0
 8042f92:	4628      	mov	r0, r5
 8042f94:	f000 fb6a 	bl	804366c <_sbrk_r>
 8042f98:	3001      	adds	r0, #1
 8042f9a:	d101      	bne.n	8042fa0 <sbrk_aligned+0x38>
 8042f9c:	f04f 34ff 	mov.w	r4, #4294967295
 8042fa0:	4620      	mov	r0, r4
 8042fa2:	bd70      	pop	{r4, r5, r6, pc}
 8042fa4:	20000124 	.word	0x20000124

08042fa8 <_malloc_r>:
 8042fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8042fac:	1ccd      	adds	r5, r1, #3
 8042fae:	f025 0503 	bic.w	r5, r5, #3
 8042fb2:	3508      	adds	r5, #8
 8042fb4:	2d0c      	cmp	r5, #12
 8042fb6:	bf38      	it	cc
 8042fb8:	250c      	movcc	r5, #12
 8042fba:	2d00      	cmp	r5, #0
 8042fbc:	4607      	mov	r7, r0
 8042fbe:	db01      	blt.n	8042fc4 <_malloc_r+0x1c>
 8042fc0:	42a9      	cmp	r1, r5
 8042fc2:	d905      	bls.n	8042fd0 <_malloc_r+0x28>
 8042fc4:	230c      	movs	r3, #12
 8042fc6:	603b      	str	r3, [r7, #0]
 8042fc8:	2600      	movs	r6, #0
 8042fca:	4630      	mov	r0, r6
 8042fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8042fd0:	4e2e      	ldr	r6, [pc, #184]	; (804308c <_malloc_r+0xe4>)
 8042fd2:	f000 fdbb 	bl	8043b4c <__malloc_lock>
 8042fd6:	6833      	ldr	r3, [r6, #0]
 8042fd8:	461c      	mov	r4, r3
 8042fda:	bb34      	cbnz	r4, 804302a <_malloc_r+0x82>
 8042fdc:	4629      	mov	r1, r5
 8042fde:	4638      	mov	r0, r7
 8042fe0:	f7ff ffc2 	bl	8042f68 <sbrk_aligned>
 8042fe4:	1c43      	adds	r3, r0, #1
 8042fe6:	4604      	mov	r4, r0
 8042fe8:	d14d      	bne.n	8043086 <_malloc_r+0xde>
 8042fea:	6834      	ldr	r4, [r6, #0]
 8042fec:	4626      	mov	r6, r4
 8042fee:	2e00      	cmp	r6, #0
 8042ff0:	d140      	bne.n	8043074 <_malloc_r+0xcc>
 8042ff2:	6823      	ldr	r3, [r4, #0]
 8042ff4:	4631      	mov	r1, r6
 8042ff6:	4638      	mov	r0, r7
 8042ff8:	eb04 0803 	add.w	r8, r4, r3
 8042ffc:	f000 fb36 	bl	804366c <_sbrk_r>
 8043000:	4580      	cmp	r8, r0
 8043002:	d13a      	bne.n	804307a <_malloc_r+0xd2>
 8043004:	6821      	ldr	r1, [r4, #0]
 8043006:	3503      	adds	r5, #3
 8043008:	1a6d      	subs	r5, r5, r1
 804300a:	f025 0503 	bic.w	r5, r5, #3
 804300e:	3508      	adds	r5, #8
 8043010:	2d0c      	cmp	r5, #12
 8043012:	bf38      	it	cc
 8043014:	250c      	movcc	r5, #12
 8043016:	4629      	mov	r1, r5
 8043018:	4638      	mov	r0, r7
 804301a:	f7ff ffa5 	bl	8042f68 <sbrk_aligned>
 804301e:	3001      	adds	r0, #1
 8043020:	d02b      	beq.n	804307a <_malloc_r+0xd2>
 8043022:	6823      	ldr	r3, [r4, #0]
 8043024:	442b      	add	r3, r5
 8043026:	6023      	str	r3, [r4, #0]
 8043028:	e00e      	b.n	8043048 <_malloc_r+0xa0>
 804302a:	6822      	ldr	r2, [r4, #0]
 804302c:	1b52      	subs	r2, r2, r5
 804302e:	d41e      	bmi.n	804306e <_malloc_r+0xc6>
 8043030:	2a0b      	cmp	r2, #11
 8043032:	d916      	bls.n	8043062 <_malloc_r+0xba>
 8043034:	1961      	adds	r1, r4, r5
 8043036:	42a3      	cmp	r3, r4
 8043038:	6025      	str	r5, [r4, #0]
 804303a:	bf18      	it	ne
 804303c:	6059      	strne	r1, [r3, #4]
 804303e:	6863      	ldr	r3, [r4, #4]
 8043040:	bf08      	it	eq
 8043042:	6031      	streq	r1, [r6, #0]
 8043044:	5162      	str	r2, [r4, r5]
 8043046:	604b      	str	r3, [r1, #4]
 8043048:	4638      	mov	r0, r7
 804304a:	f104 060b 	add.w	r6, r4, #11
 804304e:	f000 fd83 	bl	8043b58 <__malloc_unlock>
 8043052:	f026 0607 	bic.w	r6, r6, #7
 8043056:	1d23      	adds	r3, r4, #4
 8043058:	1af2      	subs	r2, r6, r3
 804305a:	d0b6      	beq.n	8042fca <_malloc_r+0x22>
 804305c:	1b9b      	subs	r3, r3, r6
 804305e:	50a3      	str	r3, [r4, r2]
 8043060:	e7b3      	b.n	8042fca <_malloc_r+0x22>
 8043062:	6862      	ldr	r2, [r4, #4]
 8043064:	42a3      	cmp	r3, r4
 8043066:	bf0c      	ite	eq
 8043068:	6032      	streq	r2, [r6, #0]
 804306a:	605a      	strne	r2, [r3, #4]
 804306c:	e7ec      	b.n	8043048 <_malloc_r+0xa0>
 804306e:	4623      	mov	r3, r4
 8043070:	6864      	ldr	r4, [r4, #4]
 8043072:	e7b2      	b.n	8042fda <_malloc_r+0x32>
 8043074:	4634      	mov	r4, r6
 8043076:	6876      	ldr	r6, [r6, #4]
 8043078:	e7b9      	b.n	8042fee <_malloc_r+0x46>
 804307a:	230c      	movs	r3, #12
 804307c:	603b      	str	r3, [r7, #0]
 804307e:	4638      	mov	r0, r7
 8043080:	f000 fd6a 	bl	8043b58 <__malloc_unlock>
 8043084:	e7a1      	b.n	8042fca <_malloc_r+0x22>
 8043086:	6025      	str	r5, [r4, #0]
 8043088:	e7de      	b.n	8043048 <_malloc_r+0xa0>
 804308a:	bf00      	nop
 804308c:	20000120 	.word	0x20000120

08043090 <__sfputc_r>:
 8043090:	6893      	ldr	r3, [r2, #8]
 8043092:	3b01      	subs	r3, #1
 8043094:	2b00      	cmp	r3, #0
 8043096:	b410      	push	{r4}
 8043098:	6093      	str	r3, [r2, #8]
 804309a:	da08      	bge.n	80430ae <__sfputc_r+0x1e>
 804309c:	6994      	ldr	r4, [r2, #24]
 804309e:	42a3      	cmp	r3, r4
 80430a0:	db01      	blt.n	80430a6 <__sfputc_r+0x16>
 80430a2:	290a      	cmp	r1, #10
 80430a4:	d103      	bne.n	80430ae <__sfputc_r+0x1e>
 80430a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80430aa:	f000 bb33 	b.w	8043714 <__swbuf_r>
 80430ae:	6813      	ldr	r3, [r2, #0]
 80430b0:	1c58      	adds	r0, r3, #1
 80430b2:	6010      	str	r0, [r2, #0]
 80430b4:	7019      	strb	r1, [r3, #0]
 80430b6:	4608      	mov	r0, r1
 80430b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80430bc:	4770      	bx	lr

080430be <__sfputs_r>:
 80430be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80430c0:	4606      	mov	r6, r0
 80430c2:	460f      	mov	r7, r1
 80430c4:	4614      	mov	r4, r2
 80430c6:	18d5      	adds	r5, r2, r3
 80430c8:	42ac      	cmp	r4, r5
 80430ca:	d101      	bne.n	80430d0 <__sfputs_r+0x12>
 80430cc:	2000      	movs	r0, #0
 80430ce:	e007      	b.n	80430e0 <__sfputs_r+0x22>
 80430d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80430d4:	463a      	mov	r2, r7
 80430d6:	4630      	mov	r0, r6
 80430d8:	f7ff ffda 	bl	8043090 <__sfputc_r>
 80430dc:	1c43      	adds	r3, r0, #1
 80430de:	d1f3      	bne.n	80430c8 <__sfputs_r+0xa>
 80430e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080430e4 <_vfiprintf_r>:
 80430e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80430e8:	460d      	mov	r5, r1
 80430ea:	b09d      	sub	sp, #116	; 0x74
 80430ec:	4614      	mov	r4, r2
 80430ee:	4698      	mov	r8, r3
 80430f0:	4606      	mov	r6, r0
 80430f2:	b118      	cbz	r0, 80430fc <_vfiprintf_r+0x18>
 80430f4:	6983      	ldr	r3, [r0, #24]
 80430f6:	b90b      	cbnz	r3, 80430fc <_vfiprintf_r+0x18>
 80430f8:	f7ff fe96 	bl	8042e28 <__sinit>
 80430fc:	4b89      	ldr	r3, [pc, #548]	; (8043324 <_vfiprintf_r+0x240>)
 80430fe:	429d      	cmp	r5, r3
 8043100:	d11b      	bne.n	804313a <_vfiprintf_r+0x56>
 8043102:	6875      	ldr	r5, [r6, #4]
 8043104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8043106:	07d9      	lsls	r1, r3, #31
 8043108:	d405      	bmi.n	8043116 <_vfiprintf_r+0x32>
 804310a:	89ab      	ldrh	r3, [r5, #12]
 804310c:	059a      	lsls	r2, r3, #22
 804310e:	d402      	bmi.n	8043116 <_vfiprintf_r+0x32>
 8043110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8043112:	f7ff ff27 	bl	8042f64 <__retarget_lock_acquire_recursive>
 8043116:	89ab      	ldrh	r3, [r5, #12]
 8043118:	071b      	lsls	r3, r3, #28
 804311a:	d501      	bpl.n	8043120 <_vfiprintf_r+0x3c>
 804311c:	692b      	ldr	r3, [r5, #16]
 804311e:	b9eb      	cbnz	r3, 804315c <_vfiprintf_r+0x78>
 8043120:	4629      	mov	r1, r5
 8043122:	4630      	mov	r0, r6
 8043124:	f000 fb5a 	bl	80437dc <__swsetup_r>
 8043128:	b1c0      	cbz	r0, 804315c <_vfiprintf_r+0x78>
 804312a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804312c:	07dc      	lsls	r4, r3, #31
 804312e:	d50e      	bpl.n	804314e <_vfiprintf_r+0x6a>
 8043130:	f04f 30ff 	mov.w	r0, #4294967295
 8043134:	b01d      	add	sp, #116	; 0x74
 8043136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804313a:	4b7b      	ldr	r3, [pc, #492]	; (8043328 <_vfiprintf_r+0x244>)
 804313c:	429d      	cmp	r5, r3
 804313e:	d101      	bne.n	8043144 <_vfiprintf_r+0x60>
 8043140:	68b5      	ldr	r5, [r6, #8]
 8043142:	e7df      	b.n	8043104 <_vfiprintf_r+0x20>
 8043144:	4b79      	ldr	r3, [pc, #484]	; (804332c <_vfiprintf_r+0x248>)
 8043146:	429d      	cmp	r5, r3
 8043148:	bf08      	it	eq
 804314a:	68f5      	ldreq	r5, [r6, #12]
 804314c:	e7da      	b.n	8043104 <_vfiprintf_r+0x20>
 804314e:	89ab      	ldrh	r3, [r5, #12]
 8043150:	0598      	lsls	r0, r3, #22
 8043152:	d4ed      	bmi.n	8043130 <_vfiprintf_r+0x4c>
 8043154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8043156:	f7ff ff06 	bl	8042f66 <__retarget_lock_release_recursive>
 804315a:	e7e9      	b.n	8043130 <_vfiprintf_r+0x4c>
 804315c:	2300      	movs	r3, #0
 804315e:	9309      	str	r3, [sp, #36]	; 0x24
 8043160:	2320      	movs	r3, #32
 8043162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8043166:	f8cd 800c 	str.w	r8, [sp, #12]
 804316a:	2330      	movs	r3, #48	; 0x30
 804316c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8043330 <_vfiprintf_r+0x24c>
 8043170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8043174:	f04f 0901 	mov.w	r9, #1
 8043178:	4623      	mov	r3, r4
 804317a:	469a      	mov	sl, r3
 804317c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8043180:	b10a      	cbz	r2, 8043186 <_vfiprintf_r+0xa2>
 8043182:	2a25      	cmp	r2, #37	; 0x25
 8043184:	d1f9      	bne.n	804317a <_vfiprintf_r+0x96>
 8043186:	ebba 0b04 	subs.w	fp, sl, r4
 804318a:	d00b      	beq.n	80431a4 <_vfiprintf_r+0xc0>
 804318c:	465b      	mov	r3, fp
 804318e:	4622      	mov	r2, r4
 8043190:	4629      	mov	r1, r5
 8043192:	4630      	mov	r0, r6
 8043194:	f7ff ff93 	bl	80430be <__sfputs_r>
 8043198:	3001      	adds	r0, #1
 804319a:	f000 80aa 	beq.w	80432f2 <_vfiprintf_r+0x20e>
 804319e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80431a0:	445a      	add	r2, fp
 80431a2:	9209      	str	r2, [sp, #36]	; 0x24
 80431a4:	f89a 3000 	ldrb.w	r3, [sl]
 80431a8:	2b00      	cmp	r3, #0
 80431aa:	f000 80a2 	beq.w	80432f2 <_vfiprintf_r+0x20e>
 80431ae:	2300      	movs	r3, #0
 80431b0:	f04f 32ff 	mov.w	r2, #4294967295
 80431b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80431b8:	f10a 0a01 	add.w	sl, sl, #1
 80431bc:	9304      	str	r3, [sp, #16]
 80431be:	9307      	str	r3, [sp, #28]
 80431c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80431c4:	931a      	str	r3, [sp, #104]	; 0x68
 80431c6:	4654      	mov	r4, sl
 80431c8:	2205      	movs	r2, #5
 80431ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80431ce:	4858      	ldr	r0, [pc, #352]	; (8043330 <_vfiprintf_r+0x24c>)
 80431d0:	f7fd f836 	bl	8040240 <memchr>
 80431d4:	9a04      	ldr	r2, [sp, #16]
 80431d6:	b9d8      	cbnz	r0, 8043210 <_vfiprintf_r+0x12c>
 80431d8:	06d1      	lsls	r1, r2, #27
 80431da:	bf44      	itt	mi
 80431dc:	2320      	movmi	r3, #32
 80431de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80431e2:	0713      	lsls	r3, r2, #28
 80431e4:	bf44      	itt	mi
 80431e6:	232b      	movmi	r3, #43	; 0x2b
 80431e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80431ec:	f89a 3000 	ldrb.w	r3, [sl]
 80431f0:	2b2a      	cmp	r3, #42	; 0x2a
 80431f2:	d015      	beq.n	8043220 <_vfiprintf_r+0x13c>
 80431f4:	9a07      	ldr	r2, [sp, #28]
 80431f6:	4654      	mov	r4, sl
 80431f8:	2000      	movs	r0, #0
 80431fa:	f04f 0c0a 	mov.w	ip, #10
 80431fe:	4621      	mov	r1, r4
 8043200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8043204:	3b30      	subs	r3, #48	; 0x30
 8043206:	2b09      	cmp	r3, #9
 8043208:	d94e      	bls.n	80432a8 <_vfiprintf_r+0x1c4>
 804320a:	b1b0      	cbz	r0, 804323a <_vfiprintf_r+0x156>
 804320c:	9207      	str	r2, [sp, #28]
 804320e:	e014      	b.n	804323a <_vfiprintf_r+0x156>
 8043210:	eba0 0308 	sub.w	r3, r0, r8
 8043214:	fa09 f303 	lsl.w	r3, r9, r3
 8043218:	4313      	orrs	r3, r2
 804321a:	9304      	str	r3, [sp, #16]
 804321c:	46a2      	mov	sl, r4
 804321e:	e7d2      	b.n	80431c6 <_vfiprintf_r+0xe2>
 8043220:	9b03      	ldr	r3, [sp, #12]
 8043222:	1d19      	adds	r1, r3, #4
 8043224:	681b      	ldr	r3, [r3, #0]
 8043226:	9103      	str	r1, [sp, #12]
 8043228:	2b00      	cmp	r3, #0
 804322a:	bfbb      	ittet	lt
 804322c:	425b      	neglt	r3, r3
 804322e:	f042 0202 	orrlt.w	r2, r2, #2
 8043232:	9307      	strge	r3, [sp, #28]
 8043234:	9307      	strlt	r3, [sp, #28]
 8043236:	bfb8      	it	lt
 8043238:	9204      	strlt	r2, [sp, #16]
 804323a:	7823      	ldrb	r3, [r4, #0]
 804323c:	2b2e      	cmp	r3, #46	; 0x2e
 804323e:	d10c      	bne.n	804325a <_vfiprintf_r+0x176>
 8043240:	7863      	ldrb	r3, [r4, #1]
 8043242:	2b2a      	cmp	r3, #42	; 0x2a
 8043244:	d135      	bne.n	80432b2 <_vfiprintf_r+0x1ce>
 8043246:	9b03      	ldr	r3, [sp, #12]
 8043248:	1d1a      	adds	r2, r3, #4
 804324a:	681b      	ldr	r3, [r3, #0]
 804324c:	9203      	str	r2, [sp, #12]
 804324e:	2b00      	cmp	r3, #0
 8043250:	bfb8      	it	lt
 8043252:	f04f 33ff 	movlt.w	r3, #4294967295
 8043256:	3402      	adds	r4, #2
 8043258:	9305      	str	r3, [sp, #20]
 804325a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8043340 <_vfiprintf_r+0x25c>
 804325e:	7821      	ldrb	r1, [r4, #0]
 8043260:	2203      	movs	r2, #3
 8043262:	4650      	mov	r0, sl
 8043264:	f7fc ffec 	bl	8040240 <memchr>
 8043268:	b140      	cbz	r0, 804327c <_vfiprintf_r+0x198>
 804326a:	2340      	movs	r3, #64	; 0x40
 804326c:	eba0 000a 	sub.w	r0, r0, sl
 8043270:	fa03 f000 	lsl.w	r0, r3, r0
 8043274:	9b04      	ldr	r3, [sp, #16]
 8043276:	4303      	orrs	r3, r0
 8043278:	3401      	adds	r4, #1
 804327a:	9304      	str	r3, [sp, #16]
 804327c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8043280:	482c      	ldr	r0, [pc, #176]	; (8043334 <_vfiprintf_r+0x250>)
 8043282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8043286:	2206      	movs	r2, #6
 8043288:	f7fc ffda 	bl	8040240 <memchr>
 804328c:	2800      	cmp	r0, #0
 804328e:	d03f      	beq.n	8043310 <_vfiprintf_r+0x22c>
 8043290:	4b29      	ldr	r3, [pc, #164]	; (8043338 <_vfiprintf_r+0x254>)
 8043292:	bb1b      	cbnz	r3, 80432dc <_vfiprintf_r+0x1f8>
 8043294:	9b03      	ldr	r3, [sp, #12]
 8043296:	3307      	adds	r3, #7
 8043298:	f023 0307 	bic.w	r3, r3, #7
 804329c:	3308      	adds	r3, #8
 804329e:	9303      	str	r3, [sp, #12]
 80432a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80432a2:	443b      	add	r3, r7
 80432a4:	9309      	str	r3, [sp, #36]	; 0x24
 80432a6:	e767      	b.n	8043178 <_vfiprintf_r+0x94>
 80432a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80432ac:	460c      	mov	r4, r1
 80432ae:	2001      	movs	r0, #1
 80432b0:	e7a5      	b.n	80431fe <_vfiprintf_r+0x11a>
 80432b2:	2300      	movs	r3, #0
 80432b4:	3401      	adds	r4, #1
 80432b6:	9305      	str	r3, [sp, #20]
 80432b8:	4619      	mov	r1, r3
 80432ba:	f04f 0c0a 	mov.w	ip, #10
 80432be:	4620      	mov	r0, r4
 80432c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80432c4:	3a30      	subs	r2, #48	; 0x30
 80432c6:	2a09      	cmp	r2, #9
 80432c8:	d903      	bls.n	80432d2 <_vfiprintf_r+0x1ee>
 80432ca:	2b00      	cmp	r3, #0
 80432cc:	d0c5      	beq.n	804325a <_vfiprintf_r+0x176>
 80432ce:	9105      	str	r1, [sp, #20]
 80432d0:	e7c3      	b.n	804325a <_vfiprintf_r+0x176>
 80432d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80432d6:	4604      	mov	r4, r0
 80432d8:	2301      	movs	r3, #1
 80432da:	e7f0      	b.n	80432be <_vfiprintf_r+0x1da>
 80432dc:	ab03      	add	r3, sp, #12
 80432de:	9300      	str	r3, [sp, #0]
 80432e0:	462a      	mov	r2, r5
 80432e2:	4b16      	ldr	r3, [pc, #88]	; (804333c <_vfiprintf_r+0x258>)
 80432e4:	a904      	add	r1, sp, #16
 80432e6:	4630      	mov	r0, r6
 80432e8:	f3af 8000 	nop.w
 80432ec:	4607      	mov	r7, r0
 80432ee:	1c78      	adds	r0, r7, #1
 80432f0:	d1d6      	bne.n	80432a0 <_vfiprintf_r+0x1bc>
 80432f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80432f4:	07d9      	lsls	r1, r3, #31
 80432f6:	d405      	bmi.n	8043304 <_vfiprintf_r+0x220>
 80432f8:	89ab      	ldrh	r3, [r5, #12]
 80432fa:	059a      	lsls	r2, r3, #22
 80432fc:	d402      	bmi.n	8043304 <_vfiprintf_r+0x220>
 80432fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8043300:	f7ff fe31 	bl	8042f66 <__retarget_lock_release_recursive>
 8043304:	89ab      	ldrh	r3, [r5, #12]
 8043306:	065b      	lsls	r3, r3, #25
 8043308:	f53f af12 	bmi.w	8043130 <_vfiprintf_r+0x4c>
 804330c:	9809      	ldr	r0, [sp, #36]	; 0x24
 804330e:	e711      	b.n	8043134 <_vfiprintf_r+0x50>
 8043310:	ab03      	add	r3, sp, #12
 8043312:	9300      	str	r3, [sp, #0]
 8043314:	462a      	mov	r2, r5
 8043316:	4b09      	ldr	r3, [pc, #36]	; (804333c <_vfiprintf_r+0x258>)
 8043318:	a904      	add	r1, sp, #16
 804331a:	4630      	mov	r0, r6
 804331c:	f000 f880 	bl	8043420 <_printf_i>
 8043320:	e7e4      	b.n	80432ec <_vfiprintf_r+0x208>
 8043322:	bf00      	nop
 8043324:	08043cdc 	.word	0x08043cdc
 8043328:	08043cfc 	.word	0x08043cfc
 804332c:	08043cbc 	.word	0x08043cbc
 8043330:	08043d1c 	.word	0x08043d1c
 8043334:	08043d26 	.word	0x08043d26
 8043338:	00000000 	.word	0x00000000
 804333c:	080430bf 	.word	0x080430bf
 8043340:	08043d22 	.word	0x08043d22

08043344 <_printf_common>:
 8043344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8043348:	4616      	mov	r6, r2
 804334a:	4699      	mov	r9, r3
 804334c:	688a      	ldr	r2, [r1, #8]
 804334e:	690b      	ldr	r3, [r1, #16]
 8043350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8043354:	4293      	cmp	r3, r2
 8043356:	bfb8      	it	lt
 8043358:	4613      	movlt	r3, r2
 804335a:	6033      	str	r3, [r6, #0]
 804335c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8043360:	4607      	mov	r7, r0
 8043362:	460c      	mov	r4, r1
 8043364:	b10a      	cbz	r2, 804336a <_printf_common+0x26>
 8043366:	3301      	adds	r3, #1
 8043368:	6033      	str	r3, [r6, #0]
 804336a:	6823      	ldr	r3, [r4, #0]
 804336c:	0699      	lsls	r1, r3, #26
 804336e:	bf42      	ittt	mi
 8043370:	6833      	ldrmi	r3, [r6, #0]
 8043372:	3302      	addmi	r3, #2
 8043374:	6033      	strmi	r3, [r6, #0]
 8043376:	6825      	ldr	r5, [r4, #0]
 8043378:	f015 0506 	ands.w	r5, r5, #6
 804337c:	d106      	bne.n	804338c <_printf_common+0x48>
 804337e:	f104 0a19 	add.w	sl, r4, #25
 8043382:	68e3      	ldr	r3, [r4, #12]
 8043384:	6832      	ldr	r2, [r6, #0]
 8043386:	1a9b      	subs	r3, r3, r2
 8043388:	42ab      	cmp	r3, r5
 804338a:	dc26      	bgt.n	80433da <_printf_common+0x96>
 804338c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8043390:	1e13      	subs	r3, r2, #0
 8043392:	6822      	ldr	r2, [r4, #0]
 8043394:	bf18      	it	ne
 8043396:	2301      	movne	r3, #1
 8043398:	0692      	lsls	r2, r2, #26
 804339a:	d42b      	bmi.n	80433f4 <_printf_common+0xb0>
 804339c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80433a0:	4649      	mov	r1, r9
 80433a2:	4638      	mov	r0, r7
 80433a4:	47c0      	blx	r8
 80433a6:	3001      	adds	r0, #1
 80433a8:	d01e      	beq.n	80433e8 <_printf_common+0xa4>
 80433aa:	6823      	ldr	r3, [r4, #0]
 80433ac:	68e5      	ldr	r5, [r4, #12]
 80433ae:	6832      	ldr	r2, [r6, #0]
 80433b0:	f003 0306 	and.w	r3, r3, #6
 80433b4:	2b04      	cmp	r3, #4
 80433b6:	bf08      	it	eq
 80433b8:	1aad      	subeq	r5, r5, r2
 80433ba:	68a3      	ldr	r3, [r4, #8]
 80433bc:	6922      	ldr	r2, [r4, #16]
 80433be:	bf0c      	ite	eq
 80433c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80433c4:	2500      	movne	r5, #0
 80433c6:	4293      	cmp	r3, r2
 80433c8:	bfc4      	itt	gt
 80433ca:	1a9b      	subgt	r3, r3, r2
 80433cc:	18ed      	addgt	r5, r5, r3
 80433ce:	2600      	movs	r6, #0
 80433d0:	341a      	adds	r4, #26
 80433d2:	42b5      	cmp	r5, r6
 80433d4:	d11a      	bne.n	804340c <_printf_common+0xc8>
 80433d6:	2000      	movs	r0, #0
 80433d8:	e008      	b.n	80433ec <_printf_common+0xa8>
 80433da:	2301      	movs	r3, #1
 80433dc:	4652      	mov	r2, sl
 80433de:	4649      	mov	r1, r9
 80433e0:	4638      	mov	r0, r7
 80433e2:	47c0      	blx	r8
 80433e4:	3001      	adds	r0, #1
 80433e6:	d103      	bne.n	80433f0 <_printf_common+0xac>
 80433e8:	f04f 30ff 	mov.w	r0, #4294967295
 80433ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80433f0:	3501      	adds	r5, #1
 80433f2:	e7c6      	b.n	8043382 <_printf_common+0x3e>
 80433f4:	18e1      	adds	r1, r4, r3
 80433f6:	1c5a      	adds	r2, r3, #1
 80433f8:	2030      	movs	r0, #48	; 0x30
 80433fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80433fe:	4422      	add	r2, r4
 8043400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8043404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8043408:	3302      	adds	r3, #2
 804340a:	e7c7      	b.n	804339c <_printf_common+0x58>
 804340c:	2301      	movs	r3, #1
 804340e:	4622      	mov	r2, r4
 8043410:	4649      	mov	r1, r9
 8043412:	4638      	mov	r0, r7
 8043414:	47c0      	blx	r8
 8043416:	3001      	adds	r0, #1
 8043418:	d0e6      	beq.n	80433e8 <_printf_common+0xa4>
 804341a:	3601      	adds	r6, #1
 804341c:	e7d9      	b.n	80433d2 <_printf_common+0x8e>
	...

08043420 <_printf_i>:
 8043420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8043424:	7e0f      	ldrb	r7, [r1, #24]
 8043426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8043428:	2f78      	cmp	r7, #120	; 0x78
 804342a:	4691      	mov	r9, r2
 804342c:	4680      	mov	r8, r0
 804342e:	460c      	mov	r4, r1
 8043430:	469a      	mov	sl, r3
 8043432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8043436:	d807      	bhi.n	8043448 <_printf_i+0x28>
 8043438:	2f62      	cmp	r7, #98	; 0x62
 804343a:	d80a      	bhi.n	8043452 <_printf_i+0x32>
 804343c:	2f00      	cmp	r7, #0
 804343e:	f000 80d8 	beq.w	80435f2 <_printf_i+0x1d2>
 8043442:	2f58      	cmp	r7, #88	; 0x58
 8043444:	f000 80a3 	beq.w	804358e <_printf_i+0x16e>
 8043448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804344c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8043450:	e03a      	b.n	80434c8 <_printf_i+0xa8>
 8043452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8043456:	2b15      	cmp	r3, #21
 8043458:	d8f6      	bhi.n	8043448 <_printf_i+0x28>
 804345a:	a101      	add	r1, pc, #4	; (adr r1, 8043460 <_printf_i+0x40>)
 804345c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8043460:	080434b9 	.word	0x080434b9
 8043464:	080434cd 	.word	0x080434cd
 8043468:	08043449 	.word	0x08043449
 804346c:	08043449 	.word	0x08043449
 8043470:	08043449 	.word	0x08043449
 8043474:	08043449 	.word	0x08043449
 8043478:	080434cd 	.word	0x080434cd
 804347c:	08043449 	.word	0x08043449
 8043480:	08043449 	.word	0x08043449
 8043484:	08043449 	.word	0x08043449
 8043488:	08043449 	.word	0x08043449
 804348c:	080435d9 	.word	0x080435d9
 8043490:	080434fd 	.word	0x080434fd
 8043494:	080435bb 	.word	0x080435bb
 8043498:	08043449 	.word	0x08043449
 804349c:	08043449 	.word	0x08043449
 80434a0:	080435fb 	.word	0x080435fb
 80434a4:	08043449 	.word	0x08043449
 80434a8:	080434fd 	.word	0x080434fd
 80434ac:	08043449 	.word	0x08043449
 80434b0:	08043449 	.word	0x08043449
 80434b4:	080435c3 	.word	0x080435c3
 80434b8:	682b      	ldr	r3, [r5, #0]
 80434ba:	1d1a      	adds	r2, r3, #4
 80434bc:	681b      	ldr	r3, [r3, #0]
 80434be:	602a      	str	r2, [r5, #0]
 80434c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80434c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80434c8:	2301      	movs	r3, #1
 80434ca:	e0a3      	b.n	8043614 <_printf_i+0x1f4>
 80434cc:	6820      	ldr	r0, [r4, #0]
 80434ce:	6829      	ldr	r1, [r5, #0]
 80434d0:	0606      	lsls	r6, r0, #24
 80434d2:	f101 0304 	add.w	r3, r1, #4
 80434d6:	d50a      	bpl.n	80434ee <_printf_i+0xce>
 80434d8:	680e      	ldr	r6, [r1, #0]
 80434da:	602b      	str	r3, [r5, #0]
 80434dc:	2e00      	cmp	r6, #0
 80434de:	da03      	bge.n	80434e8 <_printf_i+0xc8>
 80434e0:	232d      	movs	r3, #45	; 0x2d
 80434e2:	4276      	negs	r6, r6
 80434e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80434e8:	485e      	ldr	r0, [pc, #376]	; (8043664 <_printf_i+0x244>)
 80434ea:	230a      	movs	r3, #10
 80434ec:	e019      	b.n	8043522 <_printf_i+0x102>
 80434ee:	680e      	ldr	r6, [r1, #0]
 80434f0:	602b      	str	r3, [r5, #0]
 80434f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80434f6:	bf18      	it	ne
 80434f8:	b236      	sxthne	r6, r6
 80434fa:	e7ef      	b.n	80434dc <_printf_i+0xbc>
 80434fc:	682b      	ldr	r3, [r5, #0]
 80434fe:	6820      	ldr	r0, [r4, #0]
 8043500:	1d19      	adds	r1, r3, #4
 8043502:	6029      	str	r1, [r5, #0]
 8043504:	0601      	lsls	r1, r0, #24
 8043506:	d501      	bpl.n	804350c <_printf_i+0xec>
 8043508:	681e      	ldr	r6, [r3, #0]
 804350a:	e002      	b.n	8043512 <_printf_i+0xf2>
 804350c:	0646      	lsls	r6, r0, #25
 804350e:	d5fb      	bpl.n	8043508 <_printf_i+0xe8>
 8043510:	881e      	ldrh	r6, [r3, #0]
 8043512:	4854      	ldr	r0, [pc, #336]	; (8043664 <_printf_i+0x244>)
 8043514:	2f6f      	cmp	r7, #111	; 0x6f
 8043516:	bf0c      	ite	eq
 8043518:	2308      	moveq	r3, #8
 804351a:	230a      	movne	r3, #10
 804351c:	2100      	movs	r1, #0
 804351e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8043522:	6865      	ldr	r5, [r4, #4]
 8043524:	60a5      	str	r5, [r4, #8]
 8043526:	2d00      	cmp	r5, #0
 8043528:	bfa2      	ittt	ge
 804352a:	6821      	ldrge	r1, [r4, #0]
 804352c:	f021 0104 	bicge.w	r1, r1, #4
 8043530:	6021      	strge	r1, [r4, #0]
 8043532:	b90e      	cbnz	r6, 8043538 <_printf_i+0x118>
 8043534:	2d00      	cmp	r5, #0
 8043536:	d04d      	beq.n	80435d4 <_printf_i+0x1b4>
 8043538:	4615      	mov	r5, r2
 804353a:	fbb6 f1f3 	udiv	r1, r6, r3
 804353e:	fb03 6711 	mls	r7, r3, r1, r6
 8043542:	5dc7      	ldrb	r7, [r0, r7]
 8043544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8043548:	4637      	mov	r7, r6
 804354a:	42bb      	cmp	r3, r7
 804354c:	460e      	mov	r6, r1
 804354e:	d9f4      	bls.n	804353a <_printf_i+0x11a>
 8043550:	2b08      	cmp	r3, #8
 8043552:	d10b      	bne.n	804356c <_printf_i+0x14c>
 8043554:	6823      	ldr	r3, [r4, #0]
 8043556:	07de      	lsls	r6, r3, #31
 8043558:	d508      	bpl.n	804356c <_printf_i+0x14c>
 804355a:	6923      	ldr	r3, [r4, #16]
 804355c:	6861      	ldr	r1, [r4, #4]
 804355e:	4299      	cmp	r1, r3
 8043560:	bfde      	ittt	le
 8043562:	2330      	movle	r3, #48	; 0x30
 8043564:	f805 3c01 	strble.w	r3, [r5, #-1]
 8043568:	f105 35ff 	addle.w	r5, r5, #4294967295
 804356c:	1b52      	subs	r2, r2, r5
 804356e:	6122      	str	r2, [r4, #16]
 8043570:	f8cd a000 	str.w	sl, [sp]
 8043574:	464b      	mov	r3, r9
 8043576:	aa03      	add	r2, sp, #12
 8043578:	4621      	mov	r1, r4
 804357a:	4640      	mov	r0, r8
 804357c:	f7ff fee2 	bl	8043344 <_printf_common>
 8043580:	3001      	adds	r0, #1
 8043582:	d14c      	bne.n	804361e <_printf_i+0x1fe>
 8043584:	f04f 30ff 	mov.w	r0, #4294967295
 8043588:	b004      	add	sp, #16
 804358a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804358e:	4835      	ldr	r0, [pc, #212]	; (8043664 <_printf_i+0x244>)
 8043590:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8043594:	6829      	ldr	r1, [r5, #0]
 8043596:	6823      	ldr	r3, [r4, #0]
 8043598:	f851 6b04 	ldr.w	r6, [r1], #4
 804359c:	6029      	str	r1, [r5, #0]
 804359e:	061d      	lsls	r5, r3, #24
 80435a0:	d514      	bpl.n	80435cc <_printf_i+0x1ac>
 80435a2:	07df      	lsls	r7, r3, #31
 80435a4:	bf44      	itt	mi
 80435a6:	f043 0320 	orrmi.w	r3, r3, #32
 80435aa:	6023      	strmi	r3, [r4, #0]
 80435ac:	b91e      	cbnz	r6, 80435b6 <_printf_i+0x196>
 80435ae:	6823      	ldr	r3, [r4, #0]
 80435b0:	f023 0320 	bic.w	r3, r3, #32
 80435b4:	6023      	str	r3, [r4, #0]
 80435b6:	2310      	movs	r3, #16
 80435b8:	e7b0      	b.n	804351c <_printf_i+0xfc>
 80435ba:	6823      	ldr	r3, [r4, #0]
 80435bc:	f043 0320 	orr.w	r3, r3, #32
 80435c0:	6023      	str	r3, [r4, #0]
 80435c2:	2378      	movs	r3, #120	; 0x78
 80435c4:	4828      	ldr	r0, [pc, #160]	; (8043668 <_printf_i+0x248>)
 80435c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80435ca:	e7e3      	b.n	8043594 <_printf_i+0x174>
 80435cc:	0659      	lsls	r1, r3, #25
 80435ce:	bf48      	it	mi
 80435d0:	b2b6      	uxthmi	r6, r6
 80435d2:	e7e6      	b.n	80435a2 <_printf_i+0x182>
 80435d4:	4615      	mov	r5, r2
 80435d6:	e7bb      	b.n	8043550 <_printf_i+0x130>
 80435d8:	682b      	ldr	r3, [r5, #0]
 80435da:	6826      	ldr	r6, [r4, #0]
 80435dc:	6961      	ldr	r1, [r4, #20]
 80435de:	1d18      	adds	r0, r3, #4
 80435e0:	6028      	str	r0, [r5, #0]
 80435e2:	0635      	lsls	r5, r6, #24
 80435e4:	681b      	ldr	r3, [r3, #0]
 80435e6:	d501      	bpl.n	80435ec <_printf_i+0x1cc>
 80435e8:	6019      	str	r1, [r3, #0]
 80435ea:	e002      	b.n	80435f2 <_printf_i+0x1d2>
 80435ec:	0670      	lsls	r0, r6, #25
 80435ee:	d5fb      	bpl.n	80435e8 <_printf_i+0x1c8>
 80435f0:	8019      	strh	r1, [r3, #0]
 80435f2:	2300      	movs	r3, #0
 80435f4:	6123      	str	r3, [r4, #16]
 80435f6:	4615      	mov	r5, r2
 80435f8:	e7ba      	b.n	8043570 <_printf_i+0x150>
 80435fa:	682b      	ldr	r3, [r5, #0]
 80435fc:	1d1a      	adds	r2, r3, #4
 80435fe:	602a      	str	r2, [r5, #0]
 8043600:	681d      	ldr	r5, [r3, #0]
 8043602:	6862      	ldr	r2, [r4, #4]
 8043604:	2100      	movs	r1, #0
 8043606:	4628      	mov	r0, r5
 8043608:	f7fc fe1a 	bl	8040240 <memchr>
 804360c:	b108      	cbz	r0, 8043612 <_printf_i+0x1f2>
 804360e:	1b40      	subs	r0, r0, r5
 8043610:	6060      	str	r0, [r4, #4]
 8043612:	6863      	ldr	r3, [r4, #4]
 8043614:	6123      	str	r3, [r4, #16]
 8043616:	2300      	movs	r3, #0
 8043618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804361c:	e7a8      	b.n	8043570 <_printf_i+0x150>
 804361e:	6923      	ldr	r3, [r4, #16]
 8043620:	462a      	mov	r2, r5
 8043622:	4649      	mov	r1, r9
 8043624:	4640      	mov	r0, r8
 8043626:	47d0      	blx	sl
 8043628:	3001      	adds	r0, #1
 804362a:	d0ab      	beq.n	8043584 <_printf_i+0x164>
 804362c:	6823      	ldr	r3, [r4, #0]
 804362e:	079b      	lsls	r3, r3, #30
 8043630:	d413      	bmi.n	804365a <_printf_i+0x23a>
 8043632:	68e0      	ldr	r0, [r4, #12]
 8043634:	9b03      	ldr	r3, [sp, #12]
 8043636:	4298      	cmp	r0, r3
 8043638:	bfb8      	it	lt
 804363a:	4618      	movlt	r0, r3
 804363c:	e7a4      	b.n	8043588 <_printf_i+0x168>
 804363e:	2301      	movs	r3, #1
 8043640:	4632      	mov	r2, r6
 8043642:	4649      	mov	r1, r9
 8043644:	4640      	mov	r0, r8
 8043646:	47d0      	blx	sl
 8043648:	3001      	adds	r0, #1
 804364a:	d09b      	beq.n	8043584 <_printf_i+0x164>
 804364c:	3501      	adds	r5, #1
 804364e:	68e3      	ldr	r3, [r4, #12]
 8043650:	9903      	ldr	r1, [sp, #12]
 8043652:	1a5b      	subs	r3, r3, r1
 8043654:	42ab      	cmp	r3, r5
 8043656:	dcf2      	bgt.n	804363e <_printf_i+0x21e>
 8043658:	e7eb      	b.n	8043632 <_printf_i+0x212>
 804365a:	2500      	movs	r5, #0
 804365c:	f104 0619 	add.w	r6, r4, #25
 8043660:	e7f5      	b.n	804364e <_printf_i+0x22e>
 8043662:	bf00      	nop
 8043664:	08043d2d 	.word	0x08043d2d
 8043668:	08043d3e 	.word	0x08043d3e

0804366c <_sbrk_r>:
 804366c:	b538      	push	{r3, r4, r5, lr}
 804366e:	4d06      	ldr	r5, [pc, #24]	; (8043688 <_sbrk_r+0x1c>)
 8043670:	2300      	movs	r3, #0
 8043672:	4604      	mov	r4, r0
 8043674:	4608      	mov	r0, r1
 8043676:	602b      	str	r3, [r5, #0]
 8043678:	f7fd f9d0 	bl	8040a1c <_sbrk>
 804367c:	1c43      	adds	r3, r0, #1
 804367e:	d102      	bne.n	8043686 <_sbrk_r+0x1a>
 8043680:	682b      	ldr	r3, [r5, #0]
 8043682:	b103      	cbz	r3, 8043686 <_sbrk_r+0x1a>
 8043684:	6023      	str	r3, [r4, #0]
 8043686:	bd38      	pop	{r3, r4, r5, pc}
 8043688:	20000128 	.word	0x20000128

0804368c <__sread>:
 804368c:	b510      	push	{r4, lr}
 804368e:	460c      	mov	r4, r1
 8043690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8043694:	f000 fab2 	bl	8043bfc <_read_r>
 8043698:	2800      	cmp	r0, #0
 804369a:	bfab      	itete	ge
 804369c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804369e:	89a3      	ldrhlt	r3, [r4, #12]
 80436a0:	181b      	addge	r3, r3, r0
 80436a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80436a6:	bfac      	ite	ge
 80436a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80436aa:	81a3      	strhlt	r3, [r4, #12]
 80436ac:	bd10      	pop	{r4, pc}

080436ae <__swrite>:
 80436ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80436b2:	461f      	mov	r7, r3
 80436b4:	898b      	ldrh	r3, [r1, #12]
 80436b6:	05db      	lsls	r3, r3, #23
 80436b8:	4605      	mov	r5, r0
 80436ba:	460c      	mov	r4, r1
 80436bc:	4616      	mov	r6, r2
 80436be:	d505      	bpl.n	80436cc <__swrite+0x1e>
 80436c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80436c4:	2302      	movs	r3, #2
 80436c6:	2200      	movs	r2, #0
 80436c8:	f000 f9c8 	bl	8043a5c <_lseek_r>
 80436cc:	89a3      	ldrh	r3, [r4, #12]
 80436ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80436d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80436d6:	81a3      	strh	r3, [r4, #12]
 80436d8:	4632      	mov	r2, r6
 80436da:	463b      	mov	r3, r7
 80436dc:	4628      	mov	r0, r5
 80436de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80436e2:	f000 b869 	b.w	80437b8 <_write_r>

080436e6 <__sseek>:
 80436e6:	b510      	push	{r4, lr}
 80436e8:	460c      	mov	r4, r1
 80436ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80436ee:	f000 f9b5 	bl	8043a5c <_lseek_r>
 80436f2:	1c43      	adds	r3, r0, #1
 80436f4:	89a3      	ldrh	r3, [r4, #12]
 80436f6:	bf15      	itete	ne
 80436f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80436fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80436fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8043702:	81a3      	strheq	r3, [r4, #12]
 8043704:	bf18      	it	ne
 8043706:	81a3      	strhne	r3, [r4, #12]
 8043708:	bd10      	pop	{r4, pc}

0804370a <__sclose>:
 804370a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804370e:	f000 b8d3 	b.w	80438b8 <_close_r>
	...

08043714 <__swbuf_r>:
 8043714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043716:	460e      	mov	r6, r1
 8043718:	4614      	mov	r4, r2
 804371a:	4605      	mov	r5, r0
 804371c:	b118      	cbz	r0, 8043726 <__swbuf_r+0x12>
 804371e:	6983      	ldr	r3, [r0, #24]
 8043720:	b90b      	cbnz	r3, 8043726 <__swbuf_r+0x12>
 8043722:	f7ff fb81 	bl	8042e28 <__sinit>
 8043726:	4b21      	ldr	r3, [pc, #132]	; (80437ac <__swbuf_r+0x98>)
 8043728:	429c      	cmp	r4, r3
 804372a:	d12b      	bne.n	8043784 <__swbuf_r+0x70>
 804372c:	686c      	ldr	r4, [r5, #4]
 804372e:	69a3      	ldr	r3, [r4, #24]
 8043730:	60a3      	str	r3, [r4, #8]
 8043732:	89a3      	ldrh	r3, [r4, #12]
 8043734:	071a      	lsls	r2, r3, #28
 8043736:	d52f      	bpl.n	8043798 <__swbuf_r+0x84>
 8043738:	6923      	ldr	r3, [r4, #16]
 804373a:	b36b      	cbz	r3, 8043798 <__swbuf_r+0x84>
 804373c:	6923      	ldr	r3, [r4, #16]
 804373e:	6820      	ldr	r0, [r4, #0]
 8043740:	1ac0      	subs	r0, r0, r3
 8043742:	6963      	ldr	r3, [r4, #20]
 8043744:	b2f6      	uxtb	r6, r6
 8043746:	4283      	cmp	r3, r0
 8043748:	4637      	mov	r7, r6
 804374a:	dc04      	bgt.n	8043756 <__swbuf_r+0x42>
 804374c:	4621      	mov	r1, r4
 804374e:	4628      	mov	r0, r5
 8043750:	f000 f948 	bl	80439e4 <_fflush_r>
 8043754:	bb30      	cbnz	r0, 80437a4 <__swbuf_r+0x90>
 8043756:	68a3      	ldr	r3, [r4, #8]
 8043758:	3b01      	subs	r3, #1
 804375a:	60a3      	str	r3, [r4, #8]
 804375c:	6823      	ldr	r3, [r4, #0]
 804375e:	1c5a      	adds	r2, r3, #1
 8043760:	6022      	str	r2, [r4, #0]
 8043762:	701e      	strb	r6, [r3, #0]
 8043764:	6963      	ldr	r3, [r4, #20]
 8043766:	3001      	adds	r0, #1
 8043768:	4283      	cmp	r3, r0
 804376a:	d004      	beq.n	8043776 <__swbuf_r+0x62>
 804376c:	89a3      	ldrh	r3, [r4, #12]
 804376e:	07db      	lsls	r3, r3, #31
 8043770:	d506      	bpl.n	8043780 <__swbuf_r+0x6c>
 8043772:	2e0a      	cmp	r6, #10
 8043774:	d104      	bne.n	8043780 <__swbuf_r+0x6c>
 8043776:	4621      	mov	r1, r4
 8043778:	4628      	mov	r0, r5
 804377a:	f000 f933 	bl	80439e4 <_fflush_r>
 804377e:	b988      	cbnz	r0, 80437a4 <__swbuf_r+0x90>
 8043780:	4638      	mov	r0, r7
 8043782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8043784:	4b0a      	ldr	r3, [pc, #40]	; (80437b0 <__swbuf_r+0x9c>)
 8043786:	429c      	cmp	r4, r3
 8043788:	d101      	bne.n	804378e <__swbuf_r+0x7a>
 804378a:	68ac      	ldr	r4, [r5, #8]
 804378c:	e7cf      	b.n	804372e <__swbuf_r+0x1a>
 804378e:	4b09      	ldr	r3, [pc, #36]	; (80437b4 <__swbuf_r+0xa0>)
 8043790:	429c      	cmp	r4, r3
 8043792:	bf08      	it	eq
 8043794:	68ec      	ldreq	r4, [r5, #12]
 8043796:	e7ca      	b.n	804372e <__swbuf_r+0x1a>
 8043798:	4621      	mov	r1, r4
 804379a:	4628      	mov	r0, r5
 804379c:	f000 f81e 	bl	80437dc <__swsetup_r>
 80437a0:	2800      	cmp	r0, #0
 80437a2:	d0cb      	beq.n	804373c <__swbuf_r+0x28>
 80437a4:	f04f 37ff 	mov.w	r7, #4294967295
 80437a8:	e7ea      	b.n	8043780 <__swbuf_r+0x6c>
 80437aa:	bf00      	nop
 80437ac:	08043cdc 	.word	0x08043cdc
 80437b0:	08043cfc 	.word	0x08043cfc
 80437b4:	08043cbc 	.word	0x08043cbc

080437b8 <_write_r>:
 80437b8:	b538      	push	{r3, r4, r5, lr}
 80437ba:	4d07      	ldr	r5, [pc, #28]	; (80437d8 <_write_r+0x20>)
 80437bc:	4604      	mov	r4, r0
 80437be:	4608      	mov	r0, r1
 80437c0:	4611      	mov	r1, r2
 80437c2:	2200      	movs	r2, #0
 80437c4:	602a      	str	r2, [r5, #0]
 80437c6:	461a      	mov	r2, r3
 80437c8:	f7fd f8d7 	bl	804097a <_write>
 80437cc:	1c43      	adds	r3, r0, #1
 80437ce:	d102      	bne.n	80437d6 <_write_r+0x1e>
 80437d0:	682b      	ldr	r3, [r5, #0]
 80437d2:	b103      	cbz	r3, 80437d6 <_write_r+0x1e>
 80437d4:	6023      	str	r3, [r4, #0]
 80437d6:	bd38      	pop	{r3, r4, r5, pc}
 80437d8:	20000128 	.word	0x20000128

080437dc <__swsetup_r>:
 80437dc:	4b32      	ldr	r3, [pc, #200]	; (80438a8 <__swsetup_r+0xcc>)
 80437de:	b570      	push	{r4, r5, r6, lr}
 80437e0:	681d      	ldr	r5, [r3, #0]
 80437e2:	4606      	mov	r6, r0
 80437e4:	460c      	mov	r4, r1
 80437e6:	b125      	cbz	r5, 80437f2 <__swsetup_r+0x16>
 80437e8:	69ab      	ldr	r3, [r5, #24]
 80437ea:	b913      	cbnz	r3, 80437f2 <__swsetup_r+0x16>
 80437ec:	4628      	mov	r0, r5
 80437ee:	f7ff fb1b 	bl	8042e28 <__sinit>
 80437f2:	4b2e      	ldr	r3, [pc, #184]	; (80438ac <__swsetup_r+0xd0>)
 80437f4:	429c      	cmp	r4, r3
 80437f6:	d10f      	bne.n	8043818 <__swsetup_r+0x3c>
 80437f8:	686c      	ldr	r4, [r5, #4]
 80437fa:	89a3      	ldrh	r3, [r4, #12]
 80437fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8043800:	0719      	lsls	r1, r3, #28
 8043802:	d42c      	bmi.n	804385e <__swsetup_r+0x82>
 8043804:	06dd      	lsls	r5, r3, #27
 8043806:	d411      	bmi.n	804382c <__swsetup_r+0x50>
 8043808:	2309      	movs	r3, #9
 804380a:	6033      	str	r3, [r6, #0]
 804380c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8043810:	81a3      	strh	r3, [r4, #12]
 8043812:	f04f 30ff 	mov.w	r0, #4294967295
 8043816:	e03e      	b.n	8043896 <__swsetup_r+0xba>
 8043818:	4b25      	ldr	r3, [pc, #148]	; (80438b0 <__swsetup_r+0xd4>)
 804381a:	429c      	cmp	r4, r3
 804381c:	d101      	bne.n	8043822 <__swsetup_r+0x46>
 804381e:	68ac      	ldr	r4, [r5, #8]
 8043820:	e7eb      	b.n	80437fa <__swsetup_r+0x1e>
 8043822:	4b24      	ldr	r3, [pc, #144]	; (80438b4 <__swsetup_r+0xd8>)
 8043824:	429c      	cmp	r4, r3
 8043826:	bf08      	it	eq
 8043828:	68ec      	ldreq	r4, [r5, #12]
 804382a:	e7e6      	b.n	80437fa <__swsetup_r+0x1e>
 804382c:	0758      	lsls	r0, r3, #29
 804382e:	d512      	bpl.n	8043856 <__swsetup_r+0x7a>
 8043830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8043832:	b141      	cbz	r1, 8043846 <__swsetup_r+0x6a>
 8043834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8043838:	4299      	cmp	r1, r3
 804383a:	d002      	beq.n	8043842 <__swsetup_r+0x66>
 804383c:	4630      	mov	r0, r6
 804383e:	f000 f991 	bl	8043b64 <_free_r>
 8043842:	2300      	movs	r3, #0
 8043844:	6363      	str	r3, [r4, #52]	; 0x34
 8043846:	89a3      	ldrh	r3, [r4, #12]
 8043848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 804384c:	81a3      	strh	r3, [r4, #12]
 804384e:	2300      	movs	r3, #0
 8043850:	6063      	str	r3, [r4, #4]
 8043852:	6923      	ldr	r3, [r4, #16]
 8043854:	6023      	str	r3, [r4, #0]
 8043856:	89a3      	ldrh	r3, [r4, #12]
 8043858:	f043 0308 	orr.w	r3, r3, #8
 804385c:	81a3      	strh	r3, [r4, #12]
 804385e:	6923      	ldr	r3, [r4, #16]
 8043860:	b94b      	cbnz	r3, 8043876 <__swsetup_r+0x9a>
 8043862:	89a3      	ldrh	r3, [r4, #12]
 8043864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8043868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804386c:	d003      	beq.n	8043876 <__swsetup_r+0x9a>
 804386e:	4621      	mov	r1, r4
 8043870:	4630      	mov	r0, r6
 8043872:	f000 f92b 	bl	8043acc <__smakebuf_r>
 8043876:	89a0      	ldrh	r0, [r4, #12]
 8043878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804387c:	f010 0301 	ands.w	r3, r0, #1
 8043880:	d00a      	beq.n	8043898 <__swsetup_r+0xbc>
 8043882:	2300      	movs	r3, #0
 8043884:	60a3      	str	r3, [r4, #8]
 8043886:	6963      	ldr	r3, [r4, #20]
 8043888:	425b      	negs	r3, r3
 804388a:	61a3      	str	r3, [r4, #24]
 804388c:	6923      	ldr	r3, [r4, #16]
 804388e:	b943      	cbnz	r3, 80438a2 <__swsetup_r+0xc6>
 8043890:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8043894:	d1ba      	bne.n	804380c <__swsetup_r+0x30>
 8043896:	bd70      	pop	{r4, r5, r6, pc}
 8043898:	0781      	lsls	r1, r0, #30
 804389a:	bf58      	it	pl
 804389c:	6963      	ldrpl	r3, [r4, #20]
 804389e:	60a3      	str	r3, [r4, #8]
 80438a0:	e7f4      	b.n	804388c <__swsetup_r+0xb0>
 80438a2:	2000      	movs	r0, #0
 80438a4:	e7f7      	b.n	8043896 <__swsetup_r+0xba>
 80438a6:	bf00      	nop
 80438a8:	2000000c 	.word	0x2000000c
 80438ac:	08043cdc 	.word	0x08043cdc
 80438b0:	08043cfc 	.word	0x08043cfc
 80438b4:	08043cbc 	.word	0x08043cbc

080438b8 <_close_r>:
 80438b8:	b538      	push	{r3, r4, r5, lr}
 80438ba:	4d06      	ldr	r5, [pc, #24]	; (80438d4 <_close_r+0x1c>)
 80438bc:	2300      	movs	r3, #0
 80438be:	4604      	mov	r4, r0
 80438c0:	4608      	mov	r0, r1
 80438c2:	602b      	str	r3, [r5, #0]
 80438c4:	f7fd f875 	bl	80409b2 <_close>
 80438c8:	1c43      	adds	r3, r0, #1
 80438ca:	d102      	bne.n	80438d2 <_close_r+0x1a>
 80438cc:	682b      	ldr	r3, [r5, #0]
 80438ce:	b103      	cbz	r3, 80438d2 <_close_r+0x1a>
 80438d0:	6023      	str	r3, [r4, #0]
 80438d2:	bd38      	pop	{r3, r4, r5, pc}
 80438d4:	20000128 	.word	0x20000128

080438d8 <__sflush_r>:
 80438d8:	898a      	ldrh	r2, [r1, #12]
 80438da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80438de:	4605      	mov	r5, r0
 80438e0:	0710      	lsls	r0, r2, #28
 80438e2:	460c      	mov	r4, r1
 80438e4:	d458      	bmi.n	8043998 <__sflush_r+0xc0>
 80438e6:	684b      	ldr	r3, [r1, #4]
 80438e8:	2b00      	cmp	r3, #0
 80438ea:	dc05      	bgt.n	80438f8 <__sflush_r+0x20>
 80438ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80438ee:	2b00      	cmp	r3, #0
 80438f0:	dc02      	bgt.n	80438f8 <__sflush_r+0x20>
 80438f2:	2000      	movs	r0, #0
 80438f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80438f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80438fa:	2e00      	cmp	r6, #0
 80438fc:	d0f9      	beq.n	80438f2 <__sflush_r+0x1a>
 80438fe:	2300      	movs	r3, #0
 8043900:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8043904:	682f      	ldr	r7, [r5, #0]
 8043906:	602b      	str	r3, [r5, #0]
 8043908:	d032      	beq.n	8043970 <__sflush_r+0x98>
 804390a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804390c:	89a3      	ldrh	r3, [r4, #12]
 804390e:	075a      	lsls	r2, r3, #29
 8043910:	d505      	bpl.n	804391e <__sflush_r+0x46>
 8043912:	6863      	ldr	r3, [r4, #4]
 8043914:	1ac0      	subs	r0, r0, r3
 8043916:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8043918:	b10b      	cbz	r3, 804391e <__sflush_r+0x46>
 804391a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804391c:	1ac0      	subs	r0, r0, r3
 804391e:	2300      	movs	r3, #0
 8043920:	4602      	mov	r2, r0
 8043922:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8043924:	6a21      	ldr	r1, [r4, #32]
 8043926:	4628      	mov	r0, r5
 8043928:	47b0      	blx	r6
 804392a:	1c43      	adds	r3, r0, #1
 804392c:	89a3      	ldrh	r3, [r4, #12]
 804392e:	d106      	bne.n	804393e <__sflush_r+0x66>
 8043930:	6829      	ldr	r1, [r5, #0]
 8043932:	291d      	cmp	r1, #29
 8043934:	d82c      	bhi.n	8043990 <__sflush_r+0xb8>
 8043936:	4a2a      	ldr	r2, [pc, #168]	; (80439e0 <__sflush_r+0x108>)
 8043938:	40ca      	lsrs	r2, r1
 804393a:	07d6      	lsls	r6, r2, #31
 804393c:	d528      	bpl.n	8043990 <__sflush_r+0xb8>
 804393e:	2200      	movs	r2, #0
 8043940:	6062      	str	r2, [r4, #4]
 8043942:	04d9      	lsls	r1, r3, #19
 8043944:	6922      	ldr	r2, [r4, #16]
 8043946:	6022      	str	r2, [r4, #0]
 8043948:	d504      	bpl.n	8043954 <__sflush_r+0x7c>
 804394a:	1c42      	adds	r2, r0, #1
 804394c:	d101      	bne.n	8043952 <__sflush_r+0x7a>
 804394e:	682b      	ldr	r3, [r5, #0]
 8043950:	b903      	cbnz	r3, 8043954 <__sflush_r+0x7c>
 8043952:	6560      	str	r0, [r4, #84]	; 0x54
 8043954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8043956:	602f      	str	r7, [r5, #0]
 8043958:	2900      	cmp	r1, #0
 804395a:	d0ca      	beq.n	80438f2 <__sflush_r+0x1a>
 804395c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8043960:	4299      	cmp	r1, r3
 8043962:	d002      	beq.n	804396a <__sflush_r+0x92>
 8043964:	4628      	mov	r0, r5
 8043966:	f000 f8fd 	bl	8043b64 <_free_r>
 804396a:	2000      	movs	r0, #0
 804396c:	6360      	str	r0, [r4, #52]	; 0x34
 804396e:	e7c1      	b.n	80438f4 <__sflush_r+0x1c>
 8043970:	6a21      	ldr	r1, [r4, #32]
 8043972:	2301      	movs	r3, #1
 8043974:	4628      	mov	r0, r5
 8043976:	47b0      	blx	r6
 8043978:	1c41      	adds	r1, r0, #1
 804397a:	d1c7      	bne.n	804390c <__sflush_r+0x34>
 804397c:	682b      	ldr	r3, [r5, #0]
 804397e:	2b00      	cmp	r3, #0
 8043980:	d0c4      	beq.n	804390c <__sflush_r+0x34>
 8043982:	2b1d      	cmp	r3, #29
 8043984:	d001      	beq.n	804398a <__sflush_r+0xb2>
 8043986:	2b16      	cmp	r3, #22
 8043988:	d101      	bne.n	804398e <__sflush_r+0xb6>
 804398a:	602f      	str	r7, [r5, #0]
 804398c:	e7b1      	b.n	80438f2 <__sflush_r+0x1a>
 804398e:	89a3      	ldrh	r3, [r4, #12]
 8043990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8043994:	81a3      	strh	r3, [r4, #12]
 8043996:	e7ad      	b.n	80438f4 <__sflush_r+0x1c>
 8043998:	690f      	ldr	r7, [r1, #16]
 804399a:	2f00      	cmp	r7, #0
 804399c:	d0a9      	beq.n	80438f2 <__sflush_r+0x1a>
 804399e:	0793      	lsls	r3, r2, #30
 80439a0:	680e      	ldr	r6, [r1, #0]
 80439a2:	bf08      	it	eq
 80439a4:	694b      	ldreq	r3, [r1, #20]
 80439a6:	600f      	str	r7, [r1, #0]
 80439a8:	bf18      	it	ne
 80439aa:	2300      	movne	r3, #0
 80439ac:	eba6 0807 	sub.w	r8, r6, r7
 80439b0:	608b      	str	r3, [r1, #8]
 80439b2:	f1b8 0f00 	cmp.w	r8, #0
 80439b6:	dd9c      	ble.n	80438f2 <__sflush_r+0x1a>
 80439b8:	6a21      	ldr	r1, [r4, #32]
 80439ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80439bc:	4643      	mov	r3, r8
 80439be:	463a      	mov	r2, r7
 80439c0:	4628      	mov	r0, r5
 80439c2:	47b0      	blx	r6
 80439c4:	2800      	cmp	r0, #0
 80439c6:	dc06      	bgt.n	80439d6 <__sflush_r+0xfe>
 80439c8:	89a3      	ldrh	r3, [r4, #12]
 80439ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80439ce:	81a3      	strh	r3, [r4, #12]
 80439d0:	f04f 30ff 	mov.w	r0, #4294967295
 80439d4:	e78e      	b.n	80438f4 <__sflush_r+0x1c>
 80439d6:	4407      	add	r7, r0
 80439d8:	eba8 0800 	sub.w	r8, r8, r0
 80439dc:	e7e9      	b.n	80439b2 <__sflush_r+0xda>
 80439de:	bf00      	nop
 80439e0:	20400001 	.word	0x20400001

080439e4 <_fflush_r>:
 80439e4:	b538      	push	{r3, r4, r5, lr}
 80439e6:	690b      	ldr	r3, [r1, #16]
 80439e8:	4605      	mov	r5, r0
 80439ea:	460c      	mov	r4, r1
 80439ec:	b913      	cbnz	r3, 80439f4 <_fflush_r+0x10>
 80439ee:	2500      	movs	r5, #0
 80439f0:	4628      	mov	r0, r5
 80439f2:	bd38      	pop	{r3, r4, r5, pc}
 80439f4:	b118      	cbz	r0, 80439fe <_fflush_r+0x1a>
 80439f6:	6983      	ldr	r3, [r0, #24]
 80439f8:	b90b      	cbnz	r3, 80439fe <_fflush_r+0x1a>
 80439fa:	f7ff fa15 	bl	8042e28 <__sinit>
 80439fe:	4b14      	ldr	r3, [pc, #80]	; (8043a50 <_fflush_r+0x6c>)
 8043a00:	429c      	cmp	r4, r3
 8043a02:	d11b      	bne.n	8043a3c <_fflush_r+0x58>
 8043a04:	686c      	ldr	r4, [r5, #4]
 8043a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8043a0a:	2b00      	cmp	r3, #0
 8043a0c:	d0ef      	beq.n	80439ee <_fflush_r+0xa>
 8043a0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8043a10:	07d0      	lsls	r0, r2, #31
 8043a12:	d404      	bmi.n	8043a1e <_fflush_r+0x3a>
 8043a14:	0599      	lsls	r1, r3, #22
 8043a16:	d402      	bmi.n	8043a1e <_fflush_r+0x3a>
 8043a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8043a1a:	f7ff faa3 	bl	8042f64 <__retarget_lock_acquire_recursive>
 8043a1e:	4628      	mov	r0, r5
 8043a20:	4621      	mov	r1, r4
 8043a22:	f7ff ff59 	bl	80438d8 <__sflush_r>
 8043a26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8043a28:	07da      	lsls	r2, r3, #31
 8043a2a:	4605      	mov	r5, r0
 8043a2c:	d4e0      	bmi.n	80439f0 <_fflush_r+0xc>
 8043a2e:	89a3      	ldrh	r3, [r4, #12]
 8043a30:	059b      	lsls	r3, r3, #22
 8043a32:	d4dd      	bmi.n	80439f0 <_fflush_r+0xc>
 8043a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8043a36:	f7ff fa96 	bl	8042f66 <__retarget_lock_release_recursive>
 8043a3a:	e7d9      	b.n	80439f0 <_fflush_r+0xc>
 8043a3c:	4b05      	ldr	r3, [pc, #20]	; (8043a54 <_fflush_r+0x70>)
 8043a3e:	429c      	cmp	r4, r3
 8043a40:	d101      	bne.n	8043a46 <_fflush_r+0x62>
 8043a42:	68ac      	ldr	r4, [r5, #8]
 8043a44:	e7df      	b.n	8043a06 <_fflush_r+0x22>
 8043a46:	4b04      	ldr	r3, [pc, #16]	; (8043a58 <_fflush_r+0x74>)
 8043a48:	429c      	cmp	r4, r3
 8043a4a:	bf08      	it	eq
 8043a4c:	68ec      	ldreq	r4, [r5, #12]
 8043a4e:	e7da      	b.n	8043a06 <_fflush_r+0x22>
 8043a50:	08043cdc 	.word	0x08043cdc
 8043a54:	08043cfc 	.word	0x08043cfc
 8043a58:	08043cbc 	.word	0x08043cbc

08043a5c <_lseek_r>:
 8043a5c:	b538      	push	{r3, r4, r5, lr}
 8043a5e:	4d07      	ldr	r5, [pc, #28]	; (8043a7c <_lseek_r+0x20>)
 8043a60:	4604      	mov	r4, r0
 8043a62:	4608      	mov	r0, r1
 8043a64:	4611      	mov	r1, r2
 8043a66:	2200      	movs	r2, #0
 8043a68:	602a      	str	r2, [r5, #0]
 8043a6a:	461a      	mov	r2, r3
 8043a6c:	f7fc ffc8 	bl	8040a00 <_lseek>
 8043a70:	1c43      	adds	r3, r0, #1
 8043a72:	d102      	bne.n	8043a7a <_lseek_r+0x1e>
 8043a74:	682b      	ldr	r3, [r5, #0]
 8043a76:	b103      	cbz	r3, 8043a7a <_lseek_r+0x1e>
 8043a78:	6023      	str	r3, [r4, #0]
 8043a7a:	bd38      	pop	{r3, r4, r5, pc}
 8043a7c:	20000128 	.word	0x20000128

08043a80 <__swhatbuf_r>:
 8043a80:	b570      	push	{r4, r5, r6, lr}
 8043a82:	460e      	mov	r6, r1
 8043a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8043a88:	2900      	cmp	r1, #0
 8043a8a:	b096      	sub	sp, #88	; 0x58
 8043a8c:	4614      	mov	r4, r2
 8043a8e:	461d      	mov	r5, r3
 8043a90:	da08      	bge.n	8043aa4 <__swhatbuf_r+0x24>
 8043a92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8043a96:	2200      	movs	r2, #0
 8043a98:	602a      	str	r2, [r5, #0]
 8043a9a:	061a      	lsls	r2, r3, #24
 8043a9c:	d410      	bmi.n	8043ac0 <__swhatbuf_r+0x40>
 8043a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8043aa2:	e00e      	b.n	8043ac2 <__swhatbuf_r+0x42>
 8043aa4:	466a      	mov	r2, sp
 8043aa6:	f000 f8bb 	bl	8043c20 <_fstat_r>
 8043aaa:	2800      	cmp	r0, #0
 8043aac:	dbf1      	blt.n	8043a92 <__swhatbuf_r+0x12>
 8043aae:	9a01      	ldr	r2, [sp, #4]
 8043ab0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8043ab4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8043ab8:	425a      	negs	r2, r3
 8043aba:	415a      	adcs	r2, r3
 8043abc:	602a      	str	r2, [r5, #0]
 8043abe:	e7ee      	b.n	8043a9e <__swhatbuf_r+0x1e>
 8043ac0:	2340      	movs	r3, #64	; 0x40
 8043ac2:	2000      	movs	r0, #0
 8043ac4:	6023      	str	r3, [r4, #0]
 8043ac6:	b016      	add	sp, #88	; 0x58
 8043ac8:	bd70      	pop	{r4, r5, r6, pc}
	...

08043acc <__smakebuf_r>:
 8043acc:	898b      	ldrh	r3, [r1, #12]
 8043ace:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8043ad0:	079d      	lsls	r5, r3, #30
 8043ad2:	4606      	mov	r6, r0
 8043ad4:	460c      	mov	r4, r1
 8043ad6:	d507      	bpl.n	8043ae8 <__smakebuf_r+0x1c>
 8043ad8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8043adc:	6023      	str	r3, [r4, #0]
 8043ade:	6123      	str	r3, [r4, #16]
 8043ae0:	2301      	movs	r3, #1
 8043ae2:	6163      	str	r3, [r4, #20]
 8043ae4:	b002      	add	sp, #8
 8043ae6:	bd70      	pop	{r4, r5, r6, pc}
 8043ae8:	ab01      	add	r3, sp, #4
 8043aea:	466a      	mov	r2, sp
 8043aec:	f7ff ffc8 	bl	8043a80 <__swhatbuf_r>
 8043af0:	9900      	ldr	r1, [sp, #0]
 8043af2:	4605      	mov	r5, r0
 8043af4:	4630      	mov	r0, r6
 8043af6:	f7ff fa57 	bl	8042fa8 <_malloc_r>
 8043afa:	b948      	cbnz	r0, 8043b10 <__smakebuf_r+0x44>
 8043afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8043b00:	059a      	lsls	r2, r3, #22
 8043b02:	d4ef      	bmi.n	8043ae4 <__smakebuf_r+0x18>
 8043b04:	f023 0303 	bic.w	r3, r3, #3
 8043b08:	f043 0302 	orr.w	r3, r3, #2
 8043b0c:	81a3      	strh	r3, [r4, #12]
 8043b0e:	e7e3      	b.n	8043ad8 <__smakebuf_r+0xc>
 8043b10:	4b0d      	ldr	r3, [pc, #52]	; (8043b48 <__smakebuf_r+0x7c>)
 8043b12:	62b3      	str	r3, [r6, #40]	; 0x28
 8043b14:	89a3      	ldrh	r3, [r4, #12]
 8043b16:	6020      	str	r0, [r4, #0]
 8043b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8043b1c:	81a3      	strh	r3, [r4, #12]
 8043b1e:	9b00      	ldr	r3, [sp, #0]
 8043b20:	6163      	str	r3, [r4, #20]
 8043b22:	9b01      	ldr	r3, [sp, #4]
 8043b24:	6120      	str	r0, [r4, #16]
 8043b26:	b15b      	cbz	r3, 8043b40 <__smakebuf_r+0x74>
 8043b28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8043b2c:	4630      	mov	r0, r6
 8043b2e:	f000 f889 	bl	8043c44 <_isatty_r>
 8043b32:	b128      	cbz	r0, 8043b40 <__smakebuf_r+0x74>
 8043b34:	89a3      	ldrh	r3, [r4, #12]
 8043b36:	f023 0303 	bic.w	r3, r3, #3
 8043b3a:	f043 0301 	orr.w	r3, r3, #1
 8043b3e:	81a3      	strh	r3, [r4, #12]
 8043b40:	89a0      	ldrh	r0, [r4, #12]
 8043b42:	4305      	orrs	r5, r0
 8043b44:	81a5      	strh	r5, [r4, #12]
 8043b46:	e7cd      	b.n	8043ae4 <__smakebuf_r+0x18>
 8043b48:	08042dc1 	.word	0x08042dc1

08043b4c <__malloc_lock>:
 8043b4c:	4801      	ldr	r0, [pc, #4]	; (8043b54 <__malloc_lock+0x8>)
 8043b4e:	f7ff ba09 	b.w	8042f64 <__retarget_lock_acquire_recursive>
 8043b52:	bf00      	nop
 8043b54:	2000011c 	.word	0x2000011c

08043b58 <__malloc_unlock>:
 8043b58:	4801      	ldr	r0, [pc, #4]	; (8043b60 <__malloc_unlock+0x8>)
 8043b5a:	f7ff ba04 	b.w	8042f66 <__retarget_lock_release_recursive>
 8043b5e:	bf00      	nop
 8043b60:	2000011c 	.word	0x2000011c

08043b64 <_free_r>:
 8043b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8043b66:	2900      	cmp	r1, #0
 8043b68:	d044      	beq.n	8043bf4 <_free_r+0x90>
 8043b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8043b6e:	9001      	str	r0, [sp, #4]
 8043b70:	2b00      	cmp	r3, #0
 8043b72:	f1a1 0404 	sub.w	r4, r1, #4
 8043b76:	bfb8      	it	lt
 8043b78:	18e4      	addlt	r4, r4, r3
 8043b7a:	f7ff ffe7 	bl	8043b4c <__malloc_lock>
 8043b7e:	4a1e      	ldr	r2, [pc, #120]	; (8043bf8 <_free_r+0x94>)
 8043b80:	9801      	ldr	r0, [sp, #4]
 8043b82:	6813      	ldr	r3, [r2, #0]
 8043b84:	b933      	cbnz	r3, 8043b94 <_free_r+0x30>
 8043b86:	6063      	str	r3, [r4, #4]
 8043b88:	6014      	str	r4, [r2, #0]
 8043b8a:	b003      	add	sp, #12
 8043b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8043b90:	f7ff bfe2 	b.w	8043b58 <__malloc_unlock>
 8043b94:	42a3      	cmp	r3, r4
 8043b96:	d908      	bls.n	8043baa <_free_r+0x46>
 8043b98:	6825      	ldr	r5, [r4, #0]
 8043b9a:	1961      	adds	r1, r4, r5
 8043b9c:	428b      	cmp	r3, r1
 8043b9e:	bf01      	itttt	eq
 8043ba0:	6819      	ldreq	r1, [r3, #0]
 8043ba2:	685b      	ldreq	r3, [r3, #4]
 8043ba4:	1949      	addeq	r1, r1, r5
 8043ba6:	6021      	streq	r1, [r4, #0]
 8043ba8:	e7ed      	b.n	8043b86 <_free_r+0x22>
 8043baa:	461a      	mov	r2, r3
 8043bac:	685b      	ldr	r3, [r3, #4]
 8043bae:	b10b      	cbz	r3, 8043bb4 <_free_r+0x50>
 8043bb0:	42a3      	cmp	r3, r4
 8043bb2:	d9fa      	bls.n	8043baa <_free_r+0x46>
 8043bb4:	6811      	ldr	r1, [r2, #0]
 8043bb6:	1855      	adds	r5, r2, r1
 8043bb8:	42a5      	cmp	r5, r4
 8043bba:	d10b      	bne.n	8043bd4 <_free_r+0x70>
 8043bbc:	6824      	ldr	r4, [r4, #0]
 8043bbe:	4421      	add	r1, r4
 8043bc0:	1854      	adds	r4, r2, r1
 8043bc2:	42a3      	cmp	r3, r4
 8043bc4:	6011      	str	r1, [r2, #0]
 8043bc6:	d1e0      	bne.n	8043b8a <_free_r+0x26>
 8043bc8:	681c      	ldr	r4, [r3, #0]
 8043bca:	685b      	ldr	r3, [r3, #4]
 8043bcc:	6053      	str	r3, [r2, #4]
 8043bce:	4421      	add	r1, r4
 8043bd0:	6011      	str	r1, [r2, #0]
 8043bd2:	e7da      	b.n	8043b8a <_free_r+0x26>
 8043bd4:	d902      	bls.n	8043bdc <_free_r+0x78>
 8043bd6:	230c      	movs	r3, #12
 8043bd8:	6003      	str	r3, [r0, #0]
 8043bda:	e7d6      	b.n	8043b8a <_free_r+0x26>
 8043bdc:	6825      	ldr	r5, [r4, #0]
 8043bde:	1961      	adds	r1, r4, r5
 8043be0:	428b      	cmp	r3, r1
 8043be2:	bf04      	itt	eq
 8043be4:	6819      	ldreq	r1, [r3, #0]
 8043be6:	685b      	ldreq	r3, [r3, #4]
 8043be8:	6063      	str	r3, [r4, #4]
 8043bea:	bf04      	itt	eq
 8043bec:	1949      	addeq	r1, r1, r5
 8043bee:	6021      	streq	r1, [r4, #0]
 8043bf0:	6054      	str	r4, [r2, #4]
 8043bf2:	e7ca      	b.n	8043b8a <_free_r+0x26>
 8043bf4:	b003      	add	sp, #12
 8043bf6:	bd30      	pop	{r4, r5, pc}
 8043bf8:	20000120 	.word	0x20000120

08043bfc <_read_r>:
 8043bfc:	b538      	push	{r3, r4, r5, lr}
 8043bfe:	4d07      	ldr	r5, [pc, #28]	; (8043c1c <_read_r+0x20>)
 8043c00:	4604      	mov	r4, r0
 8043c02:	4608      	mov	r0, r1
 8043c04:	4611      	mov	r1, r2
 8043c06:	2200      	movs	r2, #0
 8043c08:	602a      	str	r2, [r5, #0]
 8043c0a:	461a      	mov	r2, r3
 8043c0c:	f7fc fe98 	bl	8040940 <_read>
 8043c10:	1c43      	adds	r3, r0, #1
 8043c12:	d102      	bne.n	8043c1a <_read_r+0x1e>
 8043c14:	682b      	ldr	r3, [r5, #0]
 8043c16:	b103      	cbz	r3, 8043c1a <_read_r+0x1e>
 8043c18:	6023      	str	r3, [r4, #0]
 8043c1a:	bd38      	pop	{r3, r4, r5, pc}
 8043c1c:	20000128 	.word	0x20000128

08043c20 <_fstat_r>:
 8043c20:	b538      	push	{r3, r4, r5, lr}
 8043c22:	4d07      	ldr	r5, [pc, #28]	; (8043c40 <_fstat_r+0x20>)
 8043c24:	2300      	movs	r3, #0
 8043c26:	4604      	mov	r4, r0
 8043c28:	4608      	mov	r0, r1
 8043c2a:	4611      	mov	r1, r2
 8043c2c:	602b      	str	r3, [r5, #0]
 8043c2e:	f7fc fecc 	bl	80409ca <_fstat>
 8043c32:	1c43      	adds	r3, r0, #1
 8043c34:	d102      	bne.n	8043c3c <_fstat_r+0x1c>
 8043c36:	682b      	ldr	r3, [r5, #0]
 8043c38:	b103      	cbz	r3, 8043c3c <_fstat_r+0x1c>
 8043c3a:	6023      	str	r3, [r4, #0]
 8043c3c:	bd38      	pop	{r3, r4, r5, pc}
 8043c3e:	bf00      	nop
 8043c40:	20000128 	.word	0x20000128

08043c44 <_isatty_r>:
 8043c44:	b538      	push	{r3, r4, r5, lr}
 8043c46:	4d06      	ldr	r5, [pc, #24]	; (8043c60 <_isatty_r+0x1c>)
 8043c48:	2300      	movs	r3, #0
 8043c4a:	4604      	mov	r4, r0
 8043c4c:	4608      	mov	r0, r1
 8043c4e:	602b      	str	r3, [r5, #0]
 8043c50:	f7fc fecb 	bl	80409ea <_isatty>
 8043c54:	1c43      	adds	r3, r0, #1
 8043c56:	d102      	bne.n	8043c5e <_isatty_r+0x1a>
 8043c58:	682b      	ldr	r3, [r5, #0]
 8043c5a:	b103      	cbz	r3, 8043c5e <_isatty_r+0x1a>
 8043c5c:	6023      	str	r3, [r4, #0]
 8043c5e:	bd38      	pop	{r3, r4, r5, pc}
 8043c60:	20000128 	.word	0x20000128

08043c64 <_init>:
 8043c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043c66:	bf00      	nop
 8043c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8043c6a:	bc08      	pop	{r3}
 8043c6c:	469e      	mov	lr, r3
 8043c6e:	4770      	bx	lr

08043c70 <_fini>:
 8043c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043c72:	bf00      	nop
 8043c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8043c76:	bc08      	pop	{r3}
 8043c78:	469e      	mov	lr, r3
 8043c7a:	4770      	bx	lr
